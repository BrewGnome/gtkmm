/* $Id$ */

/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/widget.h>
#include <gtkmm/action.h>
#include <gtkmm/actiongroup.h>
#include <gtkmm/uimanager.h>
 
_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)


namespace Gtk
{

_WRAP_ENUM(UIManagerItemType, GtkUIManagerItemType)

class UIManager : public Glib::Object
{
  _CLASS_GOBJECT(UIManager, GtkUIManager, GTK_UI_MANAGER, Glib::Object, GObject)

  _CTOR_DEFAULT()
public:
  _WRAP_CREATE()

  _WRAP_METHOD(void set_add_tearoffs(bool add_tearoffs = true), gtk_ui_manager_set_add_tearoffs)
  _WRAP_METHOD(bool get_add_tearoffs() const, gtk_ui_manager_get_add_tearoffs)
  _WRAP_METHOD(void insert_action_group(const Glib::RefPtr<ActionGroup>& action_group, int pos = 0), gtk_ui_manager_insert_action_group)
  _WRAP_METHOD(void remove_action_group(const Glib::RefPtr<ActionGroup>& action_group), gtk_ui_manager_remove_action_group)

  _WRAP_METHOD(Glib::ListHandle< Glib::RefPtr<ActionGroup> > get_action_groups(), gtk_ui_manager_get_action_groups)
  _WRAP_METHOD(Glib::ListHandle< Glib::RefPtr<const ActionGroup> > get_action_groups() const, gtk_ui_manager_get_action_groups)
  
  _WRAP_METHOD(Glib::RefPtr<AccelGroup> get_accel_group(), gtk_ui_manager_get_accel_group, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const AccelGroup> get_accel_group() const, gtk_ui_manager_get_accel_group, refreturn)
  _WRAP_METHOD(Widget* get_widget(const Glib::ustring& path), gtk_ui_manager_get_widget)
  _WRAP_METHOD(const Widget* get_widget(const Glib::ustring& path) const, gtk_ui_manager_get_widget)

  _WRAP_METHOD(Glib::SListHandle<Widget*> get_toplevels(UIManagerItemType types), gtk_ui_manager_get_toplevels)
  _WRAP_METHOD(Glib::SListHandle<const Widget*> get_toplevels(UIManagerItemType types) const, gtk_ui_manager_get_toplevels)
                 
  _WRAP_METHOD(Glib::RefPtr<Action> get_action(const Glib::ustring& path), gtk_ui_manager_get_action, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Action> get_action(const Glib::ustring& path) const, gtk_ui_manager_get_action, refreturn)
  
  guint add_ui_from_string(const Glib::ustring& buffer);
  _IGNORE(gtk_ui_manager_add_ui_from_string)
  _WRAP_METHOD(guint add_ui_from_file(const Glib::ustring& filename), gtk_ui_manager_add_ui_from_file, errthrow)

//TODO: Is top=true a good default?
  typedef guint ui_merge_id;
  _WRAP_METHOD(void add_ui(ui_merge_id merge_id, const Glib::ustring& path, const Glib::ustring& name, const Glib::ustring& action, UIManagerItemType type, bool top = true), gtk_ui_manager_add_ui)
  _WRAP_METHOD(void remove_ui(ui_merge_id merge_id), gtk_ui_manager_remove_ui)
  _WRAP_METHOD(Glib::ustring get_ui() const, gtk_ui_manager_get_ui)
  _WRAP_METHOD(void ensure_update(), gtk_ui_manager_ensure_update)
  _WRAP_METHOD(ui_merge_id new_merge_id(), gtk_ui_manager_new_merge_id)


  _WRAP_SIGNAL(void add_widget(Widget* widget), add_widget)
  _WRAP_SIGNAL(void actions_changed(), actions_changed)
  _WRAP_SIGNAL(void connect_proxy(const Glib::RefPtr<Action>& action, Widget* widget), connect_proxy, no_default_handler)
  _WRAP_SIGNAL(void disonnect_proxy(const Glib::RefPtr<Action>& action, Widget* widget), disconnect_proxy, no_default_handler)
  _WRAP_SIGNAL(void pre_activate(const Glib::RefPtr<Action>& action), pre_activate, no_default_handler)
  _WRAP_SIGNAL(void post_activate(const Glib::RefPtr<Action>& action), post_activate, no_default_handler)

  _WRAP_PROPERTY("add_tearoffs", bool)
  _WRAP_PROPERTY("ui", Glib::ustring)
             
};

} // namespace Gtk

