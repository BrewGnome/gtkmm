/* Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/container.h>
#include <gtkmm/toolitem.h>
#include <gtkmm/orientable.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/toolitemgroup.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/container_p.h)

namespace Gtk
{

_WRAP_ENUM(WrapAllocationMode, GtkWrapAllocationMode)
_WRAP_ENUM(WrapBoxSpreading, GtkWrapBoxSpreading)
_WRAP_ENUM(WrapBoxPacking, GtkWrapBoxPacking)

/** TODO
 *
 * @newin{3,0}
 *
 * @ingroup Widgets
 * @ingroup Containers
 */
class WrapBox
: public Container //TODO: Also uses SizeRequest
{
  _CLASS_GTKOBJECT(WrapBox, GtkWrapBox, GTK_WRAP_BOX, Gtk::Container, GtkContainer)
  _IMPLEMENTS_INTERFACE(Orientable)
public:
  _WRAP_CTOR(WrapBox(WrapAllocationMode mode = WRAP_ALLOCATE_FREE, WrapBoxSpreading spreading = WRAP_BOX_SPREAD_START, guint horizontal_spacing = 0, guint vertical_spacing = 0), gtk_wrap_box_new)

  _WRAP_METHOD(void set_allocation_mode(WrapAllocationMode mode), gtk_wrap_box_set_allocation_mode)
  _WRAP_METHOD(WrapAllocationMode get_allocation_mode() const, gtk_wrap_box_get_allocation_mode)

  _WRAP_METHOD(void set_spreading(WrapBoxSpreading spreading), gtk_wrap_box_set_spreading)
  _WRAP_METHOD(WrapBoxSpreading get_spreading() const, gtk_wrap_box_get_spreading)

  _WRAP_METHOD(void set_vertical_spacing(guint spacing), gtk_wrap_box_set_vertical_spacing)
  _WRAP_METHOD(guint get_vertical_spacing() const, gtk_wrap_box_get_vertical_spacing)

  _WRAP_METHOD(void set_horizontal_spacing(guint spacing), gtk_wrap_box_set_horizontal_spacing)
  _WRAP_METHOD(guint get_horizontal_spacing() const, gtk_wrap_box_get_horizontal_spacing)

  _WRAP_METHOD(void set_minimum_line_children(guint n_children), gtk_wrap_box_set_minimum_line_children)
  _WRAP_METHOD(guint get_minimum_line_children() const, gtk_wrap_box_get_minimum_line_children)

  _WRAP_METHOD(void set_natural_line_children(guint n_children), gtk_wrap_box_set_natural_line_children)
  _WRAP_METHOD(guint get_natural_line_children() const, gtk_wrap_box_get_natural_line_children)

  //TODO: Is the default packing appropriate (and like the default for a Box::pack_start())?
  _WRAP_METHOD(void insert_child(Widget& widget, int index, guint horizontal_padding = 0, guint vertical_padding = 0, WrapBoxPacking packing = WrapBoxPacking(0)), gtk_wrap_box_insert_child_with_padding)

  //TODO: Documentation
  void append_child(Widget& widget, guint horizontal_padding = 0, guint vertical_padding = 0, WrapBoxPacking packing = WrapBoxPacking(0));

  _WRAP_METHOD(void reorder_child(Widget& widget, guint index), gtk_wrap_box_reorder_child)


  _WRAP_PROPERTY("allocation-mode", WrapAllocationMode)
  _WRAP_PROPERTY("spreading", WrapBoxSpreading)
  _WRAP_PROPERTY("minimum-line-children", guint)
  _WRAP_PROPERTY("natural-line-children", guint)
  _WRAP_PROPERTY("vertical-spacing", guint)
  _WRAP_PROPERTY("horizontal-spacing", guint)
};

} // namespace Gtk
