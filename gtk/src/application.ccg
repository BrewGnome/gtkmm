// -*- c++ -*-
/* $Id: action.ccg,v 1.11 2006/05/10 20:59:27 murrayc Exp $ */

/* Copyright 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtk.h>
#include <gtkmm/window.h>
#include <glibmm/init.h>
#include <giomm/init.h>
#include <pangomm/wrap_init.h>
#ifdef GTKMM_ATKMM_ENABLED
#include <atkmm/wrap_init.h>
#endif //GTKMM_ATKMM_ENABLED
#include <gdkmm/wrap_init.h>
#include <gtkmm/wrap_init.h>

namespace Gtk
{

static void init_gtkmm_internals()
{
  static bool init_done = false;

  if(!init_done)
  {
    Glib::init();
    Gio::init();

    // Populate the map of GTypes to C++ wrap_new() functions.
    Pango::wrap_init();
#ifdef GTKMM_ATKMM_ENABLED
    Atk::wrap_init();
#endif //GTKMM_ATKMM_ENABLED
    Gdk::wrap_init();
    Gtk::wrap_init();

    init_done = true;
  }
}

const Glib::Class& Application::custom_class_init()
{
  Glib::init();
  return application_class_.init();
}

Application::Application(const Glib::ustring& application_id, Gio::ApplicationFlags flags)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::Application(Glib::ConstructParams(custom_class_init(), "application_id", application_id.c_str(), "flags", GApplicationFlags(flags), static_cast<char*>(0))),
  m_main_window(0),
  m_argc(0),
  m_argv(0)
{
}

Application::Application(int argc, char** argv, const Glib::ustring& application_id, Gio::ApplicationFlags flags)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gio::Application(Glib::ConstructParams(custom_class_init(), "application_id", application_id.c_str(), "flags", GApplicationFlags(flags), static_cast<char*>(0))),
  m_main_window(0),
  m_argc(argc),
  m_argv(argv)
{
  gtk_init(&argc, &argv);
  init_gtkmm_internals();
}

void Application::on_activate_showwindow()
{
  if(m_main_window)
    m_main_window->show();
}

int Application::run(int argc, char** argv)
{
  return Gio::Application::run(argc, argv);
}


int Application::run(Gtk::Window& window, int argc, char** argv)
{
  add_window(window);
  
  //Show the window when the application starts.
  //We could just call show() now,
  //but GApplication currently warns if we don't connect to the activate signal,
  //which seems very C-centric. See https://bugzilla.gnome.org/show_bug.cgi?id=640042
  m_main_window = &window;
  signal_activate().connect(
    sigc::mem_fun(*this, &Application::on_activate_showwindow));

  const int result = Gio::Application::run(argc, argv);
  init_gtkmm_internals();
  return result;
}

int Application::run(Gtk::Window& window)
{
  g_assert(m_argc);
  g_assert(m_argv);

  add_window(window);
  
  //Show the window when the application starts.
  //We could just call show() now,
  //but GApplication currently warns if we don't connect to the activate signal,
  //which seems very C-centric. See https://bugzilla.gnome.org/show_bug.cgi?id=640042
  m_main_window = &window;
  signal_activate().connect(
    sigc::mem_fun(*this, &Application::on_activate_showwindow));

  const int result = Gio::Application::run(m_argc, m_argv);
  init_gtkmm_internals();
  return result;
}


} // namespace Gtk
