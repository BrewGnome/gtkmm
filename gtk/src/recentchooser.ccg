/* Copyright 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkrecentchooser.h>

namespace
{

// This Signal Proxy allows the C++ coder to specify a sigc::slot instead of a static function.
class SignalProxy_Compare
{
public:
  typedef Gtk::RecentChooser::SlotCompare SlotType;

  explicit SignalProxy_Compare(const SlotType& slot);
  ~SignalProxy_Compare();

  static int gtk_callback(GtkRecentInfo* a, GtkRecentInfo* b, gpointer data);
  static void gtk_callback_destroy(gpointer data);
private:
  SlotType slot_;
};

SignalProxy_Compare::SignalProxy_Compare(const SlotType& slot)
:
  slot_(slot)
{}

SignalProxy_Compare::~SignalProxy_Compare()
{}

int SignalProxy_Compare::gtk_callback(GtkRecentInfo* a, GtkRecentInfo* b, gpointer data)
{
  SignalProxy_Compare *const self = static_cast<SignalProxy_Compare*>(data);

  try
  {
    return (self->slot_)(Glib::wrap(a), Glib::wrap(b));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return 0;
}

void SignalProxy_Compare::gtk_callback_destroy(gpointer data)
{
  delete static_cast<SignalProxy_Compare*>(data);
}

}

namespace Gtk
{

//Allow the generated code to work without the prefix:
typedef RecentChooser::ArrayHandle_RecentInfos ArrayHandle_RecentInfos;

void RecentChooser::set_sort_func(const SlotCompare& slot)
{
  SignalProxy_Compare *const pSignalProxy = new SignalProxy_Compare(slot);

  gtk_recent_chooser_set_sort_func(
      gobj(),
      &SignalProxy_Compare::gtk_callback, pSignalProxy,
      &SignalProxy_Compare::gtk_callback_destroy);
}

Glib::StringArrayHandle RecentChooser::get_uris() const
{
  return Glib::StringArrayHandle(gtk_recent_chooser_get_uris(const_cast<GtkRecentChooser*>(gobj()), NULL));
}

void RecentChooser::unset_limit()
{
  gtk_recent_choose_set_limit(gobj(), -1 /* See C docs */);
}
