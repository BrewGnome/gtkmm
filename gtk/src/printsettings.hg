/* Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>
#include <gtkmm/enums.h>
#include <gtkmm/papersize.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{

/** Print settings keys.
 * TODO: Put this in a .cc file, reusing the C implementations.
 *
 */
const Glib::ustring PRINT_SETTINGS_PRINTER        = "printer";
const Glib::ustring PRINT_SETTINGS_ORIENTATION    = "orientation";
const Glib::ustring PRINT_SETTINGS_PAPER_FORMAT   = "paper-format";
const Glib::ustring PRINT_SETTINGS_PAPER_WIDTH    = "paper-width";
const Glib::ustring PRINT_SETTINGS_PAPER_HEIGHT   = "paper-height";
const Glib::ustring PRINT_SETTINGS_NUM_COPIES     = "num-copies";
const Glib::ustring PRINT_SETTINGS_DEFAULT_SOURCE = "default-source";
const Glib::ustring PRINT_SETTINGS_QUALITY        = "quality";
const Glib::ustring PRINT_SETTINGS_RESOLUTION     = "resolution";
const Glib::ustring PRINT_SETTINGS_USE_COLOR      = "use-color";
const Glib::ustring PRINT_SETTINGS_DUPLEX         = "duplex";
const Glib::ustring PRINT_SETTINGS_COLLATE        = "collate";
const Glib::ustring PRINT_SETTINGS_REVERSE        = "reverse";
const Glib::ustring PRINT_SETTINGS_MEDIA_TYPE     = "media-type";
const Glib::ustring PRINT_SETTINGS_DITHER         = "dither";
const Glib::ustring PRINT_SETTINGS_SCALE          = "scale";
const Glib::ustring PRINT_SETTINGS_PRINT_PAGES    = "print-pages";
const Glib::ustring PRINT_SETTINGS_PAGE_RANGES    = "page-ranges";
const Glib::ustring PRINT_SETTINGS_PAGE_SET       = "page-set";
const Glib::ustring PRINT_SETTINGS_PRINT_TO_FILE  = "print-to-file";
const Glib::ustring PRINT_SETTINGS_FINISHINGS     = "finishings";
const Glib::ustring PRINT_SETTINGS_NUMBER_UP      = "number-up";
const Glib::ustring PRINT_SETTINGS_OUTPUT_BIN     = "output-bin";

const Glib::ustring PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version";
const Glib::ustring PRINT_SETTINGS_WIN32_DRIVER_EXTRA   = "win32-driver-extra";

_WRAP_ENUM(PrintDuplex, GtkPrintDuplex)
_WRAP_ENUM(PrintQuality, GtkPrintQuality)
_WRAP_ENUM(PrintPages, GtkPrintPages)
_WRAP_ENUM(PageSet, GtkPageSet)

class PrintSettings : public Glib::Object
{
  _CLASS_GOBJECT(PrintSettings, GtkPrintSettings, GTK_PRINT_SETTINGS, Glib::Object, GObject)
protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _IGNORE(gtk_print_settings_copy)

  //TODO: add a @see link?
  _WRAP_METHOD(bool has_key(const Glib::ustring& key) const, gtk_print_settings_has_key)

  _WRAP_METHOD(Glib::ustring get(const Glib::ustring& key) const, gtk_print_settings_get)

  _WRAP_METHOD(void set(const Glib::ustring& key, const Glib::ustring& value), gtk_print_settings_set)
  _WRAP_METHOD(void unset(const Glib::ustring& key), gtk_print_settings_unset)

  /** For example, 
   * void on_foreach_setting(const Glib::ustring& key, const Glib::ustring& value);
   */
  typedef sigc::slot<void, Glib::ustring&, Glib::ustring&> SlotForeach;

  /** Calls a function for each print setting.
  * @param slot The callback to call for each print setting.
  */
  void setting_foreach(const SlotForeach& slot);

 _IGNORE(gtk_print_settings_foreach)

  _WRAP_METHOD(bool get_bool(const Glib::ustring& key) const, gtk_print_settings_get_bool)
  _WRAP_METHOD(void set_bool(const Glib::ustring& key, bool value = true), gtk_print_settings_set_bool)

  _WRAP_METHOD(double get_double(const Glib::ustring& key) const, gtk_print_settings_get_double)
  _WRAP_METHOD(double get_double_with_default(const Glib::ustring& key, double def) const,
               gtk_print_settings_get_double_with_default)
  _WRAP_METHOD(void set_double(const Glib::ustring& key, double value), gtk_print_settings_set_double)

  _WRAP_METHOD(double get_length(const Glib::ustring& key, Unit unit) const, gtk_print_settings_get_length)
  _WRAP_METHOD(void set_length(const Glib::ustring& key, double value, Unit unit), gtk_print_settings_set_length)

  _WRAP_METHOD(int get_int(const Glib::ustring& key) const, gtk_print_settings_get_int)
  _WRAP_METHOD(int get_int_with_default(const Glib::ustring& key, int def) const,
               gtk_print_settings_get_int_with_default)
  _WRAP_METHOD(void set_int(const Glib::ustring& key, int value), gtk_print_settings_set_int)

  // helpers:

  _WRAP_METHOD(Glib::ustring get_printer() const, gtk_print_settings_get_printer)
  _WRAP_METHOD(void set_printer(const Glib::ustring& name), gtk_print_settings_set_printer)

  _WRAP_METHOD(PageOrientation get_orientation() const, gtk_print_settings_get_orientation)
  _WRAP_METHOD(void set_orientation(PageOrientation orientation), gtk_print_settings_set_orientation)

  _WRAP_METHOD(PaperSize get_paper_size(), gtk_print_settings_get_paper_size)
  _WRAP_METHOD(const PaperSize get_paper_size() const, gtk_print_settings_get_paper_size, constversion)
  _WRAP_METHOD(void set_paper_size(const PaperSize& paper_size), gtk_print_settings_set_paper_size)

  _WRAP_METHOD(double get_paper_width(Unit unit) const, gtk_print_settings_get_paper_width)
  _WRAP_METHOD(void set_paper_width(double width, Unit unit), gtk_print_settings_set_paper_width)
  _WRAP_METHOD(double get_paper_height(Unit unit) const, gtk_print_settings_get_paper_height)
  _WRAP_METHOD(void set_paper_height(double height, Unit unit), gtk_print_settings_set_paper_height)

  _WRAP_METHOD(bool get_use_color() const, gtk_print_settings_get_use_color)
  _WRAP_METHOD(void set_use_color(bool use_color = true), gtk_print_settings_set_use_color)

  _WRAP_METHOD(bool get_collate() const, gtk_print_settings_get_collate)
  _WRAP_METHOD(void set_collate(bool collate = true), gtk_print_settings_set_collate)

  _WRAP_METHOD(bool get_reverse() const, gtk_print_settings_get_reverse)
  _WRAP_METHOD(void set_reverse(bool reverse = true), gtk_print_settings_set_reverse)

  _WRAP_METHOD(PrintDuplex get_duplex() const, gtk_print_settings_get_duplex)
  _WRAP_METHOD(void set_duplex(PrintDuplex duplex), gtk_print_settings_set_duplex)

  _WRAP_METHOD(PrintQuality get_quality() const, gtk_print_settings_get_quality)
  _WRAP_METHOD(void set_quality(PrintQuality quality), gtk_print_settings_set_quality)

  _WRAP_METHOD(int get_num_copies() const, gtk_print_settings_get_num_copies)
  _WRAP_METHOD(void set_num_copies(int num_copies), gtk_print_settings_set_num_copies)

  _WRAP_METHOD(int get_number_up() const, gtk_print_settings_get_number_up)
  _WRAP_METHOD(void set_number_up(int number_up), gtk_print_settings_set_number_up)

  _WRAP_METHOD(int get_resolution() const, gtk_print_settings_get_resolution)
  _WRAP_METHOD(void set_resolution(int resolution), gtk_print_settings_set_resolution)

  _WRAP_METHOD(double get_scale() const, gtk_print_settings_get_scale)
  _WRAP_METHOD(void set_scale(double scale), gtk_print_settings_set_scale)

  _WRAP_METHOD(bool get_print_to_file() const, gtk_print_settings_get_print_to_file)
  _WRAP_METHOD(void set_print_to_file(bool print_to_file = true), gtk_print_settings_set_print_to_file)

  _WRAP_METHOD(PrintPages get_print_pages() const, gtk_print_settings_get_print_pages)
  _WRAP_METHOD(void set_print_pages(PrintPages print_pages), gtk_print_settings_set_print_pages)

  //TODO: What part of the C API does this correspond to?
  class PageRange
  {
  public:
    PageRange();
    PageRange(int start, int end);

    int start;
    int end;
  };

  Glib::ArrayHandle<PageRange> get_page_ranges() const;
  void set_page_ranges(const Glib::ArrayHandle<PageRange>& page_ranges);

  _IGNORE(gtk_print_settings_get_page_ranges, gtk_print_settings_set_page_ranges)

  _WRAP_METHOD(PageSet get_page_set() const, gtk_print_settings_get_page_set)
  _WRAP_METHOD(void set_page_set(PageSet page_set), gtk_print_settings_set_page_set)

  _WRAP_METHOD(Glib::ustring get_default_source() const, gtk_print_settings_get_default_source)
  _WRAP_METHOD(void set_default_source(const Glib::ustring& default_source), gtk_print_settings_set_default_source)

  _WRAP_METHOD(Glib::ustring get_media_type() const, gtk_print_settings_get_media_type)
  _WRAP_METHOD(void set_media_type(const Glib::ustring& media_type), gtk_print_settings_set_media_type)

  _WRAP_METHOD(Glib::ustring get_dither() const, gtk_print_settings_get_dither)
  _WRAP_METHOD(void set_dither(const Glib::ustring& dither), gtk_print_settings_set_dither)

  _WRAP_METHOD(Glib::ustring get_finishings() const, gtk_print_settings_get_finishings)
  _WRAP_METHOD(void set_finishings(const Glib::ustring& finishings), gtk_print_settings_set_finishings)

  _WRAP_METHOD(Glib::ustring get_output_bin() const, gtk_print_settings_get_output_bin)
  _WRAP_METHOD(void set_output_bin(const Glib::ustring& output_bin), gtk_print_settings_set_output_bin)
};

} // namespace Gtk
