--- gtk_signals.defs	2009-01-16 14:07:55.000000000 +0100
+++ gtk_signals.defs.new	2009-01-16 13:47:41.000000000 +0100
@@ -5173,21 +5173,21 @@
   (prop-type "GParamBoolean")
   (docs "If the toggle button should be pressed in or not")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property inconsistent
   (of-object "GtkCheckButton")
   (prop-type "GParamBoolean")
-  (docs "If the toggle button is in an "in between" state")
+  (docs "If the toggle button is in an in between state")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property draw-indicator
   (of-object "GtkCheckButton")
   (prop-type "GParamBoolean")
   (docs "If the toggle part of the button is displayed")
   (readable #t)
@@ -5487,21 +5487,21 @@
   (prop-type "GParamBoolean")
   (docs "Whether the menu item is checked")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property inconsistent
   (of-object "GtkCheckMenuItem")
   (prop-type "GParamBoolean")
-  (docs "Whether to display an "inconsistent" state")
+  (docs "Whether to display an inconsistent state")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property draw-as-radio
   (of-object "GtkCheckMenuItem")
   (prop-type "GParamBoolean")
   (docs "Whether the menu item looks like a radio menu item")
   (readable #t)
@@ -6383,21 +6383,21 @@
   (prop-type "GParamBoxed")
   (docs "Foreground color as a GdkColor")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font
   (of-object "GtkCellRendererAccel")
   (prop-type "GParamString")
-  (docs "Font description as a string, e.g. "Sans Italic 12"")
+  (docs "Font description as a string, e.g. Sans Italic 12")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font-desc
   (of-object "GtkCellRendererAccel")
   (prop-type "GParamBoxed")
   (docs "Font description as a PangoFontDescription struct")
   (readable #t)
@@ -6971,21 +6971,21 @@
   (prop-type "GParamBoxed")
   (docs "Foreground color as a GdkColor")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font
   (of-object "GtkCellRendererCombo")
   (prop-type "GParamString")
-  (docs "Font description as a string, e.g. "Sans Italic 12"")
+  (docs "Font description as a string, e.g. Sans Italic 12")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font-desc
   (of-object "GtkCellRendererCombo")
   (prop-type "GParamBoxed")
   (docs "Font description as a PangoFontDescription struct")
   (readable #t)
@@ -7750,21 +7750,21 @@
   (prop-type "GParamBoxed")
   (docs "Foreground color as a GdkColor")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font
   (of-object "GtkCellRendererText")
   (prop-type "GParamString")
-  (docs "Font description as a string, e.g. "Sans Italic 12"")
+  (docs "Font description as a string, e.g. Sans Italic 12")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font-desc
   (of-object "GtkCellRendererText")
   (prop-type "GParamBoxed")
   (docs "Font description as a PangoFontDescription struct")
   (readable #t)
@@ -8919,21 +8919,21 @@
   (prop-type "GParamBoxed")
   (docs "Foreground color as a GdkColor")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font
   (of-object "GtkCellRendererSpin")
   (prop-type "GParamString")
-  (docs "Font description as a string, e.g. "Sans Italic 12"")
+  (docs "Font description as a string, e.g. Sans Italic 12")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font-desc
   (of-object "GtkCellRendererSpin")
   (prop-type "GParamBoxed")
   (docs "Font description as a PangoFontDescription struct")
   (readable #t)
@@ -9247,21 +9247,21 @@
   (construct-only #f)
 )
 
 ;; From GtkClipboard
 
 (define-signal owner-change
   (of-object "GtkClipboard")
   (return-type "void")
   (when "first")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventOwnerChange*" "p0")
   )
 )
 
 ;; From GtkColorButton
 
 (define-signal color-set
   (of-object "GtkColorButton")
   (return-type "void")
   (when "first")
 )
@@ -12843,21 +12843,21 @@
   (prop-type "GParamInt")
   (docs "Maximum number of characters for this entry. Zero if no maximum")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property visibility
   (of-object "GtkEntry")
   (prop-type "GParamBoolean")
-  (docs "FALSE displays the "invisible char" instead of the actual text (password mode)")
+  (docs "FALSE displays the invisible char instead of the actual text (password mode)")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property has-frame
   (of-object "GtkEntry")
   (prop-type "GParamBoolean")
   (docs "FALSE removes outside bevel from entry")
   (readable #t)
@@ -12870,21 +12870,21 @@
   (prop-type "GParamBoxed")
   (docs "Border between text and frame. Overrides the inner-border style property")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property invisible-char
   (of-object "GtkEntry")
   (prop-type "GParamUnichar")
-  (docs "The character to use when masking entry contents (in "password mode")")
+  (docs "The character to use when masking entry contents (in password mode)")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property activates-default
   (of-object "GtkEntry")
   (prop-type "GParamBoolean")
   (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
   (readable #t)
@@ -21696,21 +21696,21 @@
   (of-object "GtkMenuItem")
   (return-type "void")
   (when "first")
 )
 
 (define-signal toggle-size-request
   (of-object "GtkMenuItem")
   (return-type "void")
   (when "first")
   (parameters
-    '("gpointer" "p0")
+    '("int*" "p0")
   )
 )
 
 (define-signal toggle-size-allocate
   (of-object "GtkMenuItem")
   (return-type "void")
   (when "first")
   (parameters
     '("gint" "p0")
   )
@@ -23440,21 +23440,21 @@
   (parameters
     '("GtkDirectionType" "p0")
   )
 )
 
 (define-signal switch-page
   (of-object "GtkNotebook")
   (return-type "void")
   (when "last")
   (parameters
-    '("gpointer" "p0")
+    '("GtkNotebookPage*" "p0")
     '("guint" "p1")
   )
 )
 
 (define-signal focus-tab
   (of-object "GtkNotebook")
   (return-type "gboolean")
   (when "last")
   (parameters
     '("GtkNotebookTab" "p0")
@@ -24525,30 +24525,30 @@
   (prop-type "GParamBoolean")
   (docs "TRUE if the Position property should be used")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property min-position
   (of-object "GtkPaned")
   (prop-type "GParamInt")
-  (docs "Smallest possible value for the "position" property")
+  (docs "Smallest possible value for the position property")
   (readable #t)
   (writable #f)
   (construct-only #f)
 )
 
 (define-property max-position
   (of-object "GtkPaned")
   (prop-type "GParamInt")
-  (docs "Largest possible value for the "position" property")
+  (docs "Largest possible value for the position property")
   (readable #t)
   (writable #f)
   (construct-only #f)
 )
 
 ;; From GtkPixmap
 
 (define-property user-data
   (of-object "GtkPixmap")
   (prop-type "GParamPointer")
@@ -25745,21 +25745,21 @@
 )
 
 (define-signal status-changed
   (of-object "GtkPrintOperation")
   (return-type "void")
   (when "last")
 )
 
 (define-signal create-custom-widget
   (of-object "GtkPrintOperation")
-  (return-type "GObject*")
+  (return-type "GtkWidget*")
   (when "last")
 )
 
 (define-signal custom-widget-apply
   (of-object "GtkPrintOperation")
   (return-type "void")
   (when "last")
   (parameters
     '("GtkWidget*" "p0")
   )
@@ -27861,21 +27861,21 @@
   (prop-type "GParamBoolean")
   (docs "If the toggle button should be pressed in or not")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property inconsistent
   (of-object "GtkRadioButton")
   (prop-type "GParamBoolean")
-  (docs "If the toggle button is in an "in between" state")
+  (docs "If the toggle button is in an in between state")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property draw-indicator
   (of-object "GtkRadioButton")
   (prop-type "GParamBoolean")
   (docs "If the toggle part of the button is displayed")
   (readable #t)
@@ -28710,21 +28710,21 @@
   (prop-type "GParamBoolean")
   (docs "Whether the menu item is checked")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property inconsistent
   (of-object "GtkRadioMenuItem")
   (prop-type "GParamBoolean")
-  (docs "Whether to display an "inconsistent" state")
+  (docs "Whether to display an inconsistent state")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property draw-as-radio
   (of-object "GtkRadioMenuItem")
   (prop-type "GParamBoolean")
   (docs "Whether the menu item looks like a radio menu item")
   (readable #t)
@@ -30471,21 +30471,21 @@
   (docs "The metric used for the ruler")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 ;; From GtkScale
 
 (define-signal format-value
   (of-object "GtkScale")
-  (return-type "const-gchar*")
+  (return-type "gchar*")
   (when "last")
   (parameters
     '("gdouble" "p0")
   )
 )
 
 (define-property orientation
   (of-object "GtkScale")
   (prop-type "GParamEnum")
   (docs "The orientation of the orientable")
@@ -31760,30 +31760,30 @@
   (prop-type "GParamEnum")
   (docs "When the vertical scrollbar is displayed")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property window-placement
   (of-object "GtkScrolledWindow")
   (prop-type "GParamEnum")
-  (docs "Where the contents are located with respect to the scrollbars. This property only takes effect if "window-placement-set" is TRUE.")
+  (docs "Where the contents are located with respect to the scrollbars. This property only takes effect if window-placement-set is TRUE.")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property window-placement-set
   (of-object "GtkScrolledWindow")
   (prop-type "GParamBoolean")
-  (docs "Whether "window-placement" should be used to determine the location of the contents with respect to the scrollbars.")
+  (docs "Whether window-placement should be used to determine the location of the contents with respect to the scrollbars.")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property shadow-type
   (of-object "GtkScrolledWindow")
   (prop-type "GParamEnum")
   (docs "Style of bevel around the contents")
   (readable #t)
@@ -32396,21 +32396,21 @@
   (prop-type "GParamString")
   (docs "Name of default font to use")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property gtk-icon-sizes
   (of-object "GtkSettings")
   (prop-type "GParamString")
-  (docs "List of icon sizes (gtk-menu=16,16:gtk-button=20,20...")
+  (docs "List of icon sizes: gtk-menu=16,16:gtk-button=20,20...")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property gtk-modules
   (of-object "GtkSettings")
   (prop-type "GParamString")
   (docs "List of currently active GTK modules")
   (readable #t)
@@ -33079,21 +33079,21 @@
   (of-object "GtkSpinButton")
   (return-type "void")
   (when "last")
 )
 
 (define-signal input
   (of-object "GtkSpinButton")
   (return-type "gint")
   (when "last")
   (parameters
-    '("gpointer" "p0")
+    '("double*" "p0")
   )
 )
 
 (define-signal output
   (of-object "GtkSpinButton")
   (return-type "gboolean")
   (when "last")
 )
 
 (define-signal wrapped
@@ -33350,21 +33350,21 @@
   (prop-type "GParamInt")
   (docs "Maximum number of characters for this entry. Zero if no maximum")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property visibility
   (of-object "GtkSpinButton")
   (prop-type "GParamBoolean")
-  (docs "FALSE displays the "invisible char" instead of the actual text (password mode)")
+  (docs "FALSE displays the invisible char instead of the actual text (password mode)")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property has-frame
   (of-object "GtkSpinButton")
   (prop-type "GParamBoolean")
   (docs "FALSE removes outside bevel from entry")
   (readable #t)
@@ -33377,21 +33377,21 @@
   (prop-type "GParamBoxed")
   (docs "Border between text and frame. Overrides the inner-border style property")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property invisible-char
   (of-object "GtkSpinButton")
   (prop-type "GParamUnichar")
-  (docs "The character to use when masking entry contents (in "password mode")")
+  (docs "The character to use when masking entry contents (in password mode)")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property activates-default
   (of-object "GtkSpinButton")
   (prop-type "GParamBoolean")
   (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
   (readable #t)
@@ -34055,21 +34055,21 @@
     '("GtkTooltip*" "p3")
   )
 )
 
 (define-signal popup-menu
   (of-object "GtkStatusIcon")
   (return-type "void")
   (when "first")
   (parameters
     '("guint" "p0")
-    '("guint" "p1")
+    '("guint32" "p1")
   )
 )
 
 (define-signal activate
   (of-object "GtkStatusIcon")
   (return-type "void")
   (when "first")
 )
 
 (define-property pixbuf
@@ -35589,21 +35589,21 @@
   (prop-type "GParamBoolean")
   (docs "If the toggle button should be pressed in or not")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property inconsistent
   (of-object "GtkToggleButton")
   (prop-type "GParamBoolean")
-  (docs "If the toggle button is in an "in between" state")
+  (docs "If the toggle button is in an in between state")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property draw-indicator
   (of-object "GtkToggleButton")
   (prop-type "GParamBoolean")
   (docs "If the toggle part of the button is displayed")
   (readable #t)
@@ -36811,21 +36811,21 @@
   (prop-type "GParamObject")
   (docs "Bitmap to use as a mask when drawing the text foreground")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font
   (of-object "GtkTextTag")
   (prop-type "GParamString")
-  (docs "Font description as a string, e.g. "Sans Italic 12"")
+  (docs "Font description as a string, e.g. Sans Italic 12")
   (readable #t)
   (writable #t)
   (construct-only #f)
 )
 
 (define-property font-desc
   (of-object "GtkTextTag")
   (prop-type "GParamBoxed")
   (docs "Font description as a PangoFontDescription struct")
   (readable #t)
@@ -39853,21 +39853,21 @@
   (parameters
     '("GtkRequisition*" "p0")
   )
 )
 
 (define-signal size-allocate
   (of-object "GtkWidget")
   (return-type "void")
   (when "first")
   (parameters
-    '("GdkRectangle*" "p0")
+    '("GtkAllocation*" "p0")
   )
 )
 
 (define-signal state-changed
   (of-object "GtkWidget")
   (return-type "void")
   (when "first")
   (parameters
     '("GtkStateType" "p0")
   )
@@ -39916,21 +39916,21 @@
   (parameters
     '("gboolean" "p0")
   )
 )
 
 (define-signal child-notify
   (of-object "GtkWidget")
   (return-type "void")
   (when "first")
   (parameters
-    '("GParam" "p0")
+    '("GParamSpec*" "p0")
   )
 )
 
 (define-signal mnemonic-activate
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
     '("gboolean" "p0")
   )
@@ -39976,201 +39976,201 @@
   (parameters
     '("GdkEvent*" "p0")
   )
 )
 
 (define-signal button-press-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventButton*" "p0")
   )
 )
 
 (define-signal button-release-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventButton*" "p0")
   )
 )
 
 (define-signal scroll-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventScroll*" "p0")
   )
 )
 
 (define-signal motion-notify-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventMotion*" "p0")
   )
 )
 
 (define-signal keynav-failed
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
     '("GtkDirectionType" "p0")
   )
 )
 
 (define-signal delete-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventAny*" "p0")
   )
 )
 
 (define-signal destroy-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventAny*" "p0")
   )
 )
 
 (define-signal expose-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventExpose*" "p0")
   )
 )
 
 (define-signal key-press-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventKey*" "p0")
   )
 )
 
 (define-signal key-release-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventKey*" "p0")
   )
 )
 
 (define-signal enter-notify-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventCrossing*" "p0")
   )
 )
 
 (define-signal leave-notify-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventCrossing*" "p0")
   )
 )
 
 (define-signal configure-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventConfigure*" "p0")
   )
 )
 
 (define-signal focus-in-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventFocus*" "p0")
   )
 )
 
 (define-signal focus-out-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventFocus*" "p0")
   )
 )
 
 (define-signal map-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventAny*" "p0")
   )
 )
 
 (define-signal unmap-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventAny*" "p0")
   )
 )
 
 (define-signal property-notify-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventProperty*" "p0")
   )
 )
 
 (define-signal selection-clear-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventSelection*" "p0")
   )
 )
 
 (define-signal selection-request-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventSelection*" "p0")
   )
 )
 
 (define-signal selection-notify-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventSelection*" "p0")
   )
 )
 
 (define-signal selection-received
   (of-object "GtkWidget")
   (return-type "void")
   (when "last")
   (parameters
     '("GtkSelectionData*" "p0")
     '("guint" "p1")
@@ -40186,30 +40186,30 @@
     '("guint" "p1")
     '("guint" "p2")
   )
 )
 
 (define-signal proximity-in-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventProximity*" "p0")
   )
 )
 
 (define-signal proximity-out-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventProximity*" "p0")
   )
 )
 
 (define-signal drag-leave
   (of-object "GtkWidget")
   (return-type "void")
   (when "last")
   (parameters
     '("GdkDragContext*" "p0")
     '("guint" "p1")
@@ -40301,66 +40301,75 @@
     '("guint" "p4")
     '("guint" "p5")
   )
 )
 
 (define-signal visibility-notify-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventVisibility*" "p0")
   )
 )
 
 (define-signal client-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventClient*" "p0")
   )
 )
 
 (define-signal no-expose-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventAny*" "p0")
   )
 )
 
 (define-signal window-state-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventWindowState*" "p0")
   )
 )
 
 (define-signal damage-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
     '("GdkEvent*" "p0")
   )
 )
 
+(define-signal damage-event
+  (of-object "GtkWidget")
+  (return-type "gboolean")
+  (when "last")
+  (parameters
+    '("GdkEventExpose*" "p0")
+  )
+)
+
 (define-signal grab-broken-event
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
-    '("GdkEvent*" "p0")
+    '("GdkEventGrabBroken*" "p0")
   )
 )
 
 (define-signal query-tooltip
   (of-object "GtkWidget")
   (return-type "gboolean")
   (when "last")
   (parameters
     '("gint" "p0")
     '("gint" "p1")
@@ -40608,20 +40617,30 @@
 
 (define-property window
   (of-object "GtkWidget")
   (prop-type "GParamObject")
   (docs "The widget's window if it is realized")
   (readable #t)
   (writable #f)
   (construct-only #f)
 )
 
+(define-property window
+  (of-object "GtkWidget")
+  (prop-type "GParamObject")
+  (docs "The widget's window if it is realized")
+  (readable #t)
+  (writable #f)
+  (construct-only #f)
+)
+
+
 ;; From GtkWindow
 
 (define-signal set-focus
   (of-object "GtkWindow")
   (return-type "void")
   (when "last")
   (parameters
     '("GtkWidget*" "p0")
   )
 )
