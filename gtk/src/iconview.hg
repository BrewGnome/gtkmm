/* $Id$ */

/* iconview.h
 * 
 * Copyright (C) 1998-2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <gtkmm/container.h>
#include <gtkmm/treemodel.h>
#include <gtkmm/treepath.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/container_p.h)

namespace Gtk
{

/** TODO
 *
 * @ingroup Widgets
 * @ingroup Containers
 */
class IconView : public Container
{
  _CLASS_GTKOBJECT(IconView, GtkIconView, GTK_ICON_VIEW, Gtk::Container, GtkContainer)
public:

  _CTOR_DEFAULT()
  _WRAP_CTOR(IconView(const Glib::RefPtr<TreeModel>& model), gtk_icon_view_new_with_model)


  _WRAP_METHOD(void set_model(const Glib::RefPtr<TreeModel>& model), gtk_icon_view_set_model)
  _WRAP_METHOD(Glib::RefPtr<TreeModel> get_model(), gtk_icon_view_get_model)
  _WRAP_METHOD(Glib::RefPtr<const TreeModel> get_model() const, gtk_icon_view_get_model)

//TODO: Add overrides with ModelColumn:
  _WRAP_METHOD(void set_text_column(int column), gtk_icon_view_set_text_column)
  _WRAP_METHOD(int get_text_column() const, gtk_icon_view_get_text_column)
  _WRAP_METHOD(void set_markup_column(int column), gtk_icon_view_set_markup_column)
  _WRAP_METHOD(int get_markup_column() const, gtk_icon_view_get_markup_column )
  _WRAP_METHOD(void set_pixbuf_column(int column), gtk_icon_view_set_pixbuf_column)
  _WRAP_METHOD(int get_pixbuf_column() const, gtk_icon_view_get_pixbuf_column)

//TODO: Add default value?:
  _WRAP_METHOD(void set_orientation(Orientation orientation), gtk_icon_view_set_orientation)
  _WRAP_METHOD(Orientation get_orientation() const, gtk_icon_view_get_orientation)


  _WRAP_METHOD(TreeModel::Path get_path_at_pos(int x, int y) const, gtk_icon_view_get_path_at_pos )

/* TODO:
  _WRAP_METHOD(void             gtk_icon_view_selected_foreach   (
						   GtkIconViewForeachFunc  func,
						   gpointer                data);
*/

//Default value?:
  _WRAP_METHOD(void set_selection_mode(SelectionMode mode), gtk_icon_view_set_selection_mode)
  _WRAP_METHOD(SelectionMode get_selection_mode() const, gtk_icon_view_get_selection_mode)
  _WRAP_METHOD(void select_path(const TreeModel::Path& path), gtk_icon_view_select_path)
  _WRAP_METHOD(void unselect_path(const TreeModel::Path& path), gtk_icon_view_unselect_path)
  _WRAP_METHOD(bool path_is_selected(const TreeModel::Path& path) const, gtk_icon_view_path_is_selected)
//TODO:  _WRAP_METHOD(GList           *gtk_icon_view_get_selected_items (GtkIconView            *icon_view);
  _WRAP_METHOD(void select_all(), gtk_icon_view_select_all)
  _WRAP_METHOD(void unselect_all(), gtk_icon_view_unselect_all)
  _WRAP_METHOD(void item_activated(const TreeModel::Path& path),  gtk_icon_view_item_activated)

};

} // namespace Gtk

