/* Copyright (C) 2017 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>
#include <gdkmm/cairoutils.h>

/* Why reinterpret_cast<Snapshot*>(gobject) is needed:
 *
 * A Snapshot instance is in fact always a GtkSnapshot instance.
 * Unfortunately, GtkSnapshot cannot be a member of Snapshot,
 * because it is an opaque struct. Also, the C interface does not provide
 * any hooks to install a destroy notification handler, thus we cannot
 * wrap it dynamically either.
 *
 * The cast works because Snapshot does not have any member data, and
 * it is impossible to derive from it. This is ensured by using final on the
 * class and by using = delete on the default constructor.
 * This trick is used also in classes declared as _CLASS_OPAQUE_REFCOUNTED.
 */

namespace Gtk
{

void Snapshot::push(bool keep_coordinates, const Glib::ustring& name)
{
  if (name.empty())
    gtk_snapshot_push(gobj(), keep_coordinates, nullptr);
  else
    gtk_snapshot_push(gobj(), keep_coordinates, "%s", name.c_str());
}

void Snapshot::push_cross_fade(double progress, const Glib::ustring& name)
{
  if (name.empty())
    gtk_snapshot_push_cross_fade(gobj(), progress, nullptr);
  else
    gtk_snapshot_push_cross_fade(gobj(), progress, "%s", name.c_str());
}

Cairo::RefPtr<Cairo::Context> Snapshot::append_cairo(
  const graphene_rect_t* bounds, const Glib::ustring& name)
{
  cairo_t* cr = nullptr;
  if (name.empty())
    cr = gtk_snapshot_append_cairo(gobj(), bounds, nullptr);
  else
    cr = gtk_snapshot_append_cairo(gobj(), bounds, "%s", name.c_str());

  return Gdk::Cairo::wrap(cr, true /* has_reference */);
}

Cairo::RefPtr<Cairo::Context> Snapshot::append_cairo(
  const Gdk::Rectangle& bounds, const Glib::ustring& name)
{
  graphene_rect_t rect;
  graphene_rect_init(&rect, bounds.get_x(), bounds.get_y(),
    bounds.get_width(), bounds.get_height());

  return append_cairo(&rect, name);
}

GtkSnapshot* Snapshot::gobj()
{
  return reinterpret_cast<GtkSnapshot*>(this);
}

const GtkSnapshot* Snapshot::gobj() const
{
  return reinterpret_cast<const GtkSnapshot*>(this);
}

} //namespace Gtk

namespace Glib
{

Gtk::Snapshot* wrap(GtkSnapshot* gobject)
{
  return reinterpret_cast<Gtk::Snapshot*>(gobject);
}

} //namespace Glib
