// -*- c++ -*-
/* $Id$ */

/* Copyright 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/treeiter.h>
#include <gtkmm/entry.h>
#include <gtk/gtkentrycompletion.h>

namespace //anonymous
{

// This Signal Proxy allows the C++ coder to specify
// a SigC::Slot instead of a static function.
class SignalProxy_Match
{
public:
  typedef Gtk::EntryCompletion::SlotMatch SlotType;

  SignalProxy_Match(const SlotType& slot)
  : slot_(slot) {}
  
  ~SignalProxy_Match();

  static gboolean gtk_callback(GtkEntryCompletion* completion, const gchar* key, GtkTreeIter* iter, gpointer user_data);
  static void gtk_callback_destroy(void* data);                                               

private:
  SlotType slot_;
};

SignalProxy_Match::~SignalProxy_Match()
{}

gboolean SignalProxy_Match::gtk_callback(GtkEntryCompletion* completion, const gchar* key, GtkTreeIter* iter, gpointer user_data)
{
  SignalProxy_Match *const self = static_cast<SignalProxy_Match*>(user_data);

  try
  {
    GtkTreeModel* tree_model = gtk_entry_completion_get_model(completion);
    return (self->slot_)(Glib::convert_const_gchar_ptr_to_ustring(key),
                         Gtk::TreeModel::const_iterator(tree_model, iter)
                         );
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return FALSE; //An arbitary default, just to avoid the compiler warning.
}

void SignalProxy_Match::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_Match*>(data);
}

} // anonymous namespace


namespace Gtk
{

void EntryCompletion::set_match_func(const SlotMatch& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_Match::gtk_callback_destroy() is called.
  SignalProxy_Match *const pSignalProxy = new SignalProxy_Match(slot);

  gtk_entry_completion_set_match_func(gobj(),
      &SignalProxy_Match::gtk_callback, pSignalProxy,
      &SignalProxy_Match::gtk_callback_destroy);
}

} // namespace Gtk

