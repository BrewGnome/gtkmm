/* $Id$ */

/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/widget.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/widget_p.h)


namespace Gtk
{

class Adjustment;

/** @ingroup Widgets
 */
class Range : public Widget
{
  _CLASS_GTKOBJECT(Range,GtkRange,GTK_RANGE,Gtk::Widget,GtkWidget)
protected:
  _CTOR_DEFAULT
public:
  

  _WRAP_METHOD(void set_update_policy(UpdateType policy), gtk_range_set_update_policy)
  _WRAP_METHOD(UpdateType get_update_policy() const, gtk_range_get_update_policy)
  _WRAP_METHOD(void set_adjustment(Gtk::Adjustment& adjustment), gtk_range_set_adjustment)
  void unset_adjustment();

  _WRAP_METHOD(Gtk::Adjustment* get_adjustment(), gtk_range_get_adjustment)
  _WRAP_METHOD(const Gtk::Adjustment* get_adjustment() const, gtk_range_get_adjustment)
  _WRAP_METHOD(void set_inverted(bool setting = true), gtk_range_set_inverted)
  _WRAP_METHOD(bool get_inverted() const, gtk_range_get_inverted)
  _WRAP_METHOD(void set_increments(double step, double  page), gtk_range_set_increments)
  _WRAP_METHOD(void set_range(double min, double max), gtk_range_set_range)
  _WRAP_METHOD(void set_value(double value), gtk_range_set_value)
  _WRAP_METHOD(double get_value() const, gtk_range_get_value)

  _WRAP_SIGNAL(void value_changed(), "value_changed")
  _WRAP_SIGNAL(void adjust_bounds(double new_value), "adjust_bounds")
  _WRAP_SIGNAL(void move_slider(ScrollType scroll), "move_slider")

  _WRAP_PROPERTY("update-policy", UpdateType)
  _WRAP_PROPERTY("adjustment", Adjustment*)
  _WRAP_PROPERTY("inverted", bool)

protected:
  _WRAP_VFUNC(void get_range_border(GtkBorder* border) const, get_range_border)

};

} // namespace Gtk

