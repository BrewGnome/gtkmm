/* $Id$ */

/* Copyright(C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or(at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/treeiter.h>
#include <gtkmm/treemodel.h>
// We couldn't include it in treemodel.h, but doing it here makes it easier for people.
#include <gtkmm/treepath.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{

/** 
 * @ingroup TreeView
 * 
 */
class TreeModelFilter :
  public Glib::Object,
  public TreeModel
{
  _CLASS_GOBJECT(TreeModelFilter, GtkTreeModelFilter, GTK_TREE_MODEL_FILTER, Glib::Object, GObject)
  _IMPLEMENTS_INTERFACE(TreeModel)

protected:
  _WRAP_CTOR(TreeModelFilter(const Glib::RefPtr<TreeModel>& child_model, const TreePath& root), gtk_tree_model_filter_new)

public:
  _WRAP_CREATE(const Glib::RefPtr<TreeModel>& child_model, const TreePath& root)

//TODO:  _WRAP_METHOD(void set_visible_func(GtkTreeModelFilterVisibleFunc func, gpointer data, GtkDestroyNotify destroy), gtk_tree_model_filter_set_visible_func)
//TOOD:  _WRAP_METHOD(void set_modify_func(int n_columns, GType* types, GtkTreeModelFilterModifyFunc  func, gpointer data, GtkDestroyNotify destroy), gtk_tree_model_filter_set_modify_func)
  _WRAP_METHOD(void set_visible_column(int column), gtk_tree_model_filter_set_visible_column)

  _WRAP_METHOD(Glib::RefPtr<TreeModel> get_model(), gtk_tree_model_filter_get_model)
  _WRAP_METHOD(Glib::RefPtr<const TreeModel> get_model() const, gtk_tree_model_filter_get_model)

//TODO:  _WRAP_METHOD(TreeIter convert_child_iter_to_iter(GtkTreeIter* filter_iter, GtkTreeIter* child_iter), gtk_tree_model_filter_convert_child_iter_to_iter)
//TODO:  _WRAP_METHOD(TreeIter convert_iter_to_child_iter(GtkTreeIter* child_iter, GtkTreeIter* filter_iter), gtk_tree_model_filter_convert_iter_to_child_iter)
//TODO:  _WRAP_METHOD(TreePath convert_child_path_to_path(GtkTreePath* child_path), gtk_tree_model_filter_convert_child_path_to_path)
//TODO:  _WRAP_METHOD(TreePath convert_path_to_child_path (GtkTreePath* filter_path), gtk_tree_model_filter_convert_path_to_child_path)

  _WRAP_METHOD(void refilter(), gtk_tree_model_filter_refilter)
  _WRAP_METHOD(void clear_cache(), gtk_tree_model_filter_clear_cache)
};

} // namespace Gtk

