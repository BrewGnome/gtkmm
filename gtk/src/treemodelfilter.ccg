// -*- c++ -*-
/* $Id$ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtktreemodelfilter.h>

namespace //anonymous
{

// This Signal Proxy allows the C++ coder to specify
// a sigc::slot instead of a static function.
class SignalProxy_Visible
{
public:
  typedef Gtk::TreeModelFilter::SlotVisible SlotType;

  SignalProxy_Visible(const SlotType& slot)
  : slot_(slot) {}

  ~SignalProxy_Visible();

  static gboolean gtk_callback(GtkTreeModel* model, GtkTreeIter* iter, gpointer data);
  static void gtk_callback_destroy(void* data);

private:
  SlotType slot_;
};

SignalProxy_Visible::~SignalProxy_Visible()
{}

gboolean SignalProxy_Visible::gtk_callback(GtkTreeModel* model, GtkTreeIter* iter, gpointer data)
{
  SignalProxy_Visible *const self = static_cast<SignalProxy_Visible*>(data);

  try
  {
    return (self->slot_)( Gtk::TreeModel::const_iterator(model, iter) );
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return FALSE; //An arbitary default, just to avoid the compiler warning.
}

void SignalProxy_Visible::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_Visible*>(data);
}


// This Signal Proxy allows the C++ coder to specify
// a sigc::slot instead of a static function.
class SignalProxy_Modify
{
public:
  typedef Gtk::TreeModelFilter::SlotModify SlotType;

  SignalProxy_Modify(const SlotType& slot)
  : slot_(slot) {}

  ~SignalProxy_Modify();

  static void gtk_callback(GtkTreeModel* model, GtkTreeIter* iter, GValue* value, gint column, gpointer data);
  static void gtk_callback_destroy(void* data);

private:
  SlotType slot_;
};

SignalProxy_Modify::~SignalProxy_Modify()
{}

void SignalProxy_Modify::gtk_callback(GtkTreeModel* model, GtkTreeIter* iter, GValue* value, gint column, gpointer data)
{
  SignalProxy_Modify *const self = static_cast<SignalProxy_Modify*>(data);

  try
  {
    //Initialize the input parameter with the appropriate type for this column.
    //Then the C++ handler can just use operator== without calling init on the value output arg:
    Glib::ValueBase cppValue;
    GType column_type = gtk_tree_model_get_column_type(model, column);
    cppValue.init(column_type);
    
    return (self->slot_)( Gtk::TreeModel::const_iterator(model, iter), cppValue, column );

    g_value_init(value, column_type);

    //If the C++ handler has inited value with an inappropriate GType, then this will fail,
    //but they should not do that because it makes no sense.
    g_value_copy(cppValue.gobj(), value);  
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

void SignalProxy_Modify::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_Modify*>(data);
}


} // anonymous namespace


typedef Gtk::TreeModel::Path Path; //So that the generated method implemenations can use this a return type.

namespace Gtk
{

void TreeModelFilter::set_visible_func(const SlotVisible& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_Visible::gtk_callback_destroy() is called.
  SignalProxy_Visible *const pSignalProxy = new SignalProxy_Visible(slot);

  gtk_tree_model_filter_set_visible_func(gobj(),
      &SignalProxy_Visible::gtk_callback, pSignalProxy,
      &SignalProxy_Visible::gtk_callback_destroy);
}


TreeModel::iterator TreeModelFilter::convert_child_iter_to_iter(const iterator& child_iter) const
{
  TreeIter filter_iter (const_cast<TreeModelFilter*>(this));

  gtk_tree_model_filter_convert_child_iter_to_iter(
      const_cast<GtkTreeModelFilter*>(gobj()), filter_iter.gobj(),
      const_cast<GtkTreeIter*>(child_iter.gobj()));

  return filter_iter;
}

TreeModel::iterator TreeModelFilter::convert_iter_to_child_iter(const iterator& filter_iter) const
{
  GtkTreeModel *const child_model = gtk_tree_model_filter_get_model(const_cast<GtkTreeModelFilter*>(gobj()));

  TreeIter child_iter (dynamic_cast<TreeModel*>(Glib::wrap_auto((GObject*) child_model, false)));

  gtk_tree_model_filter_convert_iter_to_child_iter(
      const_cast<GtkTreeModelFilter*>(gobj()), child_iter.gobj(),
      const_cast<GtkTreeIter*>(filter_iter.gobj()));

  return child_iter;
}

void TreeModelFilter::set_modify_func(const TreeModelColumnRecord& columns, const SlotModify& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_Modify::gtk_callback_destroy() is called.
  SignalProxy_Modify *const pSignalProxy = new SignalProxy_Modify(slot);

  gtk_tree_model_filter_set_modify_func(gobj(),
    columns.size(), const_cast<GType*>(columns.types()),
    &SignalProxy_Modify::gtk_callback, pSignalProxy,
    &SignalProxy_Modify::gtk_callback_destroy);
}

} // namespace Gtk

