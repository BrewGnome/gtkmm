/* $Id$ */

/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/widget.h>
#include <gtkmm/filefilter.h>
#include <glibmm/interface.h>


#include <gtk/gtkfilechooser.h> //TODO: Remove C header.
_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/interface_p.h)


namespace Gtk
{

_WRAP_ENUM(FileChooserAction, GtkFileChooserAction)

/**
 *
 */
class FileChooser : public Glib::Interface
{
  _CLASS_INTERFACE(FileChooser, GtkFileChooser, GTK_FILE_CHOOSER, GtkFileChooserClass)
public:

  _WRAP_METHOD(void set_action(FileChooserAction action), gtk_file_chooser_set_action)
  _WRAP_METHOD(FileChooserAction get_action() const, gtk_file_chooser_get_action)
  _WRAP_METHOD(void set_folder_mode(bool folder_mode = true), gtk_file_chooser_set_folder_mode)
  _WRAP_METHOD(bool get_folder_mode() const, gtk_file_chooser_get_folder_mode)
  _WRAP_METHOD(void set_local_only(bool files_only = true), gtk_file_chooser_set_local_only)
  _WRAP_METHOD(bool get_local_only() const, gtk_file_chooser_get_local_only)
  _WRAP_METHOD(void set_select_multiple(bool select_multiple = true), gtk_file_chooser_set_select_multiple)
  _WRAP_METHOD(bool get_select_multiple() const, gtk_file_chooser_get_select_multiple)

  _WRAP_METHOD(void set_current_name(const Glib::ustring& name), gtk_file_chooser_set_current_name)
  _WRAP_METHOD(Glib::ustring get_filename() const, gtk_file_chooser_get_filename)
  _WRAP_METHOD(void set_filename(const Glib::ustring& filename), gtk_file_chooser_set_filename)
  _WRAP_METHOD(void select_filename(const Glib::ustring& filename), gtk_file_chooser_select_filename)
  _WRAP_METHOD(void unselect_filename(const Glib::ustring& filename), gtk_file_chooser_unselect_filename)
  _WRAP_METHOD(void select_all(), gtk_file_chooser_select_all)
  _WRAP_METHOD(void unselect_all(), gtk_file_chooser_unselect_all)
  _WRAP_METHOD(Glib::SListHandle<Glib::ustring> get_filenames () const, gtk_file_chooser_get_filenames)
  _WRAP_METHOD(void set_current_folder(const Glib::ustring& filename), gtk_file_chooser_set_current_folder)
  _WRAP_METHOD(Glib::ustring get_current_folder() const, gtk_file_chooser_get_current_folder)


/* URI manipulation
 */
  _WRAP_METHOD(Glib::ustring get_uri() const, gtk_file_chooser_get_uri)
  _WRAP_METHOD(void set_uri(const Glib::ustring& uri), gtk_file_chooser_set_uri)
  _WRAP_METHOD(void select_uri(const Glib::ustring& uri), gtk_file_chooser_select_uri)
  _WRAP_METHOD(void unselect_uri(const Glib::ustring& uri), gtk_file_chooser_unselect_uri)
  _WRAP_METHOD(GSList* get_uris() const, gtk_file_chooser_get_uris)

  _WRAP_METHOD(void set_current_folder_uri(const Glib::ustring& uri), gtk_file_chooser_set_current_folder_uri)
  _WRAP_METHOD(Glib::ustring get_current_folder_uri() const, gtk_file_chooser_get_current_folder_uri)

/* Preview widget
 */
  _WRAP_METHOD(void set_preview_widget(Gtk::Widget& preview_widget), gtk_file_chooser_set_preview_widget)
  _WRAP_METHOD(const Gtk::Widget* get_preview_widget() const, gtk_file_chooser_get_preview_widget)
  _WRAP_METHOD(Gtk::Widget* get_preview_widget(), gtk_file_chooser_get_preview_widget)
  _WRAP_METHOD(void set_preview_widget_active(bool active = true), gtk_file_chooser_set_preview_widget_active)
  _WRAP_METHOD(bool get_preview_widget_active() const, gtk_file_chooser_get_preview_widget_active)

  _WRAP_METHOD(Glib::ustring get_preview_filename() const, gtk_file_chooser_get_preview_filename)
  _WRAP_METHOD(Glib::ustring get_preview_uri() const, gtk_file_chooser_get_preview_uri)

/* Extra widget
 */
  _WRAP_METHOD(void set_extra_widget(Gtk::Widget& extra_widget), gtk_file_chooser_set_extra_widget)
  _WRAP_METHOD(Gtk::Widget* get_extra_widget(), gtk_file_chooser_get_extra_widget)
  _WRAP_METHOD(const Gtk::Widget* get_extra_widget() const, gtk_file_chooser_get_extra_widget)

/* List of user selectable filters
 */
  _WRAP_METHOD(void add_filter(const Glib::RefPtr<FileFilter>& filter), gtk_file_chooser_add_filter)
  _WRAP_METHOD(void remove_filter (const Glib::RefPtr<FileFilter>& filter), gtk_file_chooser_remove_filter)
//TODO:  _WRAP_METHOD(GSList* list_filters() const, gtk_file_chooser_list_filters)

/* Current filter
 */
  _WRAP_METHOD(void set_filter(const Glib::RefPtr<FileFilter>& filter), gtk_file_chooser_set_filter)
  _WRAP_METHOD(Glib::RefPtr<FileFilter> get_filter(), gtk_file_chooser_get_filter)
  _WRAP_METHOD(Glib::RefPtr<const FileFilter> get_filter() const, gtk_file_chooser_get_filter)
  
/* Per-application shortcut folders */

  _WRAP_METHOD(bool add_shortcut_folder(const Glib::ustring& folder), gtk_file_chooser_add_shortcut_folder, errthrow)
  _WRAP_METHOD(bool remove_shortcut_folder(const Glib::ustring& folder), gtk_file_chooser_remove_shortcut_folder, errthrow)
  _WRAP_METHOD(Glib::SListHandle<Glib::ustring> list_shortcut_folders() const, gtk_file_chooser_list_shortcut_folders)

  _WRAP_METHOD(bool add_shortcut_folder_uri(const Glib::ustring& folder), gtk_file_chooser_add_shortcut_folder_uri, errthrow)
  _WRAP_METHOD(bool remove_shortcut_folder_uri(const Glib::ustring& folder), gtk_file_chooser_remove_shortcut_folder_uri, errthrow)
  _WRAP_METHOD(Glib::SListHandle<Glib::ustring> list_shortcut_folder_uris() const, gtk_file_chooser_list_shortcut_folder_uris)


  //TODO: _WRAP_SIGNAL(void current_folder_changed(), "current_folder_changed")
  //TODO: _WRAP_SIGNAL(void selection_changed(), "selection_changed")
  //TODO: _WRAP_SIGNAL(void update_preview(), "update_preview")
  //TODO: _WRAP_SIGNAL(void file_activated(), "file_activated")

  _WRAP_PROPERTY("action", FileChooserAction)
  //_WRAP_PROPERTY("file-system", FileSystem) //construct-only
  _WRAP_PROPERTY("filter", FileFilter*) //TODO: Use RefPtr?
  _WRAP_PROPERTY("folder-mode", bool)
  _WRAP_PROPERTY("local-only", bool)
  _WRAP_PROPERTY("preview-widget", Widget*) //TODO: Use RefPtr?
  _WRAP_PROPERTY("preview-widget-active", bool)
  _WRAP_PROPERTY("extra-widget", Widget*) //TODO: Use RefPtr?
  _WRAP_PROPERTY("select-multiple", bool)
  _WRAP_PROPERTY("show-hidden", bool)

  //TODO: vfuncs
};

} // namespace Gtk

