// -*- c++ -*-
/* $Id$ */

/* 
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/texttag.h>
#include <gtk/gtktexttag.h>
#include <gtk/gtktexttagtable.h>

namespace Gtk
{

//This Signal Proxy allows the C++ coder to specify a sigc::Slot instead of a static function.
class SignalProxy_ForEach
{
public:
  typedef TextTagTable::SlotForEach SlotType;

  SignalProxy_ForEach(const SlotType& slot);
  ~SignalProxy_ForEach();

  static void gtk_callback(GtkTextTag* texttag, gpointer data);

protected:
  SlotType slot_;
};

SignalProxy_ForEach::SignalProxy_ForEach(const SlotType& slot)
{
  slot_ = slot;
}

SignalProxy_ForEach::~SignalProxy_ForEach()
{
}

void SignalProxy_ForEach::gtk_callback(GtkTextTag* texttag, gpointer data)
{
  SignalProxy_ForEach* pSignalProxy = static_cast<SignalProxy_ForEach*>(data);
  if(pSignalProxy)
  {
    //Use Slot::operator():
    (pSignalProxy->slot_)(Glib::wrap(texttag, true)); //true = take_copy.
  }
}


void TextTagTable::foreach(const SlotForEach& slot)
{
  SignalProxy_ForEach proxy(slot); //It doesn't need to exist for longer than the function call.
  gtk_text_tag_table_foreach(gobj(),  &SignalProxy_ForEach::gtk_callback, (gpointer)&proxy);
}


} /* namespace Gtk */


