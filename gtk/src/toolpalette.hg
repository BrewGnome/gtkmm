/* Copyright (C) 2009 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/container.h>
#include <gtkmm/toolitem.h>
#include <gtkmm/orientable.h>
#include <gtkmm/adjustment.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/container_p.h)

namespace Gtk
{

_WRAP_ENUM(ToolPaletteDragTargets, GtkToolPaletteDragTargets)

/** TODO
 * @ingroup Widgets
 * @ingroup Containers
 */
class ToolPalette
: public Container,
  public Orientable
{
  _CLASS_GTKOBJECT(ToolPalette, GtkToolPalette, GTK_TOOL_PALETTE, Gtk::Container, GtkContainer)
  _IMPLEMENTS_INTERFACE(Orientable)
public:
  _CTOR_DEFAULT()

  _WRAP_METHOD(void set_group_position(Widget& group, int position), gtk_tool_palette_set_group_position)
  _WRAP_METHOD(void set_exclusive(Widget& group, bool exclusive), gtk_tool_palette_set_exclusive)
  _WRAP_METHOD(void set_expand(Widget& group, bool expand = true), gtk_tool_palette_set_expand)

  _WRAP_METHOD(int get_group_position(Widget& group) const, gtk_tool_palette_get_group_position)
  _WRAP_METHOD(bool get_exclusive(Widget& group) const, gtk_tool_palette_get_exclusive)
  _WRAP_METHOD(bool get_expand(Widget& group), gtk_tool_palette_get_expand)

  _WRAP_METHOD(void set_icon_size(IconSize icon_size), gtk_tool_palette_set_icon_size)
  _WRAP_METHOD(void unset_icon_size(), gtk_tool_palette_unset_icon_size)
  _WRAP_METHOD(void set_style(ToolbarStyle style), gtk_tool_palette_set_style)
  _WRAP_METHOD(void unset_style(), gtk_tool_palette_unset_style)

  _WRAP_METHOD(IconSize get_icon_size(), gtk_tool_palette_get_icon_size)
  _WRAP_METHOD(ToolbarStyle get_style() const, gtk_tool_palette_get_style)

  _WRAP_METHOD(ToolItem* get_drop_item(int x, int y), gtk_tool_palette_get_drop_item)
  _WRAP_METHOD(Widget* get_drop_group(int x, int y), gtk_tool_palette_get_drop_group)
  _WRAP_METHOD(Widget* get_drag_item(const SelectionData& selection), gtk_tool_palette_get_drag_item )

  _WRAP_METHOD(void set_drag_source(ToolPaletteDragTargets targets), gtk_tool_palette_set_drag_source)
  _WRAP_METHOD(void add_drag_dest(Gtk::Widget& widget, DestDefaults flags, ToolPaletteDragTargets targets, Gdk::DragAction actions), gtk_tool_palette_add_drag_dest)

  _WRAP_METHOD(Adjustment* get_hadjustment(), gtk_tool_palette_get_hadjustment)
  _WRAP_METHOD(const Adjustment* get_hadjustment() const, gtk_tool_palette_get_hadjustment, constversion)
  _WRAP_METHOD(Adjustment* get_vadjustment (), gtk_tool_palette_get_vadjustment)
  _WRAP_METHOD(const Adjustment* get_vadjustment () const, gtk_tool_palette_get_vadjustment, constversion)


#m4 _CONVERSION(`const GtkTargetEntry*',`TargetEntry',`TargetEntry(*$3)')
  _WRAP_METHOD(static TargetEntry get_drag_target_item(), gtk_tool_palette_get_drag_target_item)
  _WRAP_METHOD(static TargetEntry get_drag_target_group(), gtk_tool_palette_get_drag_target_group)
  
  //TODO: Ignore this? It's in many widgets and seems internals.
  //Ignore action signal: _WRAP_SIGNAL(void set_scroll_adjustments(Adjustment* hadjustment, Adjustment* vadjustment), "set-scroll-adjustments")

  _WRAP_PROPERTY("icon-size", IconSize)
  _WRAP_PROPERTY("icon-size-set", bool)
  _WRAP_PROPERTY("toolbar-style", ToolbarStyle)
  _WRAP_PROPERTY("exclusive", bool)
};

} // namespace Gtk

