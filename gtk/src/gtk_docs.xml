<root>
<function name="gtk_color_selection_set_change_palette_with_screen_hook">
<description>
Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
&quot;gtk-color-palette&quot; so all GtkColorSelection widgets will be modified.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call when the custom palette needs saving.
</parameter_description>
</parameter>
</parameters>
<return> the previous change palette hook (that was replaced).

Since: 2.2
</return>
</function>

<function name="gtk_item_factory_add_foreign">
<description>
Installs an accelerator for @accel_widget in @accel_group, that causes
the ::activate signal to be emitted if the accelerator is activated.

This function can be used to make widgets participate in the accel
saving/restoring functionality provided by gtk_accel_map_save() and
gtk_accel_map_load(), even if they haven&apos;t been created by an item
factory. The recommended API for this purpose are the functions 
gtk_menu_item_set_accel_path() and gtk_widget_set_accel_path(); don&apos;t 
use gtk_item_factory_add_foreign() in new code, since it is likely to
be removed in the future.

</description>
<parameters>
<parameter name="accel_widget">
<parameter_description>     widget to install an accelerator on 
</parameter_description>
</parameter>
<parameter name="full_path">
<parameter_description>	      the full path for the @accel_widget 
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install the accelerator in
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description>           key value of the accelerator
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description>        modifier combination of the accelerator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_enable_search">
<description>
Returns whether or not the tree allows interactive searching.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> whether or not to let the user search interactively
</return>
</function>

<function name="gtk_entry_get_has_frame">
<description>
Gets the value set by gtk_entry_set_has_frame().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> whether the entry has a beveled frame
</return>
</function>

<function name="gtk_color_selection_get_current_color">
<description>
Sets @color to be the current color in the GtkColorSelection widget.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to fill in with the current color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paned_set_position">
<description>
Sets the position of the divider between the two panes.

</description>
<parameters>
<parameter name="paned">
<parameter_description> a #GtkPaned widget
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> pixel position of divider, a negative value means that the position
is unset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_editable_get_editable">
<description>
Retrieves whether @editable is editable. See
gtk_editable_set_editable().


</description>
<parameters>
<parameter name="editable">
<parameter_description> a #GtkEditable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @editable is editable.
</return>
</function>

<function name="gtk_clipboard_set_with_owner">
<description>
Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.

The difference between this function and gtk_clipboard_set_with_data()
is that instead of an generic @user_data pointer, a #GObject is passed
in. 


</description>
<parameters>
<parameter name="clipboard">
<parameter_description>  a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description>    array containing information about the available forms for the
clipboard data
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description>  number of elements in @targets
</parameter_description>
</parameter>
<parameter name="get_func">
<parameter_description>   function to call to get the actual clipboard data
</parameter_description>
</parameter>
<parameter name="clear_func">
<parameter_description> when the clipboard contents are set again, this function will
be called, and @get_func will not be subsequently called.
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description>      an object that &quot;owns&quot; the data. This object will be passed
to the callbacks when called. 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the clipboard data succeeded. If setting
the clipboard data failed the provided callback functions
will be ignored.
</return>
</function>

<function name="gtk_tree_view_column_get_sort_indicator">
<description>
Gets the value set by gtk_tree_view_column_set_sort_indicator().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> whether the sort indicator arrow is displayed
</return>
</function>

<function name="gtk_tree_path_new_first">
<description>
Creates a new #GtkTreePath.  The string representation of this path is &quot;0&quot;


</description>
<parameters>
</parameters>
<return> A new #GtkTreePath.
</return>
</function>

<function name="gtk_tree_sortable_get_sort_column_id">
<description>
Fills in @sort_column_id and @order with the current sort column and the
order, if applicable.  If the sort column is not set, then FALSE is returned,
and the values in @sort_column_id and @order are unchanged.


</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> The sort column id to be filled in
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> The #GtkSortType to be filled in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the sort column has been set
</return>
</function>

<function name="_gtk_button_set_depressed">
<description>
Sets whether the button is currently drawn as down or not. This is 
purely a visual setting, and is meant only for use by derived widgets
such as #GtkToggleButton.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="depressed">
<parameter_description> %TRUE if the button should be drawn with a recessed shadow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_editable_remove_widget">
<description>
Emits the &quot;remove_widget&quot; signal.  This signal is meant to indicate that the
cell is finished editing, and the widget may now be destroyed.

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> A #GtkTreeEditable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_get_insertion_cursor_gc">
<description>
Get a GC suitable for drawing the primary or secondary text
cursor.

Note: the return value is ref&apos;ed because calls to this function
on other widgets could result in this the GC being released
which would be an unexpected side effect. If made public,
this function should possibly be called create_insertion_cursor_gc().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="is_primary">
<parameter_description> if the cursor should be the primary cursor color.
</parameter_description>
</parameter>
</parameters>
<return> an appropriate #GdkGC. Call g_object_unref() on
the gc when you are done with it; this GC may be shared with
other users, so you must not modify the GC except for temporarily
setting the clip before drawing with the GC, and then unsetting the clip
again afterwards.
</return>
</function>

<function name="gtk_drag_dest_get_target_list">
<description>
Returns the list of targets this widget can accept from
drag-and-drop.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GtkTargetList, or %NULL if none
</return>
</function>

<function name="gtk_tree_model_row_inserted">
<description>
Emits the &quot;row_inserted&quot; signal on @tree_model

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the inserted row
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the inserted row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_selected_foreach">
<description>
Calls a function for each selected node. Note that you cannot modify
the tree or selection from within this function. As a result,
gtk_tree_selection_get_selected_rows() might be more useful.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The function to call for each selected node.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_cursor_position">
<description>
Like gtk_text_iter_forward_cursor_position(), but moves backward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved
</return>
</function>

<function name="gtk_item_factory_get_widget_by_action">
<description>
Obtains the widget which was constructed from the #GtkItemFactoryEntry
with the given @action.

If there are multiple items with the same action, the result is 
undefined.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> an action as specified in the @callback_action field
of #GtkItemFactoryEntry
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the widget which corresponds to the given action, or %NULL
if no widget was found
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_default_direction">
<description>
Sets the default reading direction for widgets where the
direction has not been explicitly set by gtk_widget_set_direction().

</description>
<parameters>
<parameter name="dir">
<parameter_description> the new default direction. This cannot be
%GTK_TEXT_DIR_NONE.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_new_with_mnemonic">
<description>
Creates a new #GtkButton containing a label.
If characters in @label are preceded by an underscore, they are underlined.
If you need a literal underscore character in a label, use &apos;__&apos; (two 
underscores). The first underlined character represents a keyboard 
accelerator called a mnemonic.
Pressing Alt and that key activates the button.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkButton
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_text">
<description>
Fetches the text from a label widget, as displayed on the
screen. This does not include any embedded underlines
indicating mnemonics or Pango markup. (See gtk_label_get_label())


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the text in the label widget. This is the internal
string used by the label, and must not be modified.
</return>
</function>

<function name="gtk_tree_view_set_model">
<description>
Sets the model for a #GtkTreeView.  If the @tree_view already has a model
set, it will remove it before setting the new model.  If @model is %NULL, then
it will unset the old model.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeNode.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> The model.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_new">
<description>
Creates a new list store as with @n_columns columns each of the types passed
in.  As an example, &amp;lt;literal&amp;gt;gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);&amp;lt;/literal&amp;gt; will create a new #GtkListStore with three columns, of type
int, string and #GdkPixbuf respectively.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the list store
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> all #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkListStore
</return>
</function>

<function name="gtk_icon_factory_add">
<description>
Adds the given @icon_set to the icon factory, under the name
@stock_id.  @stock_id should be namespaced for your application,
e.g. &quot;myapp-whatever-icon&quot;.  Normally applications create a
#GtkIconFactory, then add it to the list of default factories with
gtk_icon_factory_add_default(). Then they pass the @stock_id to
widgets such as #GtkImage to display the icon. Themes can provide
an icon with the same name (such as &quot;myapp-whatever-icon&quot;) to
override your application&apos;s default icons. If an icon already
existed in @factory for @stock_id, it is unreferenced and replaced
with the new @icon_set.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> icon name
</parameter_description>
</parameter>
<parameter name="icon_set">
<parameter_description> icon set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_next_page">
<description>
Switches to the next page. Nothing happens if the current page is
the last page.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_set_default_response">
<description>
Sets the last widget in the dialog&apos;s action area with the given @response_id
as the default widget for the dialog. Pressing &quot;Enter&quot; normally activates
the default widget.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> a response ID
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_get_spacing">
<description>
Gets the value set by gtk_box_set_spacing().


</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
</parameters>
<return> spacing between children
</return>
</function>

<function name="gtk_tree_drag_source_row_draggable">
<description>
Asks the #GtkTreeDragSource whether a particular row can be used as
the source of a DND operation. If the source doesn&apos;t implement
this interface, the row is assumed draggable.


</description>
<parameters>
<parameter name="drag_source">
<parameter_description> a #GtkTreeDragSource
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row on which user is initiating a drag
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row can be dragged
</return>
</function>

<function name="gtk_stock_lookup">
<description>
Fills @item with the registered values for @stock_id, returning %TRUE
if @stock_id was known.



</description>
<parameters>
<parameter name="stock_id">
<parameter_description> a stock item name
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> stock item to initialize with values
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @item was initialized
</return>
</function>

<function name="gtk_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkMenuItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_get_current_alpha">
<description>
Returns the current alpha value.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> an integer between 0 and 65535.
</return>
</function>

<function name="gtk_notebook_query_tab_label_packing">
<description>
Query the packing attributes for the tab label of the page
containing @child.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> location to store the expand value (or NULL)
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> location to store the fill value (or NULL)
</parameter_description>
</parameter>
<parameter name="pack_type">
<parameter_description> location to store the pack_type (or NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_style_get">
<description>
Gets the values of a multiple style properties of @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of property names and locations to 
return the property values, starting with the location for 
@first_property_name, terminated by %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_search_equal_func">
<description>
Sets the compare function for the interactive search capabilities.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="search_equal_func">
<parameter_description> the compare function to use during the search
</parameter_description>
</parameter>
<parameter name="search_user_data">
<parameter_description> user data to pass to @search_equal_func, or %NULL
</parameter_description>
</parameter>
<parameter name="search_destroy">
<parameter_description> Destroy notifier for @search_user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_icon_list">
<description>
Sets an icon list to be used as fallback for windows that haven&apos;t
had gtk_window_set_icon_list() called on them to set up a
window-specific icon list. This function allows you to set up the
icon for all windows in your app at once.

See gtk_window_set_icon_list() for more details.


</description>
<parameters>
<parameter name="list">
<parameter_description> a list of #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_sortable_set_sort_column_id">
<description>
Sets the current sort column to be @sort_column_id.  The @sortable will
resort itself to reflect this change, after emitting a
GtkTreeSortable::sort_column_changed signal.  If @sort_column_id is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the default sort function
will be used, if it is set.

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> the sort column id to set
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> The sort order of the column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_unmaximize">
<description>
Asks to unmaximize @window. Note that you shouldn&apos;t assume the
window is definitely unmaximized afterward, because other entities
(e.g. the user or &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
manager&amp;lt;/link&amp;gt;) could maximize it again, and not all window
managers honor requests to unmaximize. But normally the window will
end up unmaximized. Just don&apos;t write code that crashes if not.

You can track maximization via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_pixels_above_lines">
<description>
Sets the default number of blank pixels above paragraphs in @text_view.
Tags in the buffer for @text_view may override the defaults.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="pixels_above_lines">
<parameter_description> pixels above paragraphs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accessible_connect_widget_destroyed">
<description>
This function specifies the callback function to be called when the widget
corresponding to a GtkAccessible is destroyed.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> a #GtkAccessible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_geometry_hints">
<description>
This function sets up hints about how a window can be resized by
the user.  You can set a minimum and maximum size; allowed resize
increments (e.g. for xterm, you can only resize by the size of a
character); aspect ratios; and more. See the #GdkGeometry struct.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="geometry_widget">
<parameter_description> widget the geometry hints will be applied to
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> struct containing geometry information
</parameter_description>
</parameter>
<parameter name="geom_mask">
<parameter_description> mask indicating which struct fields should be paid attention to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_show">
<description>
Flags a widget to be displayed. Any widget that isn&apos;t shown will
not appear on the screen. If you want to show all the widgets in a
container, it&apos;s easier to call gtk_widget_show_all() on the
container, instead of individually showing the widgets.

Remember that you have to show the containers containing a widget,
in addition to the widget itself, before it will appear onscreen.

When a toplevel container is shown, it is immediately realized and
mapped; other shown widgets are realized and mapped when their
toplevel container is realized and mapped.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_append">
<description>
Appends a new row to @tree_store.  If @parent is non-%NULL, then it will append the
new row after the last child of @parent, otherwise it will append a row to
the top level.  @iter will be changed to point to this new row.  The row will
be empty after this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the appended row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_window_set_is_active">
<description>
Internal function that sets whether the #GtkWindow is part
of the currently active toplevel window (taking into account inter-process
embedding.)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="is_active">
<parameter_description> %TRUE if the window is in the currently active toplevel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_size">
<description>
Sets the default size of a window. If the window&apos;s &quot;natural&quot; size
(its size request) is larger than the default, the default will be
ignored. More generally, if the default size does not obey the
geometry hints for the window (gtk_window_set_geometry_hints() can
be used to set these explicitly), the default size will be clamped
to the nearest permitted size.

Unlike gtk_widget_set_size_request(), which sets a size request for
a widget and thus would keep users from shrinking the window, this
function only sets the initial size, just as if the user had
resized the window themselves. Users can still shrink the window
again as they normally would. Setting a default size of -1 means to
use the &quot;natural&quot; default size (the size request of the window).

For more control over a window&apos;s initial size and how resizing works,
investigate gtk_window_set_geometry_hints().

For some uses, gtk_window_resize() is a more appropriate function.
gtk_window_resize() changes the current size of the window, rather
than the size to be used on initial display. gtk_window_resize() always
affects the window itself, not the geometry widget.

The default size of a window only affects the first time a window is
shown; if a window is hidden and re-shown, it will remember the size
it had prior to hiding, rather than using the default size.

Windows can&apos;t actually be 0x0 in size, they must be at least 1x1, but
passing 0 for @width and @height is OK, resulting in a 1x1 default size.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width in pixels, or -1 to unset the default width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height in pixels, or -1 to unset the default height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_set_mark">
<description>
Move the mark to the given position, if not @should_exist, create the mark.


</description>
<parameters>
<parameter name="buffer">
<parameter_description>       a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark_name">
<parameter_description>    name of the mark
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>         location for the mark.
</parameter_description>
</parameter>
<parameter name="left_gravity">
<parameter_description> if the mark is created by this function, gravity for the new
mark.
</parameter_description>
</parameter>
<parameter name="should_exist">
<parameter_description> if %TRUE, warn if the mark does not exist, and return
immediately.
</parameter_description>
</parameter>
</parameters>
<return> mark
</return>
</function>

<function name="gtk_dialog_run">
<description>
Blocks in a recursive main loop until the @dialog either emits the
response signal, or is destroyed. If the dialog is destroyed during the call
to gtk_dialog_run(), gtk_dialog_returns #GTK_RESPONSE_NONE.
Otherwise, it returns the response ID from the &quot;response&quot; signal emission.
Before entering the recursive main loop, gtk_dialog_run() calls
gtk_widget_show() on the dialog for you. Note that you still
need to show any children of the dialog yourself.

During gtk_dialog_run(), the default behavior of &quot;delete_event&quot; is
disabled; if the dialog receives &quot;delete_event&quot;, it will not be
destroyed as windows usually are, and gtk_dialog_run() will return
#GTK_RESPONSE_DELETE_EVENT. Also, during gtk_dialog_run() the dialog will be
modal. You can force gtk_dialog_run() to return at any time by
calling gtk_dialog_response() to emit the &quot;response&quot;
signal. Destroying the dialog during gtk_dialog_run() is a very bad
idea, because your post-run code won&apos;t know whether the dialog was
destroyed or not.

After gtk_dialog_run() returns, you are responsible for hiding or
destroying the dialog if you wish to do so.

Typical usage of this function might be:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gint result = gtk_dialog_run (GTK_DIALOG (dialog));
switch (result)
{
case GTK_RESPONSE_ACCEPT:
do_application_specific_something (&amp;lt;!-- --&amp;gt;);
break;
default:
do_nothing_since_dialog_was_cancelled (&amp;lt;!-- --&amp;gt;);
break;
}
gtk_widget_destroy (dialog);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
</parameters>
<return> response ID
</return>
</function>

<function name="gtk_text_iter_editable">
<description>
Returns whether the character at @iter is within an editable region
of text.  Non-editable text is &quot;locked&quot; and can&apos;t be changed by the
user via #GtkTextView. This function is simply a convenience
wrapper around gtk_text_iter_get_attributes (). If no tags applied
to this text affect editability, @default_setting will be returned.

You don&apos;t want to use this function to decide whether text can be
inserted at @iter, because for insertion you don&apos;t want to know
whether the char at @iter is inside an editable range, you want to
know whether a new character inserted at @iter would be inside an
editable range. Use gtk_text_iter_can_insert() to handle this
case.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="default_setting">
<parameter_description> %TRUE if text is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is inside an editable range
</return>
</function>

<function name="gtk_accel_group_new">
<description>
Creates a new #GtkAccelGroup. 

</description>
<parameters>
<parameter name="returns">
<parameter_description> a new #GtkAccelGroup object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_insert">
<description>
Creates a new row at @position.  If parent is non-%NULL, then the row will be
made a child of @parent.  Otherwise, the row will be created at the toplevel.
If @position is larger than the number of rows at that level, then the new
row will be inserted to the end of the list.  @iter will be changed to point
to this new row.  The row will be empty after this function is called.  To
fill in values, you need to call gtk_tree_store_set() or
gtk_tree_store_set_value().


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_tab_label_text">
<description>
Retrieves the text of the tab label for the page containing
@child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget contained in a page of @notebook
</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label, or %NULL if the
tab label widget is not a #GtkLabel. The
string is owned by the widget and must not
be freed.
</return>
</function>

<function name="gtk_accel_groups_activate">
<description>
Finds the first accelerator in any #GtkAccelGroup attached
to @object that matches @accel_key and @accel_mods, and
activates that accelerator.
If an accelerator was activated and handled this keypress, %TRUE
is returned.

</description>
<parameters>
<parameter name="object">
<parameter_description>        the #GObject, usually a #GtkWindow, on which
to activate the accelerator.
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>     accelerator keyval from a key event
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>    keyboard state mask from a key event
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>       %TRUE if the accelerator was handled, %FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkCheckMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkCheckMenuItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_offset">
<description>
Returns the character offset of an iterator.
Each character in a #GtkTextBuffer has an offset,
starting with 0 for the first character in the buffer.
Use gtk_text_buffer_get_iter_at_offset () to convert an
offset back into an iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a character offset
</return>
</function>

<function name="gtk_tree_view_column_set_clickable">
<description>
Sets the header to be active if @active is %TRUE.  When the header is active,
then it can take keyboard focus, and can be clicked.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="clickable">
<parameter_description> %TRUE if the header is active.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_get_orientation">
<description>
Retrieves the current progress bar orientation.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> orientation of the progress bar
</return>
</function>

<function name="gtk_tree_view_column_cell_render">
<description>
Renders the cell contained by #tree_column. This is used primarily by the
#GtkTreeView.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkDrawable to draw to
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> entire cell area (including tree expanders and maybe padding on the sides)
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> area normally rendered by a cell renderer
</parameter_description>
</parameter>
<parameter name="expose_area">
<parameter_description> area that actually needs updating
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that affect rendering
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_iter_is_valid">
<description>
WARNING: This function is slow. Only use it for debugging and/or testing
purposes.

Checks if the given iter is a valid iter for this #GtkListStore.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iter is valid, %FALSE if the iter is invalid.

Since: 2.2
</return>
</function>

<function name="gtk_tree_path_to_string">
<description>
Generates a string representation of the path.  This string is a &apos;:&apos;
separated list of numbers.  For example, &quot;4:10:0:3&quot; would be an acceptable return value for this string.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string.  Must be freed with g_free().
</return>
</function>

<function name="gtk_text_iter_compare">
<description>
A qsort()-style function that returns negative if @lhs is less than
@rhs, positive if @lhs is greater than @rhs, and 0 if they&apos;re equal.
Ordering is in character offset order, i.e. the first character in the buffer
is less than the second character in the buffer.


</description>
<parameters>
<parameter name="lhs">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> another #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> -1 if @lhs is less than @rhs, 1 if @lhs is greater, 0 if they are equal
</return>
</function>

<function name="gtk_tree_sortable_set_sort_func">
<description>
Sets the comparison function used when sorting to be @sort_func.  If the
current sort column id of @sortable is the same as @sort_column_id, then the
model will sort using this function.

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> the sort column id to set the function for
</parameter_description>
</parameter>
<parameter name="sort_func">
<parameter_description> The sorting function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to the sort func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier of @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new_from_stock">
<description>
Creates a #GtkImage displaying a stock icon. Sample stock icon
names are #GTK_STOCK_OPEN, #GTK_STOCK_EXIT. Sample stock sizes
are #GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. If the stock
icon name isn&apos;t known, a &quot;broken image&quot; icon will be displayed instead.
You can register your own stock icon names, see
gtk_icon_factory_add_default() and gtk_icon_factory_add().


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> a stock icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage displaying the stock icon
</return>
</function>

<function name="gtk_text_buffer_delete_interactive">
<description>
Deletes all &amp;lt;emphasis&amp;gt;editable&amp;lt;/emphasis&amp;gt; text in the given range.
Calls gtk_text_buffer_delete () for each editable sub-range of
[@start,@end). @start and @end are revalidated to point to
the location of the last deleted range, or left untouched if
no text was deleted.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start_iter">
<parameter_description> start of range to delete
</parameter_description>
</parameter>
<parameter name="end_iter">
<parameter_description> end of range
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether some text was actually deleted
</return>
</function>

<function name="gtk_entry_get_layout">
<description>
Gets the #PangoLayout used to display the entry.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_entry_get_layout_offsets().
The returned layout is owned by the entry so need not be
freed by the caller.

Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this entry
</return>
</function>

<function name="gtk_selection_data_get_text">
<description>
Gets the contents of the selection data as a UTF-8 string.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
</parameters>
<return> if the selection data contained a recognized
text type and it could be converted to UTF-8, a newly allocated
string containing the converted text, otherwise %NULL.
If the result is non-%NULL it must be freed with g_free().
</return>
</function>

<function name="gtk_tree_view_get_selection">
<description>
Gets the #GtkTreeSelection associated with @tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeSelection object.
</return>
</function>

<function name="gtk_drag_set_default_icon">
<description>
Changes the default drag icon. GTK+ retains references for the
arguments, and will release them when they are no longer needed.
This function is obsolete. The default icon should now be changed
via the stock system by changing the stock pixbuf for #GTK_STOCK_DND.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> the colormap of the icon
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the image data for the icon
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the transparency mask for an image.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> The X offset within @widget of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> The Y offset within @widget of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_toggle_get_radio">
<description>
Returns wether we&apos;re rendering radio toggles rather than checkboxes. 


</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we&apos;re rendering radio toggles rather than checkboxes
</return>
</function>

<function name="gtk_container_get_focus_chain">
<description>
Retrieves the focus chain of the container, if one has been
set explicitly. If no focus chain has been explicitly
set, GTK+ computes the focus chain based on the positions
of the children. In that case, GTK+ stores %NULL in
@focusable_widgets and returns %FALSE.


</description>
<parameters>
<parameter name="container">
<parameter_description>         a #GtkContainer
</parameter_description>
</parameter>
<parameter name="focusable_widgets">
<parameter_description> location to store the focus chain of the
container, or %NULL. You should free this list
using g_list_free() when you are done with it, however
no additional reference count is added to the
individual widgets in the focus chain.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the focus chain of the container 
has been set explicitly.
</return>
</function>

<function name="gtk_layout_get_vadjustment">
<description>
This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the vertical scrollbar and @layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return> vertical scroll adjustment
</return>
</function>

<function name="gtk_draw_check">
<description>
Draws a check button indicator in the given rectangle on @window with 
the given parameters.

This function is deprecated, use gtk_paint_check() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the check in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the check in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_add_filter">
<description>
Adds a filter to the global list of accel path filters.

Accel map entries whose accel path matches one of the filters
are skipped by gtk_accel_map_foreach().

This function is intended for GTK+ modules that create their own
menus, but don&apos;t want them to be saved into the applications accelerator
map dump.

</description>
<parameters>
<parameter name="filter_pattern">
<parameter_description> a pattern (see #GPatternSpec)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_menu_label">
<description>
Changes the menu label for the page containing @child. 

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the menu label, or NULL for default
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_path_from_widget">
<description>
If @widget has been created by an item factory, returns the full path
to it. (The full path of a widget is the concatenation of the factory 
path specified in gtk_item_factory_new() with the path specified in the 
#GtkItemFactoryEntry from which the widget was created.)

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the full path to @widget if it has been created by an item
factory, %NULL otherwise. This value is owned by GTK+ and must not be
modified or freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_insert_before">
<description>
Inserts a new row before @sibling.  If @sibling is %NULL, then the row will
be appended to @parent &apos;s children.  If @parent and @sibling are %NULL, then
the row will be appended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
@parent is optional.

@iter will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_move_iter_to_previous_line">
<description>
Move the iterator to the beginning of the previous line. The lines
of a wrapped paragraph are treated as distinct for this operation.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_child_focus">
<description>
This function is used by custom widget implementations; if you&apos;re
writing an app, you&apos;d use gtk_widget_grab_focus() to move the focus
to a particular widget, and gtk_container_set_focus_chain() to
change the focus tab order. So you may want to investigate those
functions instead.

gtk_widget_child_focus() is called by containers as the user moves
around the window using keyboard shortcuts. @direction indicates
what kind of motion is taking place (up, down, left, right, tab
forward, tab backward).  gtk_widget_child_focus() invokes the
&quot;focus&quot; signal on #GtkWidget; widgets override the default handler
for this signal in order to implement appropriate focus behavior.

The &quot;focus&quot; default handler for a widget should return %TRUE if
moving in @direction left the focus on a focusable location inside
that widget, and %FALSE if moving in @direction moved the focus
outside the widget. If returning %TRUE, widgets normally
call gtk_widget_grab_focus() to place the focus accordingly;
if returning %FALSE, they don&apos;t modify the current focus location.

This function replaces gtk_container_focus() from GTK+ 1.2.  It was
necessary to check that the child was visible, sensitive, and
focusable before calling
gtk_container_focus(). gtk_widget_child_focus() returns %FALSE if
the widget is not currently in a focusable state, so there&apos;s no
need for those checks.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> direction of focus movement
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if focus ended up inside @widget
</return>
</function>

<function name="gtk_text_iter_inside_word">
<description>
Determines whether @iter is inside a natural-language word (as
opposed to say inside some whitespace).  Word breaks are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango word break algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is inside a word
</return>
</function>

<function name="_gtk_widget_get_aux_info">
<description>
Get the #GtkWidgetAuxInfo structure for the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="create">
<parameter_description> if %TRUE, create the structure if it doesn&apos;t exist
</parameter_description>
</parameter>
</parameters>
<return> the #GtkAuxInfo structure for the widget, or
%NULL if @create is %FALSE and one doesn&apos;t already exist.
</return>
</function>

<function name="gtk_window_get_size">
<description>
Obtains the current size of @window. If @window is not onscreen,
it returns the size GTK+ will suggest to the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; for the initial window
size (but this is not reliably the same as the size the window
manager will actually select). The size obtained by
gtk_window_get_size() is the last size received in a
#GdkEventConfigure, that is, GTK+ uses its locally-stored size,
rather than querying the X server for the size. As a result, if you
call gtk_window_resize() then immediately call
gtk_window_get_size(), the size won&apos;t have taken effect yet. After
the window manager processes the resize request, GTK+ receives
notification that the size has changed via a configure event, and
the size of the window gets updated.

Note 1: Nearly any use of this function creates a race condition,
because the size of the window may change between the time that you
get the size and the time that you perform some action assuming
that size is the current size. To avoid race conditions, connect to
&quot;configure_event&quot; on the window and adjust your size-dependent
state to match the size delivered in the #GdkEventConfigure.

Note 2: The returned size does &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; include the
size of the window manager decorations (aka the window frame or
border). Those are not drawn by GTK+ and GTK+ has no reliable
method of determining their size.

Note 3: If you are getting a window size in order to position
the window onscreen, there may be a better way. The preferred
way is to simply set the window&apos;s semantic type with
gtk_window_set_type_hint(), which allows the window manager to
e.g. center dialogs. Also, if you set the transient parent of
dialogs with gtk_window_set_transient_for() window managers
will often center the dialog over its parent window. It&apos;s
much preferred to let the window manager handle these
things rather than doing it yourself, because all apps will
behave consistently and according to user prefs if the window
manager handles it. Also, the window manager can take the size
of the window decorations/border into account, while your
application cannot.

In any case, if you insist on application-specified window
positioning, there&apos;s &amp;lt;emphasis&amp;gt;still&amp;lt;/emphasis&amp;gt; a better way than
doing it yourself - gtk_window_set_position() will frequently
handle the details for you.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_left_margin">
<description>
Sets the default left margin for text in @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="left_margin">
<parameter_description> left margin in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_iter_first">
<description>
Initializes @iter with the first iterator in the tree (the one at the path
&quot;0&quot;) and returns %TRUE.  Returns %FALSE if the tree is empty.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set.
</return>
</function>

<function name="gtk_container_child_get_property">
<description>
Gets the value of a child property for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a location to return the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_get_path">
<description>
Returns a path that the row reference currently points to, or %NULL if the
path pointed to is no longer valid.


</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference
</parameter_description>
</parameter>
</parameters>
<return> A current path, or %NULL.
</return>
</function>

<function name="gtk_notebook_remove_page">
<description>
Removes a page from the notebook given its index
in the notebook.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook.
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> the index of a notebook page, starting
from 0. If -1, the last page will
be removed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_reset">
<description>
Notify the input method that a change such as a change in cursor
position has been made. This will typically cause the input
method to clear the preedit state.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_wrap_mode">
<description>
Gets the line wrapping for the view.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> the line wrap setting
</return>
</function>

<function name="gtk_window_set_icon">
<description>
Sets up the icon representing a #GtkWindow. This icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.

The icon should be provided in whatever size it was naturally
drawn; that is, don&apos;t scale the image before passing it to
GTK+. Scaling is postponed until the last minute, when the desired
final size is known, to allow best quality.

If you have your icon hand-drawn in multiple sizes, use
gtk_window_set_icon_list(). Then the best size will be used.

This function is equivalent to calling gtk_window_set_icon_list()
with a 1-element list.

See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> icon image, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_mnemonic_activate">
<description>
Activates the targets associated with the mnemonic.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the mnemonic
</parameter_description>
</parameter>
<parameter name="modifier">
<parameter_description> the modifiers 
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> %TRUE if the activation is done. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_text_chars">
<description>
Moves backward by @count text characters (pixbufs, widgets,
etc. do not count as characters for this). Equivalent to moving
through the results of gtk_text_iter_get_text (), rather than
gtk_text_iter_get_slice ().


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of chars to move
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_text_buffer_remove_selection_clipboard">
<description>
Removes a #GtkClipboard added with gtk_text_buffer_add_selection_clipboard()

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard added to @buffer by gtk_text_buffer_add_selection_clipboard().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_vline">
<description>
Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @window
using the given style and state.

This function is deprecated, use gtk_paint_vline() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> the starting y coordinate
</parameter_description>
</parameter>
<parameter name="y2_">
<parameter_description> the ending y coordinate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_size_group_compute_requisition">
<description>
Compute the requisition of a widget taking into account grouping of
the widget&apos;s requisition with other widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> location to store computed requisition.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_gravity">
<description>
Window gravity defines the meaning of coordinates passed to
gtk_window_move(). See gtk_window_move() and #GdkGravity for
more details.

The default window gravity is #GDK_GRAVITY_NORTH_WEST which will
typically &quot;do what you mean.&quot;


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="gravity">
<parameter_description> window gravity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_value_as_int">
<description>
Get the value @spin_button represented as an integer.


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the value of @spin_button
</return>
</function>

<function name="gtk_draw_shadow">
<description>
Draws a shadow around the given rectangle in @window 
using the given style and state and shadow type.

This function is deprecated, use gtk_paint_shadow() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> width of the rectangle 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_new">
<description>
Creates a new #GtkLayout. Unless you have a specific adjustment
you&apos;d like the layout to use for scrolling, pass %NULL for
@hadjustment and @vadjustment.


</description>
<parameters>
<parameter name="hadjustment">
<parameter_description> horizontal scroll adjustment, or %NULL
</parameter_description>
</parameter>
<parameter name="vadjustment">
<parameter_description> vertical scroll adjustment, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkLayout
</return>
</function>

<function name="gtk_tree_view_column_cell_set_cell_data">
<description>
Sets the cell renderer based on the @tree_model and @iter.  That is, for
every attribute mapping in @tree_column, it will get a value from the set
column on the @iter, and use that value to set the attribute on the cell
renderer.  This is used primarily by the #GtkTreeView.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="tree_model">
<parameter_description> The #GtkTreeModel to to get the cell renderers attributes from.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to to get the cell renderer&apos;s attributes from.
</parameter_description>
</parameter>
<parameter name="is_expander">
<parameter_description> %TRUE, if the row has children
</parameter_description>
</parameter>
<parameter name="is_expanded">
<parameter_description> %TRUE, if the row has visible children
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_column_drag_function">
<description>
Sets a user function for determining where a column may be dropped when
dragged.  This function is called on every column pair in turn at the
beginning of a column drag to determine where a drop can take place.  The
arguments passed to @func are: the @tree_view, the #GtkTreeViewColumn being
dragged, the two #GtkTreeViewColumn s determining the drop spot, and
@user_data.  If either of the #GtkTreeViewColumn arguments for the drop spot
are %NULL, then they indicate an edge.  If @func is set to be %NULL, then
@tree_view reverts to the default behavior of allowing all columns to be
dropped everywhere.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to determine which columns are reorderable, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to be passed to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_page_num">
<description>
Finds the index of the page which contains the given child
widget.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the index of the page containing @child, or
-1 if @child is not in the notebook.
</return>
</function>

<function name="gtk_tree_model_foreach">
<description>
Calls func on each node in model in a depth-first fashion.  If func returns
%TRUE, then the tree ceases to be walked, and gtk_tree_model_foreach() returns.

</description>
<parameters>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to be called on each row
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to passed to func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_up">
<description>
Moves the @path to point to it&apos;s parent node, if it has a parent.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path has a parent, and the move was made.
</return>
</function>

<function name="gtk_size_group_add_widget">
<description>
Adds a widget to a #GtkSizeGroup. In the future, the requisition
of the widget will be determined as the maximum of its requisition
and the requisition of the other widgets in the size group.
Whether this applies horizontally, vertically, or in both directions
depends on the mode of the size group. See gtk_size_group_set_mode().

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the #GtkWidget to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert_before">
<description>
Inserts a new row before @sibling. If @sibling is %NULL, then the row will be
appended to the end of the list. @iter will be changed to point to this new 
row. The row will be empty before this function is called. To fill in values,
you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_value">
<description>
Sets initializes and sets @value to that at @column.  When done with @value,
g_value_unset() needs to be called to free any allocated memory.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The column to lookup the value at.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> An empty #GValue to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_iter_starts_line">
<description>
Tests whether an iterator is at the start of a display line.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to test
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_map">
<description>
This function is only for use in widget implementations. Causes
a widget to be mapped if it isn&apos;t already.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_remove_space">
<description>
Removes a space from the specified position.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index of the space to remove.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_screen">
<description>
Get the #GdkScreen from the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow
at the top.

In general, you should only create screen specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen for the toplevel for this widget.

Since: 2.2
</return>
</function>

<function name="gtk_cell_renderer_text_new">
<description>
Creates a new #GtkCellRendererText. Adjust how text is drawn using
object properties. Object properties can be
set globally (with g_object_set()). Also, with #GtkTreeViewColumn,
you can bind a property to a value in a #GtkTreeModel. For example,
you can bind the &quot;text&quot; property on the cell renderer to a string
value in the model, thus rendering a different string in each row
of the #GtkTreeView


</description>
<parameters>
</parameters>
<return> the new cell renderer
</return>
</function>

<function name="gtk_widget_is_ancestor">
<description>
Determines whether @widget is somewhere inside @ancestor, possibly with
intermediate containers.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> another #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @ancestor contains @widget as a child, grandchild, great grandchild, etc.
</return>
</function>

<function name="gtk_selection_data_set_text">
<description>
Sets the contents of the selection from a UTF-8 encoded string.
The string is converted to the form determined by
@selection_data-&amp;gt;target.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @str, or -1 if @str is nul-terminated.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection was successfully set,
otherwise %FALSE.
</return>
</function>

<function name="gtk_widget_event">
<description>
Rarely-used function. This function is used to emit
the event signals on a widget (those signals should never
be emitted without using this function to do so).
If you want to synthesize an event though, don&apos;t use this function;
instead, use gtk_main_do_event() so the event will behave as if
it were in the event queue. Don&apos;t synthesize expose events; instead,
use gdk_window_invalidate_rect() to invalidate a region of the
window.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> return from the event signal emission (%TRUE if the event was handled)
</return>
</function>

<function name="gtk_accelerator_valid">
<description>
Determines whether a given keyval and modifier mask constitute
a valid keyboard accelerator. For example, the #GDK_a keyval
plus #GDK_CONTROL_MASK is valid - this is a &quot;Ctrl+a&quot; accelerator.
But, you can&apos;t, for instance, use the #GDK_Control_L keyval
as an accelerator.

</description>
<parameters>
<parameter name="keyval">
<parameter_description>    a GDK keyval
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> modifier mask
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>   %TRUE if the accelerator is valid
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_layout">
<description>
Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_label_get_layout_offsets().
The returned layout is owned by the label so need not be
freed by the caller.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this label
</return>
</function>

<function name="gtk_text_iter_ends_line">
<description>
Returns %TRUE if @iter points to the start of the paragraph
delimiter characters for a line (delimiters will be either a
newline, a carriage return, a carriage return followed by a
newline, or a Unicode paragraph separator character). Note that an
iterator pointing to the \n of a \r\n pair will not be counted as
the end of a line, the line ends before the \r. The end iterator is
considered to be at the end of a line, even though there are no
paragraph delimiter chars there.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is at the end of a line
</return>
</function>

<function name="gtk_container_set_reallocate_redraws">
<description>
Sets the @reallocate_redraws flag of the container to the given value.

Containers requesting reallocation redraws get automatically
redrawn if any of their children changed allocation. 

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer.
</parameter_description>
</parameter>
<parameter name="needs_redraws">
<parameter_description> the new value for the container&apos;s @reallocate_redraws flag.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_numeric">
<description>
Sets the flag that determines if non-numeric text can be typed into
the spin button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="numeric">
<parameter_description> flag indicating if only numeric entry is allowed. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_modal">
<description>
Sets a window modal or non-modal. Modal windows prevent interaction
with other windows in the same application. To keep modal dialogs
on top of main application windows, use
gtk_window_set_transient_for() to make the dialog transient for the
parent; most &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window managers&amp;lt;/link&amp;gt;
will then disallow lowering the dialog below the parent.



</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> whether the window is modal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_cursor_visible">
<description>
Toggles whether the insertion point is displayed. A buffer with no editable
text probably shouldn&apos;t have a visible cursor, so you may want to turn
the cursor off.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to show the insertion cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_text_index_to_layout_index">
<description>
Converts from a position in the entry&apos;s #PangoLayout(returned by
gtk_entry_get_layout()) to a position in the entry contents
(returned by gtk_entry_get_text()).


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="text_index">
<parameter_description> byte index into the entry contents
</parameter_description>
</parameter>
</parameters>
<return> byte index into the entry layout text
</return>
</function>

<function name="gtk_widget_set_child_visible">
<description>
Sets whether @widget should be mapped along with its when its parent
is mapped and @widget has been shown with gtk_widget_show(). 

The child visibility can be set for widget before it is added to
a container with gtk_widget_set_parent(), to avoid mapping
children unnecessary before immediately unmapping them. However
it will be reset to its default state of %TRUE when the widget
is removed from a container.

Note that changing the child visibility of a widget does not
queue a resize on the widget. Most of the time, the size of
a widget is computed from all visible children, whether or
not they are mapped. If this is not the case, the container
can queue a resize itself.

This function is only useful for container implementations and
never should be called by an application.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="is_visible">
<parameter_description> if %TRUE, @widget should be mapped along with its parent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_append_column">
<description>
Appends @column to the list of columns.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to add.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after appending.
</return>
</function>

<function name="gtk_image_get_animation">
<description>

Gets the #GdkPixbufAnimation being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ANIMATION (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned animation.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> the displayed animation, or %NULL if the image is empty
</return>
</function>

<function name="gtk_text_view_get_buffer">
<description>
Returns the #GtkTextBuffer being displayed by this text view.
The reference count on the buffer is not incremented; the caller
of this function won&apos;t own a new reference.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> a #GtkTextBuffer
</return>
</function>

<function name="gtk_selection_owner_set">
<description>
Claims ownership of a given selection for a particular widget,
or, if @widget is %NULL, release ownership of the selection.


</description>
<parameters>
<parameter name="widget">
<parameter_description>  a #GtkWidget, or %NULL.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description>  an interned atom representing the selection to claim
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp with which to claim the selection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation succeeded
</return>
</function>

<function name="gtk_tree_model_sort_get_model">
<description>
Returns the model the #GtkTreeModelSort is sorting.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModelSort
</parameter_description>
</parameter>
</parameters>
<return> the &quot;child model&quot; being sorted
</return>
</function>

<function name="gtk_text_iter_get_char">
<description>
Returns the Unicode character at this iterator.  (Equivalent to
operator* on a C++ iterator.)  If the element at this iterator is a
non-character element, such as an image embedded in the buffer, the
Unicode &quot;unknown&quot; character 0xFFFC is returned. If invoked on
the end iterator, zero is returned; zero is not a valid Unicode character.
So you can write a loop which ends when gtk_text_iter_get_char ()
returns 0.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a Unicode character, or 0 if @iter is not dereferenceable
</return>
</function>

<function name="gtk_widget_get_parent">
<description>
Returns the parent container of @widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the parent container of @widget, or %NULL
</return>
</function>

<function name="gtk_text_iter_get_language">
<description>
A convenience wrapper around gtk_text_iter_get_attributes (),
which returns the language in effect at @iter. If no tags affecting
language apply to @iter, the return value is identical to that of
gtk_get_default_language ().


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> language in effect at @iter
</return>
</function>

<function name="gtk_rc_add_default_file">
<description>
Adds a file to the list of files to be parsed at the
end of gtk_init().

</description>
<parameters>
<parameter name="filename">
<parameter_description> the pathname to the file. If @filename is not absolute, it
is searched in the current directory.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_util_append_special_char_menuitems">
<description>
Add menuitems for various bidi control characters  to a menu;
the menuitems, when selected, will call the given function
with the chosen character.

This function is private/internal in GTK 2.0, the functionality may
become public sometime, but it probably needs more thought first.
e.g. maybe there should be a way to just get the list of items,
instead of requiring the menu items to be created.

</description>
<parameters>
<parameter name="menushell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  call this when an item is chosen
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_ancestor">
<description>
Gets the first ancestor of @widget with type @widget_type. For example,
&amp;lt;literal&amp;gt;gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)&amp;lt;/literal&amp;gt; gets the 
first #GtkBox that&apos;s
an ancestor of @widget. No reference will be added to the returned widget;
it should not be unreferenced. See note about checking for a toplevel
#GtkWindow in the docs for gtk_widget_get_toplevel().

Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor() 
considers @widget to be an ancestor of itself.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="widget_type">
<parameter_description> ancestor type
</parameter_description>
</parameter>
</parameters>
<return> the ancestor widget, or %NULL if not found
</return>
</function>

<function name="gtk_draw_box">
<description>
Draws a box on @window with the given parameters.

This function is deprecated, use gtk_paint_box() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_show_now">
<description>
Shows a widget. If the widget is an unmapped toplevel widget
(i.e. a #GtkWindow that has not yet been shown), enter the main
loop and wait for the window to actually be mapped. Be careful;
because the main loop is running, anything can happen during
this function.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_window_type">
<description>
Usually used to find out which window an event corresponds to.
If you connect to an event signal on @text_view, this function
should be called on &amp;lt;literal&amp;gt;event-&amp;gt;window&amp;lt;/literal&amp;gt; to
see which window it was.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a window type
</parameter_description>
</parameter>
</parameters>
<return> the window type.
</return>
</function>

<function name="gtk_tree_view_column_set_fixed_width">
<description>
Sets the size of the column in pixels.  This is meaningful only if the sizing
type is #GTK_TREE_VIEW_COLUMN_FIXED.  The size of the column is clamped to
the min/max width for the column.  Please note that the min/max width of the
column doesn&apos;t actually affect the &quot;fixed_width&quot; property of the widget, just
the actual size when displayed.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="fixed_width">
<parameter_description> The size to set @tree_column to. Must be greater than 0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_load_fd">
<description>
Filedescriptor variant of gtk_accel_map_load().

Note that the file descriptor will not be closed by this function.

</description>
<parameters>
<parameter name="fd">
<parameter_description> a valid readable file descriptor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_start_editing">
<description>
Passes an activate event to the cell renderer for possible processing.


</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> widget that received the event
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> background area as passed to @gtk_cell_renderer_render
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> cell area as passed to @gtk_cell_renderer_render
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> render flags
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkCellEditable, or %NULL
</return>
</function>

<function name="gtk_window_set_destroy_with_parent">
<description>
If @setting is %TRUE, then destroying the transient parent of @window
will also destroy @window itself. This is useful for dialogs that
shouldn&apos;t persist beyond the lifetime of the main window they&apos;re
associated with, for example.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to destroy @window with its transient parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_requisition_free">
<description>
Frees a #GtkRequisition.

</description>
<parameters>
<parameter name="requisition">
<parameter_description> a #GtkRequisition.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_char">
<description>
Moves backward by one character offset. Returns %TRUE if movement
was possible; if @iter was the first in the buffer (character
offset 0), gtk_text_iter_backward_char () returns %FALSE for convenience when
writing loops.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether movement was possible
</return>
</function>

<function name="gtk_widget_realize">
<description>
Creates the GDK (windowing system) resources associated with a
widget.  For example, @widget-&amp;gt;window will be created when a widget
is realized.  Normally realization happens implicitly; if you show
a widget and all its parent containers, then the widget will be
realized and mapped automatically.

Realizing a widget requires all
the widget&apos;s parent widgets to be realized; calling
gtk_widget_realize() realizes the widget&apos;s parents in addition to
@widget itself. If a widget is not yet inside a toplevel window
when you realize it, bad things will happen.

This function is primarily used in widget implementations, and
isn&apos;t very useful otherwise. Many times when you think you might
need it, a better approach is to connect to a signal that will be
called after the widget is realized automatically, such as
&quot;expose_event&quot;. Or simply g_signal_connect_after() to the
&quot;realize&quot; signal.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_resizable">
<description>
Returns #TRUE if the @tree_column can be resized by the end user.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> #TRUE, if the @tree_column can be resized.
</return>
</function>

<function name="gtk_tree_model_iter_children">
<description>
Sets @iter to point to the first child of @parent.  If @parent has no children,
%FALSE is returned and @iter is set to be invalid.  @parent will remain a valid
node after this function has been called.

If @parent is %NULL returns the first node, equivalent to
&amp;lt;literal&amp;gt;gtk_tree_model_get_iter_first (tree_model, iter);&amp;lt;/literal&amp;gt;


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The new #GtkTreeIter to be set to the child.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> The #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @child has been set to the first child.
</return>
</function>

<function name="gtk_widget_get_default_style">
<description>
Returns the default style used by all widgets initially.


</description>
<parameters>
</parameters>
<return> the default style. This #GtkStyle object is owned by GTK+ and
should not be modified or freed.
</return>
</function>

<function name="gtk_list_store_insert">
<description>
Creates a new row at @position.  @iter will be changed to point to this new
row.  If @position is larger than the number of rows on the list, then the
new row will be appended to the list.  The row will be empty before this
function is called.  To fill in values, you need to call gtk_list_store_set()
or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to insert the new row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_iter">
<description>
Sets @iter to a valid iterator pointing to @path.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set.
</return>
</function>

<function name="gtk_widget_thaw_child_notify">
<description>
Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
This causes all queued &quot;child-notify&quot; signals on @widget to be emitted.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_has_opacity_control">
<description>
Sets the @colorsel to use or not use opacity.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="has_opacity">
<parameter_description> %TRUE if @colorsel can set the opacity, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_btree_is_valid">
<description>
Check to see if the entire #GtkTextBTree is valid or not for
the given view.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextBTree
</parameter_description>
</parameter>
<parameter name="view_id">
<parameter_description> ID for the view
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the entire #GtkTextBTree is valid
</return>
</function>

<function name="gtk_dialog_add_action_widget">
<description>
Adds an activatable widget to the action area of a #GtkDialog,
connecting a signal handler that will emit the &quot;response&quot; signal on
the dialog when the widget is activated.  The widget is appended to
the end of the dialog&apos;s action area.  If you want to add a
non-activatable widget, simply pack it into the
&amp;lt;literal&amp;gt;action_area&amp;lt;/literal&amp;gt; field of the #GtkDialog struct.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> an activatable widget
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> response ID for @child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_add_entry">
<description>
Registers a new accelerator with the global accelerator map.
This function should only be called once per @accel_path
with the canonical @accel_key and @accel_mods for this path.
To change the accelerator during runtime programatically, use
gtk_accel_map_change_entry().
The accelerator path must consist of &quot;&amp;lt;WINDOWTYPE&amp;gt;/Category1/Category2/.../Action&quot;,
where &amp;lt;WINDOWTYPE&amp;gt; should be a unique application-specific identifier, that
corresponds to the kind of window the accelerator is being used in, e.g. &quot;Gimp-Image&quot;,
&quot;Abiword-Document&quot; or &quot;Gnumeric-Settings&quot;.
The Category1/.../Action portion is most appropriately chosen by the action the
accelerator triggers, i.e. for accelerators on menu items, choose the item&apos;s menu path,
e.g. &quot;File/Save As&quot;, &quot;Image/View/Zoom&quot; or &quot;Edit/Select All&quot;.
So a full valid accelerator path may look like:
&quot;&amp;lt;Gimp-Toolbox&amp;gt;/File/Dialogs/Tool Options...&quot;.

</description>
<parameters>
<parameter name="accel_path">
<parameter_description> valid accelerator path
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>  the accelerator key
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description> the accelerator modifiers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_get_inconsistent">
<description>
Gets the value set by gtk_toggle_button_set_inconsistent().


</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the button is displayed as inconsistent, %FALSE otherwise
</return>
</function>

<function name="gtk_tree_selection_select_path">
<description>
Select the row at @path.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be selected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_bin_window">
<description>
Returns the window that @tree_view renders to.  This is used primarily to
compare to &amp;lt;literal&amp;gt;event-&amp;gt;window&amp;lt;/literal&amp;gt; to confirm that the event on
@tree_view is on the right window.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GdkWindow, or %NULL when @tree_view hasn&apos;t been realized yet
</return>
</function>

<function name="gtk_text_iter_is_end">
<description>
Returns %TRUE if @iter is the end iterator, i.e. one past the last
dereferenceable iterator in the buffer. gtk_text_iter_is_end () is
the most efficient way to check whether an iterator is the end
iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the end iterator
</return>
</function>

<function name="gtk_tree_row_reference_deleted">
<description>
Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the &quot;row_deleted&quot; signal.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GObject
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path position that was deleted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_get_cursor_locations">
<description>
Given an iterator within a text laout, determine the positions that of the
strong and weak cursors if the insertion point is at that
iterator. The position of each cursor is stored as a zero-width
rectangle. The strong cursor location is the location where
characters of the directionality equal to the base direction of the
paragraph are inserted.  The weak cursor location is the location
where characters of the directionality opposite to the base
direction of the paragraph are inserted.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="strong_pos">
<parameter_description> location to store the strong cursor position (may be %NULL)
</parameter_description>
</parameter>
<parameter name="weak_pos">
<parameter_description> location to store the weak cursor position (may be %NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_newv">
<description>
Non-vararg creation function.  Used primarily by language bindings.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the list store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkListStore
</return>
</function>

<function name="gtk_container_class_install_child_property">
<description>
Installs a child property on a container class. 

</description>
<parameters>
<parameter name="cclass">
<parameter_description> a #GtkContainerClass
</parameter_description>
</parameter>
<parameter name="property_id">
<parameter_description> the id for the property
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec for the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_reparse_all_for_settings">
<description>
If the modification time on any previously read file
for the given #GtkSettings has changed, discard all style information
and then reread all previously read RC files.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
<parameter name="force_load">
<parameter_description> load whether or not anything changed
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the files were reread.
</return>
</function>

<function name="gtk_list_store_reorder">
<description>
Reorders @store to follow the order indicated by @new_order. Note that
this function only works with unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> An integer array indicating the new order for the list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_style_init_for_settings">
<description>
Initializes the font description in @style accoridng to the default
font name of @settings. This is called for gtk_style_new() with
the settings for the default screen (if any); if we are creating
a style for a particular screen, we then call it again in a
location where we know the correct settings.
The reason for this is that gtk_rc_style_create_style() doesn&apos;t
take the screen for an argument.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_set_property">
<description>
Sets a child property for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to set the property to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_line">
<description>
Initializes @iter to the start of the given line.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number counting from 0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_menu_label">
<description>
Retrieves the menu label widget of the page containing @child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget contained in a page of @notebook
</parameter_description>
</parameter>
</parameters>
<return> the menu label, or %NULL if the
notebook page does not have a menu label other
than the default (the tab label).
</return>
</function>

<function name="gtk_widget_get_colormap">
<description>
Gets the colormap that will be used to render @widget. No reference will
be added to the returned colormap; it should not be unreferenced.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the colormap used by @widget
</return>
</function>

<function name="gtk_tree_view_column_get_visible">
<description>
Returns %TRUE if @tree_column is visible.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> whether the column is visible or not.  If it is visible, then
the tree will show the column.
</return>
</function>

<function name="gtk_color_selection_palette_to_string">
<description>
Encodes a palette as a string, useful for persistent storage.


</description>
<parameters>
<parameter name="colors">
<parameter_description> an array of colors.
</parameter_description>
</parameter>
<parameter name="n_colors">
<parameter_description> length of the array.
</parameter_description>
</parameter>
</parameters>
<return> allocated string encoding the palette.
</return>
</function>

<function name="gtk_text_iter_set_visible_line_offset">
<description>
Like gtk_text_iter_set_line_offset(), but the offset is in visible
characters, i.e. text with a tag making it invisible is not
counted in the offset.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="char_on_line">
<parameter_description> a character offset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_selection_clear_targets">
<description>
Remove all targets registered for the given selection for the
widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description>    a #GtkWidget
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom representing a selection
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkImageMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the menu item, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkImageMenuItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_select_iter">
<description>
Selects the specified iterator.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to be selected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_attributes">
<description>
Gets the attribute list that was set on the label using
gtk_label_set_attributes(), if any. This function does
not reflect attributes that come from the labels markup
(see gtk_label_set_markup()). If you want to get the
effective attributes for the label, use
pango_layout_get_attribute (gtk_label_get_layout (label)).


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the attribute list, or %NULL if none was set.
</return>
</function>

<function name="gtk_widget_translate_coordinates">
<description>
Translate coordinates relative to @src_widget&apos;s allocation to coordinates
relative to @dest_widget&apos;s allocations. In order to perform this
operation, both widgets must be realized, and must share a common
toplevel.


</description>
<parameters>
<parameter name="src_widget">
<parameter_description>  a #GtkWidget
</parameter_description>
</parameter>
<parameter name="dest_widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> X position relative to @src_widget
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Y position relative to @src_widget
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> location to store X position relative to @dest_widget
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> location to store Y position relative to @dest_widget
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if either widget was not realized, or there
was no common ancestor. In this case, nothing is stored in
*@dest_x and *@dest_y. Otherwise %TRUE.
</return>
</function>

<function name="gtk_item_factory_create_item">
<description>
Creates an item for @entry.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="entry">
<parameter_description> the #GtkItemFactoryEntry to create an item for
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> data passed to the callback function of @entry
</parameter_description>
</parameter>
<parameter name="callback_type">
<parameter_description> 1 if the callback function of @entry is of type
#GtkItemFactoryCallback1, 2 if it is of type #GtkItemFactoryCallback2 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_old_editable_claim_selection">
<description>
Claims or gives up ownership of the selection.

</description>
<parameters>
<parameter name="old_editable">
<parameter_description> a #GtkOldEditable
</parameter_description>
</parameter>
<parameter name="claim">
<parameter_description> if %TRUE, claim ownership of the selection, if %FALSE, give
up ownership
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_background_area">
<description>
Fills the bounding rectangle in tree window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a node not found in the tree, the @y and @height fields of
the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The returned rectangle is equivalent to the
@background_area passed to gtk_cell_renderer_render().  These background
areas tile to cover the entire tree window (except for the area used for
header buttons). Contrast with the @cell_area, returned by
gtk_tree_view_get_cell_area(), which returns only the cell itself, excluding
surrounding borders and the tree expander area.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordiantes
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with cell background rect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_connect">
<description>
Installs an accelerator in this group. When @accel_group is being activated
in response to a call to gtk_accel_groups_activate(), @closure will be
invoked if the @accel_key and @accel_mods from gtk_accel_groups_activate()
match those of this connection.

The signature used for the @closure is that of #GtkAccelGroupActivate.

Note that, due to implementation details, a single closure can only be
connected to one accelerator group.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install an accelerator in
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>        key value of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>       modifier combination of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_flags">
<parameter_description>      a flag mask to configure this accelerator
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description>          closure to be executed upon accelerator activation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_swap">
<description>
Swaps @a and @b in @store. Note that this function only works with
unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Another #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_rows_reordered">
<description>
Emits the &quot;rows_reordered&quot; signal on @tree_model.  This should be called by
models when their rows have been reordered.  

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the tree node whose children have been reordered
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the node whose children have been reordered
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> an array of integers containing the new indices of the children,
i.e. the former child &amp;lt;literal&amp;gt;n&amp;lt;/literal&amp;gt; is now at position
@new_order&amp;lt;literal&amp;gt;[n]&amp;lt;/literal&amp;gt;. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_get_border_width">
<description>
Retrieves the border width of the container. See
gtk_container_set_border_width().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the current border width
</return>
</function>

<function name="gtk_tree_view_column_get_title">
<description>
Returns the title of the widget.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> the title of the column. This string should not be
modified or freed.
</return>
</function>

<function name="gtk_icon_size_get_name">
<description>
Gets the canonical name of the given icon size. The returned string 
is statically allocated and should not be freed.

</description>
<parameters>
<parameter name="size">
<parameter_description> a #GtkIconSize.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the name of the given icon size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_expand_all">
<description>
Recursively expands all nodes in the @tree_view.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_get_shadow_type">
<description>
Gets the shadow type of the scrolled window. See 
gtk_scrolled_window_set_shadow_type().


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return> the current shadow type
</return>
</function>

<function name="gtk_window_group_new">
<description>
Creates a new #GtkWindowGroup object. Grabs added with
gtk_grab_add() only affect windows within the same #GtkWindowGroup.


</description>
<parameters>
</parameters>
<return> a new #GtkWindowGroup. 
</return>
</function>

<function name="gtk_tree_selection_unselect_all">
<description>
Unselects all the nodes.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_get_selected">
<description>
Sets @iter to the currently selected node if @selection is set to
#GTK_SELECTION_SINGLE or #GTK_SELECTION_BROWSE.  @iter may be NULL if you
just want to test if @selection has any selected nodes.  @model is filled
with the current model as a convenience.  This function will not work if you
use @selection is #GTK_SELECTION_MULTIPLE.


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A pointer to set to the #GtkTreeModel, or NULL.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if there is a selected node.
</return>
</function>

<function name="gtk_window_get_default_icon_list">
<description>
Gets the value set by gtk_window_set_default_icon_list().
The list is a copy and should be freed with g_list_free(),
but the pixbufs in the list have not had their reference count
incremented.


</description>
<parameters>
</parameters>
<return> copy of default icon list 
</return>
</function>

<function name="gtk_label_set_use_markup">
<description>
Sets whether the text of the label contains markup in &amp;lt;link
linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango&apos;s text markup
language&amp;lt;/link&amp;gt;. See gtk_label_set_markup().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the label&apos;s text should be parsed for markup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_message_dialog_new">
<description>
Creates a new message dialog, which is a simple dialog with an icon
indicating the dialog type (error, warning, etc.) and some text the
user may want to see. When the user clicks a button a &quot;response&quot;
signal is emitted with response IDs from #GtkResponseType. See
#GtkDialog for more details.


</description>
<parameters>
<parameter name="parent">
<parameter_description> transient parent, or NULL for none 
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of message
</parameter_description>
</parameter>
<parameter name="buttons">
<parameter_description> set of buttons to use
</parameter_description>
</parameter>
<parameter name="message_format">
<parameter_description> printf()-style format string, or NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> arguments for @message_format
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkMessageDialog
</return>
</function>

<function name="gtk_widget_set_events">
<description>
Sets the event mask (see #GdkEventMask) for a widget. The event
mask determines which events a widget will receive. Keep in mind
that different widgets have different default event masks, and by
changing the event mask you may disrupt a widget&apos;s functionality,
so be careful. This function must be called while a widget is
unrealized. Consider gtk_widget_add_events() for widgets that are
already realized, or if you want to preserve the existing event
mask. This function can&apos;t be used with #GTK_NO_WINDOW widgets;
to get events on those widgets, place them inside a #GtkEventBox
and receive events on the event box.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> event mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete_selection">
<description>
Deletes the range between the &quot;insert&quot; and &quot;selection_bound&quot; marks,
that is, the currently-selected text. If @interactive is %TRUE,
the editability of the selection will be considered (users can&apos;t delete
uneditable text).


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="interactive">
<parameter_description> whether the deletion is caused by user interaction
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether there was a non-empty selection to delete
</return>
</function>

<function name="gtk_tree_view_column_clear_attributes">
<description>
Clears all existing attributes previously set with
gtk_tree_view_column_set_attributes().

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> a #GtkCellRenderer to clear the attribute mapping on.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_set_orientation">
<description>
Causes the progress bar to switch to a different orientation
(left-to-right, right-to-left, top-to-bottom, or bottom-to-top). 

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="orientation">
<parameter_description> orientation of the progress bar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_direction">
<description>
Sets the reading direction on a particular widget. This direction
controls the primary direction for widgets containing text,
and also the direction in which the children of a container are
packed. The ability to set the direction is present in order
so that correct localization into languages with right-to-left
reading directions can be done. Generally, applications will
let the default reading direction present, except for containers
where the containers are arranged in an order that is explicitely
visual rather than logical (such as buttons for text justification).

If the direction is set to %GTK_TEXT_DIR_NONE, then the value
set by gtk_widget_set_default_direction() will be used.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="dir">
<parameter_description>    the new direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_to_line_end">
<description>
Moves the iterator to point to the paragraph delimiter characters,
which will be either a newline, a carriage return, a carriage
return/newline in sequence, or the Unicode paragraph separator
character. If the iterator is already at the paragraph delimiter
characters, moves to the paragraph delimiter characters for the
next line. If @iter is on the last line in the buffer, which does
not end in paragraph delimiters, moves to the end iterator (end of
the last line), and returns %FALSE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new location is not the end iterator
</return>
</function>

<function name="gtk_image_menu_item_new_with_label">
<description>
Creates a new #GtkImageMenuItem containing a label. 

</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the menu item.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkImageMenuItem.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_widget">
<description>
Changes the icon for a widget to a given widget. GTK+
will not destroy the icon, so if you don&apos;t want
it to persist, you should connect to the &quot;drag_end&quot; 
signal and destroy it yourself.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
          with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a toplevel window to use as an icon.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within @widget of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within @widget of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_activates_default">
<description>
If @setting is %TRUE, pressing Enter in the @entry will activate the default
widget for the window containing the entry. This usually means that
the dialog box containing the entry will be closed, since the default
widget is usually one of the dialog buttons.

(For experts: if @setting is %TRUE, the entry calls
gtk_window_activate_default() on the window containing the entry, in
the default handler for the &quot;activate&quot; signal.)


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to activate window&apos;s default widget on Enter keypress
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_get_stock">
<description>
Gets the stock icon name and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_STOCK (see gtk_image_get_storage_type()).
The returned string is owned by the #GtkImage and should not
be freed.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> place to store a stock icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> place to store a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_hadjustment">
<description>
Sets the #GtkAdjustment for the current horizontal aspect.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> The #GtkAdjustment to set, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_move_before">
<description>
Moves @iter in @store to the position before @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the end of the list.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_show_all">
<description>
Recursively shows a widget, and any child widgets (if the widget is
a container).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_invisible_char">
<description>
Sets the character to use in place of the actual text when
gtk_entry_set_visibility() has been called to set text visibility
to %FALSE. i.e. this is the character used in &quot;password mode&quot; to
show the user how many characters have been typed. The default
invisible char is an asterisk (&apos;*&apos;).  If you set the invisible char
to 0, then the user will get no feedback at all; there will be
no text on the screen as they type.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="ch">
<parameter_description> a Unicode character
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_path">
<description>
Obtains the full path to @widget. The path is simply the name of a
widget and all its parents in the container hierarchy, separated by
periods. The name of a widget comes from
gtk_widget_get_name(). Paths are used to apply styles to a widget
in gtkrc configuration files.  Widget names are the type of the
widget by default (e.g. &quot;GtkButton&quot;) or can be set to an
application-specific value with gtk_widget_set_name().  By setting
the name of a widget, you allow users or theme authors to apply
styles to that specific widget in their gtkrc
file. @path_reversed_p fills in the path in reverse order,
i.e. starting with @widget&apos;s name instead of starting with the name
of @widget&apos;s outermost ancestor.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="path_length">
<parameter_description> location to store length of the path, or %NULL
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> location to store allocated path string, or %NULL 
</parameter_description>
</parameter>
<parameter name="path_reversed">
<parameter_description> location to store allocated reverse path string, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_search">
<description>
Same as gtk_text_iter_forward_search(), but moves backward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter where the search begins
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> search string
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> bitmask of flags affecting the search
</parameter_description>
</parameter>
<parameter name="match_start">
<parameter_description> return location for start of match, or %NULL
</parameter_description>
</parameter>
<parameter name="match_end">
<parameter_description> return location for end of match, or %NULL
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> location of last possible @match_start, or %NULL for start of buffer
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_window_remove_mnemonic">
<description>
Removes a mnemonic from this window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the mnemonic
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the widget that gets activated by the mnemonic
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_pixmap">
<description>
Sets @pixmap as the icon for a given drag. GTK+ retains
references for the arguments, and will release them when
they are no longer needed. In general, gtk_drag_set_icon_pixbuf()
will be more convenient to use.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> the colormap of the icon 
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the image data for the icon 
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the transparency mask for the icon
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within @pixmap of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within @pixmap of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_append_index">
<description>
Appends a new index to a path.  As a result, the depth of the path is
increased.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_accel_path">
<description>
Given an accelerator group, @accel_group, and an accelerator path,
@accel_path, sets up an accelerator in @accel_group so whenever the
key binding that is defined for @accel_path is pressed, @widget
will be activated.  This removes any accelerators (for any
accelerator group) installed by previous calls to
gtk_widget_set_accel_path(). Associating accelerators with
paths allows them to be modified by the user and the modifications
to be saved for future use. (See gtk_accel_map_save().)

This function is a low level function that would most likely
be used by a menu creation system like #GtkItemFactory. If you
use #GtkItemFactory, setting up accelerator paths will be done
automatically.

Even when you you aren&apos;t using #GtkItemFactory, if you only want to
set up accelerators on menu items gtk_menu_item_set_accel_path()
provides a somewhat more convenient interface.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> path used to look up the the accelerator
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_queue_clear">
<description>
DEPRECATED. Use gtk_widget_queue_draw() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_get_color">
<description>
Sets @color to be the current color in the GtkColorSelection widget.

This function is deprecated, use gtk_color_selection_get_current_color() instead.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an array of 4 #gdouble to fill in with the current color.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_move_after">
<description>
Moves @iter in @store to the position after @position. Note that this
function only works with unsorted stores. If @position is %NULL, @iter
will be moved to the start of the list.

Since: 2.2

</description>
<parameters>
<parameter name="store">
<parameter_description> A #GtkListStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_widget_to_tree_coords">
<description>
Converts widget coordinates to coordinates for the
tree window (the full scrollable area of the tree).


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> widget X coordinate
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> widget Y coordinate
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> return location for tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> return location for tree Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_item_get_submenu">
<description>
Gets the submenu underneath this menu item, if any. See
gtk_menu_item_set_submenu().


</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem
</parameter_description>
</parameter>
</parameters>
<return> submenu for this menu item, or %NULL if none.
</return>
</function>

<function name="gtk_text_buffer_get_modified">
<description>
Indicates whether the buffer has been modified since the last call
to gtk_text_buffer_set_modified() set the modification flag to
%FALSE. Used for example to enable a &quot;save&quot; function in a text
editor.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the buffer has been modified
</return>
</function>

<function name="gtk_text_child_anchor_get_widgets">
<description>
Gets a list of all widgets anchored at this child anchor.
The returned list should be freed with g_list_free().



</description>
<parameters>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return> list of widgets anchored at @anchor
</return>
</function>

<function name="gtk_label_set_label">
<description>
Sets the text of the label. The label is interpreted as
including embedded underlines and/or Pango markup depending
on the values of label-&amp;gt;use_underline and label-&amp;gt;use_markup.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> the new text to set for the label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_layout_get_line_xrange">
<description>
Find the range of X coordinates for the paragraph containing
the given iter. Private for 2.0 due to API freeze, could
be made public for 2.2.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      location to store the top of the paragraph in pixels,
or %NULL.
@width  location to store the height of the paragraph in pixels,
or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_state">
<description>
Sets the widget state this icon source is intended to be used
with.

Setting the widget state on an icon source makes no difference
if the state is wildcarded. Therefore, you should usually
call gtk_icon_source_set_state_wildcarded() to un-wildcard it
in addition to calling this function.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> widget state this source applies to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_layout_offsets">
<description>

Obtains the position of the #PangoLayout used to render text
in the entry, in widget coordinates. Useful if you want to line
up the text in an entry with some other text, e.g. when using the
entry to implement editable cells in a sheet widget.

Also useful to convert mouse events into coordinates inside the
#PangoLayout, e.g. to take some action if some part of the entry text
is clicked.

Note that as the user scrolls around in the entry the offsets will
change; you&apos;ll need to connect to the &quot;notify::scroll_offset&quot;
signal to track this. Remember when using the #PangoLayout
functions you need to convert to and from pixels using
PANGO_PIXELS() or #PANGO_SCALE.

Keep in mind that the layout text may contain a preedit string, so
gtk_entry_layout_index_to_text_index() and
gtk_entry_text_index_to_layout_index() are needed to convert byte
indices in the layout to byte indices in the entry contents.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store X offset of layout, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store Y offset of layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_is_start">
<description>
Returns %TRUE if @iter is the first iterator in the buffer, that is
if @iter has a character offset of 0.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the first in the buffer
</return>
</function>

<function name="gtk_text_view_forward_display_line">
<description>
Moves the given @iter forward by one display (wrapped) line.  A
display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph.  If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_text_view_set_justification">
<description>
Sets the default justification of text in @text_view.
Tags in the view&apos;s buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="justification">
<parameter_description> justification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_wrap">
<description>
Returns whether the spin button&apos;s value wraps around to the
opposite limit when the upper or lower limit of the range is
exceeded. See gtk_spin_button_set_wrap().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the spin button wraps around
</return>
</function>

<function name="gtk_requisition_copy">
<description>
Copies a #GtkRequisition.

</description>
<parameters>
<parameter name="requisition">
<parameter_description> a #GtkRequisition.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a copy of @requisition.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_label_set_accel_widget">
<description>
Sets the widget to be monitored by this accelerator label. 

</description>
<parameters>
<parameter name="accel_label">
<parameter_description> a #GtkAccelLabel
</parameter_description>
</parameter>
<parameter name="accel_widget">
<parameter_description> the widget to be monitored.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_starts_sentence">
<description>
Determines whether @iter begins a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the start of a sentence.
</return>
</function>

<function name="gtk_color_selection_new">
<description>
Creates a new GtkColorSelection.


</description>
<parameters>
</parameters>
<return> a new #GtkColorSelection
</return>
</function>

<function name="gtk_window_set_wmclass">
<description>
Don&apos;t use this function. It sets the X Window System &quot;class&quot; and
&quot;name&quot; hints for a window.  According to the ICCCM, you should
always set these to the same value for all windows in an
application, and GTK+ sets them to that value by default, so calling
this function is sort of pointless. However, you may want to call
gtk_window_set_role() on each window in your application, for the
benefit of the session manager. Setting the role allows the window
manager to restore window positions when loading a saved session.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="wmclass_name">
<parameter_description> window name hint
</parameter_description>
</parameter>
<parameter name="wmclass_class">
<parameter_description> window class hint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_text_with_mnemonic">
<description>
Sets the label&apos;s text from the string @str.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.
The mnemonic key can be used to activate another widget, chosen automatically,
or explicitly using gtk_label_set_mnemonic_widget().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_filename">
<description>
Retrieves the source filename, or %NULL if none is set. The
filename is not a copy, and should not be modified or expected to
persist beyond the lifetime of the icon source.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> image filename. This string must not be modified
or freed.
</return>
</function>

<function name="gtk_menu_get_tearoff_state">
<description>
Returns whether the menu is torn off. See
gtk_menu_set_tearoff_state ().


</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu is currently torn off.
</return>
</function>

<function name="gtk_handle_box_get_shadow_type">
<description>
Gets the type of shadow drawn around the handle box. See
gtk_handle_box_set_shadow_type().


</description>
<parameters>
<parameter name="handle_box">
<parameter_description> a #GtkHandleBox
</parameter_description>
</parameter>
</parameters>
<return> the type of shadow currently drawn around the handle box.
</return>
</function>

<function name="gtk_progress_bar_get_fraction">
<description>
Returns the current fraction of the task that&apos;s been completed.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> a fraction from 0.0 to 1.0
</return>
</function>

<function name="gtk_text_iter_backward_find_char">
<description>
Same as gtk_text_iter_forward_find_char(), but goes backward from @iter.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="pred">
<parameter_description> function to be called on each character
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @pred
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> search limit, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_text_buffer_get_end_iter">
<description>
Initializes @iter with the &quot;end iterator,&quot; one past the last valid
character in the text buffer. If dereferenced with
gtk_text_iter_get_char(), the end iterator has a character value of
0. The entire buffer lies in the range from the first position in
the buffer (call gtk_text_buffer_get_start_iter() to get
character position 0) to the end iterator.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get">
<description>
Gets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by a place to store the value being
retrieved.  The list is terminated by a -1. For example, to get a
value from column 0 with type %G_TYPE_STRING, you would
write: &amp;lt;literal&amp;gt;gtk_tree_model_get (model, iter, 0, &amp;amp;place_string_here, -1)&amp;lt;/literal&amp;gt;,
where &amp;lt;literal&amp;gt;place_string_here&amp;lt;/literal&amp;gt; is a &amp;lt;type&amp;gt;gchar*&amp;lt;/type&amp;gt; to be 
filled with the string.
If appropriate, the returned values have to be freed or unreferenced.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a row in @tree_model
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value return locations, terminated by -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_colormap">
<description>
Sets the colormap for the widget to the given value. Widget must not
have been previously realized. This probably should only be used
from an &amp;lt;function&amp;gt;init()&amp;lt;/function&amp;gt; function (i.e. from the constructor 
for the widget).


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a colormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_increments">
<description>
Sets the step and page sizes for the range.
The step size is used when the user clicks the #GtkScrollbar
arrows or moves #GtkScale via arrow keys. The page size
is used for example when moving via Page Up or Page Down keys.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> step size
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> page size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_invisible_new_for_screen">
<description>
Creates a new #GtkInvisible object for a specified screen


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen which identifies on which
the new #GtkInvisible will be created.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GtkInvisible object

Since: 2.2
</return>
</function>

<function name="gtk_window_set_frame_dimensions">
<description>
(Note: this is a special-purpose function intended for the framebuffer
port; see gtk_window_set_has_frame(). It will have no effect on the
window border drawn by the window manager, which is the normal
case when using the X Window system.)

For windows with frames (see gtk_window_set_has_frame()) this function
can be used to change the size of the frame border.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow that has a frame
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> The width of the left border
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> The height of the top border
</parameter_description>
</parameter>
<parameter name="right">
<parameter_description> The width of the right border
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> The height of the bottom border
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_vadjustment">
<description>
Gets the #GtkAdjustment currently being used for the vertical aspect.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkAdjustment object, or %NULL if none is currently being
used.
</return>
</function>

<function name="gtk_clipboard_clear">
<description>
Clears the contents of the clipboard. Generally this should only
be called between the time you call gtk_clipboard_set_with_owner()
or gtk_clipboard_set_with_data(),
and when the @clear_func you supplied is called. Otherwise, the
clipboard may be owned by someone else.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description>  a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_foreach">
<description>
Calls @func on each tag in @table, with user data @data.


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function to call on each tag
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_invisible_get_screen">
<description>
Returns the #GdkScreen object associated with @invisible


</description>
<parameters>
<parameter name="invisible">
<parameter_description> a #GtkInvisible.
</parameter_description>
</parameter>
</parameters>
<return> the associated #GdkScreen.

Since: 2.2
</return>
</function>

<function name="gtk_tree_get_row_drag_data">
<description>
Obtains a @tree_model and @path from selection data of target type
%GTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.
This function can only be used if @selection_data originates from the same
process that&apos;s calling this function, because a pointer to the tree model
is being passed around. If you aren&apos;t in the same process, then you&apos;ll
get memory corruption. In the #GtkTreeDragDest drag_data_received handler,
you can assume that selection data of type %GTK_TREE_MODEL_ROW is
in from the current process. The returned path must be freed with
gtk_tree_path_free().


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row in @tree_model
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data had target type %GTK_TREE_MODEL_ROW and
is otherwise valid
</return>
</function>

<function name="gtk_text_view_set_border_window_size">
<description>
Sets the width of %GTK_TEXT_WINDOW_LEFT or %GTK_TEXT_WINDOW_RIGHT,
or the height of %GTK_TEXT_WINDOW_TOP or %GTK_TEXT_WINDOW_BOTTOM.
Automatically destroys the corresponding window if the size is set
to 0, and creates the window if the size is set to non-zero.  This
function can only be used for the &quot;border windows,&quot; it doesn&apos;t work
with #GTK_TEXT_WINDOW_WIDGET, #GTK_TEXT_WINDOW_TEXT, or
#GTK_TEXT_WINDOW_PRIVATE.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> window to affect
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> width or height of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_child_visible">
<description>
Gets the value set with gtk_widget_set_child_visible().
If you feel a need to use this function, your code probably
needs reorganization. 

This function is only useful for container implementations and
never should be called by an application.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget is mapped with the parent.
</return>
</function>

<function name="gtk_misc_get_padding">
<description>
Gets the padding in the X and Y directions of the widget. See gtk_misc_set_padding().

</description>
<parameters>
<parameter name="misc">
<parameter_description> a #GtkMisc
</parameter_description>
</parameter>
<parameter name="xpad">
<parameter_description> location to store padding in the X direction, or %NULL
</parameter_description>
</parameter>
<parameter name="ypad">
<parameter_description> location to store padding in the Y direction, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_is_ancestor">
<description>
Returns %TRUE if @iter is an ancestor of @descendant.  That is, @iter is the
parent (or grandparent or great-grandparent) of @descendant.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter is an ancestor of @descendant
</return>
</function>

<function name="gtk_hsv_is_adjusting">
<description>
An HSV color selector can be said to be adjusting if multiple rapid changes
are being made to its value, for example, when the user is adjusting the
value with the mouse.  This function queries whether the HSV color selector
is being adjusted or not.


</description>
<parameters>
<parameter name="hsv">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> TRUE if clients can ignore changes to the color value, since
they may be transitory, or FALSE if they should consider the color value
status to be final.
</return>
</function>

<function name="gtk_color_selection_is_adjusting">
<description>
Gets the current state of the @colorsel.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user is currently dragging a color around, and %FALSE
if the selection has stopped.
</return>
</function>

<function name="gtk_text_view_new_with_buffer">
<description>
Creates a new #GtkTextView widget displaying the buffer
@buffer. One buffer can be shared among many widgets.
@buffer may be NULL to create a default buffer, in which case
this function is equivalent to gtk_text_view_new(). The
text view adds its own reference count to the buffer; it does not
take over an existing reference.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTextView.
</return>
</function>

<function name="gtk_widget_set_double_buffered">
<description>
Widgets are double buffered by default; you can use this function
to turn off the buffering. &quot;Double buffered&quot; simply means that
gdk_window_begin_paint_region() and gdk_window_end_paint() are called
automatically around expose events sent to the
widget. gdk_window_begin_paint() diverts all drawing to a widget&apos;s
window to an offscreen buffer, and gdk_window_end_paint() draws the
buffer to the screen. The result is that users see the window
update in one smooth step, and don&apos;t see individual graphics
primitives being rendered.

In very simple terms, double buffered widgets don&apos;t flicker,
so you would only use this function to turn off double buffering
if you had special needs and really knew what you were doing.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="double_buffered">
<parameter_description> %TRUE to double-buffer a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_set_priority">
<description>
Sets the priority of a #GtkTextTag. Valid priorities are
start at 0 and go to one less than gtk_text_tag_table_get_size().
Each tag in a table has a unique priority; setting the priority
of one tag shifts the priorities of all the other tags in the
table to maintain a unique priority for each tag. Higher priority
tags &quot;win&quot; if two tags both set the same text attribute. When adding
a tag to a tag table, it will be assigned the highest priority in
the table by default; so normally the precedence of a set of tags
is the order in which they were added to the table, or created with
gtk_text_buffer_create_tag(), which adds the tag to the buffer&apos;s table
automatically.

</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the new priority
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_add_accelerator">
<description>
Installs an accelerator for this @widget in @accel_group that causes
@accel_signal to be emitted if the accelerator is activated.
The @accel_group needs to be added to the widget&apos;s toplevel via
gtk_window_add_accel_group(), and the signal must be of type %G_RUN_ACTION.
Accelerators added through this function are not user changeable during
runtime. If you want to support accelerators that can be changed by the
user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
gtk_menu_item_set_accel_path() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description>       widget to install an accelerator on
</parameter_description>
</parameter>
<parameter name="accel_signal">
<parameter_description> widget signal to emit on accelerator activation
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description>  accel group for this widget, added to its toplevel
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>    GDK keyval of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>   modifier key combination of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_flags">
<parameter_description>  flag accelerators, e.g. %GTK_ACCEL_VISIBLE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_set_inconsistent">
<description>
If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a boolean setting, and the
current values in that range are inconsistent, you may want to
display the check in an &quot;in between&quot; state. This function turns on
&quot;in between&quot; display.  Normally you would turn off the inconsistent
state again if the user explicitly selects a setting. This has to be
done manually, gtk_check_menu_item_set_inconsistent() only affects
visual appearance, it doesn&apos;t affect the semantics of the widget.


</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to display an &quot;inconsistent&quot; third state check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_state_wildcarded">
<description>
If the widget state is wildcarded, this source can be used as the
base image for an icon in any #GtkStateType.  If the widget state
is not wildcarded, then the state the source applies to should be
set with gtk_icon_source_set_state() and the icon source will
only be used with that specific state.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.

#GtkIconSet will normally transform wildcarded source images to
produce an appropriate icon for a given state, for example
lightening an image on prelight, but will not modify source images
that match exactly.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to wildcard the widget state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_hide_on_delete">
<description>
Utility function; intended to be connected to the &quot;delete_event&quot;
signal on a #GtkWindow. The function calls gtk_widget_hide() on its
argument, then returns %TRUE. If connected to &quot;delete_event&quot;, the
result is that clicking the close button for a window (on the
window frame, top right corner usually) will hide but not destroy
the window. By default, GTK+ destroys windows when &quot;delete_event&quot;
is received.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE
</return>
</function>

<function name="gtk_text_view_get_editable">
<description>
Returns the default editability of the #GtkTextView. Tags in the
buffer may override this setting for some ranges of text.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> whether text is editable by default
</return>
</function>

<function name="gtk_icon_set_ref">
<description>
Increments the reference count on @icon_set.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet.
</parameter_description>
</parameter>
</parameters>
<return> @icon_set.
</return>
</function>

<function name="gtk_toolbar_unset_icon_size">
<description>
Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that
user preferences will be used to determine the icon size.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_delete_surrounding">
<description>
Asks the widget that the input context is attached to to delete
characters around the cursor position by emitting the
GtkIMContext::delete_surrounding signal. Note that @offset and @n_chars
are in characters not in bytes, which differs from the usage other
places in #GtkIMContext.

In order to use this function, you should first call
gtk_im_context_get_surrounding() to get the current context, and
call this function immediately afterwards to make sure that you
know what you are deleting. You should also account for the fact
that even if the signal was handled, the input context might not
have deleted all the characters that were requested to be deleted.

This function is used by an input method that wants to make
subsitutions in the existing text in response to new input. It is
not useful for applications.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset from cursor position in chars;
a negative value means start before the cursor.
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> number of characters to delete.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the signal was handled.
</return>
</function>

<function name="gtk_widget_get_direction">
<description>
Gets the reading direction for a particular widget. See
gtk_widget_set_direction().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the reading direction for the widget.
</return>
</function>

<function name="gtk_image_get_pixbuf">
<description>

Gets the #GdkPixbuf being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXBUF (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixbuf.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> the displayed pixbuf, or %NULL if the image is empty
</return>
</function>

<function name="gtk_widget_get_default_visual">
<description>
Obtains the visual of the default colormap. Not really useful;
used to be useful before gdk_colormap_get_visual() existed.


</description>
<parameters>
</parameters>
<return> visual of the default colormap
</return>
</function>

<function name="gtk_button_get_use_underline">
<description>
Returns whether an embedded underline in the button label indicates a
mnemonic. See gtk_button_set_use_underline ().


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an embedded underline in the button label
indicates the mnemonic accelerator keys.
</return>
</function>

<function name="gtk_progress_bar_get_text">
<description>
Retrieves the text displayed superimposed on the progress bar,
if any, otherwise %NULL. The return value is a reference
to the text, not a copy of it, so will become invalid
if you change the text in the progress bar.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> text, or %NULL; this string is owned by the widget
and should not be modified or freed.
</return>
</function>

<function name="gtk_text_iter_get_line_offset">
<description>
Returns the character offset of the iterator,
counting from the start of a newline-terminated line.
The first character on the line has offset 0.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> offset from start of line
</return>
</function>

<function name="gtk_file_selection_set_select_multiple">
<description>
Sets whether the user is allowed to select multiple files in the file list.
Use gtk_file_selection_get_selections () to get the list of selected files.

</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
<parameter name="select_multiple">
<parameter_description> whether or not the user is allowed to select multiple
files in the file list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_table_get_row_spacing">
<description>
Gets the amount of space between row @row, and
row @row + 1. See gtk_table_set_row_spacing().


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a row in the table, 0 indicates the first row
</parameter_description>
</parameter>
</parameters>
<return> the row spacing
</return>
</function>

<function name="gtk_label_set_text">
<description>
Sets the text within the #GtkLabel widget.  It overwrites any text that
was there before.  

This will also clear any previously set mnemonic accelerators.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> The text you want to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_construct">
<description>
Initializes an item factory.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="container_type">
<parameter_description> the kind of menu to create; can be
#GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the factory path of @ifactory, a string of the form 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup to which the accelerators for the
menu items will be added, or %NULL to create a new one
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_prepend">
<description>
Prepends a new row to @list_store. @iter will be changed to point to this new
row. The row will be empty after this function is called. To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the prepend row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_offset">
<description>
Initializes @iter to a position @char_offset chars from the start
of the entire buffer. If @char_offset is -1 or greater than the number
of characters in the buffer, @iter is initialized to the end iterator,
the iterator one past the last valid character in the buffer.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="char_offset">
<parameter_description> char offset from start of buffer, counting from 0, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_attributes">
<description>
Computes the effect of any tags applied to this spot in the
text. The @values parameter should be initialized to the default
settings you wish to use if no tags are in effect. You&apos;d typically
obtain the defaults from gtk_text_view_get_default_attributes().

gtk_text_iter_get_attributes () will modify @values, applying the
effects of any tags present at @iter. If any tags affected @values,
the function returns %TRUE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> a #GtkTextAttributes to be filled in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @values was modified
</return>
</function>

<function name="gtk_dialog_set_has_separator">
<description>
Sets whether the dialog has a separator above the buttons.
%TRUE by default.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to have a separator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_cell_renderers">
<description>
Returns a newly-allocated #GList of all the cell renderers in the column, 
in no particular order.  The list must be freed with g_list_free().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkCellRenderers
</return>
</function>

<function name="gtk_socket_get_id">
<description>
Gets the window ID of a #GtkSocket widget, which can then
be used to create a client embedded inside the socket, for
instance with gtk_plug_new(). 

The #GtkSocket must have already be added into a toplevel window 
before you can make this call.


</description>
<parameters>
<parameter name="socket_">
<parameter_description> a #GtkSocket.
</parameter_description>
</parameter>
</parameters>
<return> the window ID for the socket
</return>
</function>

<function name="gtk_text_view_set_pixels_inside_wrap">
<description>
Sets the default number of pixels of blank space to leave between
display/wrapped lines within a paragraph. May be overridden by
tags in @text_view&apos;s buffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="pixels_inside_wrap">
<parameter_description> default number of pixels between wrapped lines
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_push_colormap">
<description>
Pushes @cmap onto a global stack of colormaps; the topmost
colormap on the stack will be used to create all widgets.
Remove @cmap with gtk_widget_pop_colormap(). There&apos;s little
reason to use this function.


</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_move_column_after">
<description>
Moves @column to be after to @base_column.  If @base_column is %NULL, then
@column is placed in the first position.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to be moved.
</parameter_description>
</parameter>
<parameter name="base_column">
<parameter_description> The #GtkTreeViewColumn to be moved relative to, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_rc_reset_styles">
<description>
This setting resets all of our styles; we use it when the font
rendering parameters or the icon sizes have changed. It&apos;s both less
and more comprehensive then we actually need:

Less comprehensive: it doesn&apos;t affect widgets that have a style
set on them.

More comprehensive: it resets the styles, but the styles haven&apos;t
changed. The main reason for resetting the styles is becaues
most widgets will redo all their font stuff when their style
change.

</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_move_mark_onscreen">
<description>
Moves a mark within the buffer so that it&apos;s
located within the currently-visible text area.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mark moved (wasn&apos;t already onscreen)
</return>
</function>

<function name="gtk_window_fullscreen">
<description>
Asks to place @window in the fullscreen state. Note that you
shouldn&apos;t assume the window is definitely full screen afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could unfullscreen it
again, and not all window managers honor requests to fullscreen
windows. But normally the window will end up fullscreen. Just
don&apos;t write code that crashes if not.

You can track the fullscreen state via the &quot;window_state_event&quot; signal
on #GtkWidget.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_text_set_fixed_height_from_font">
<description>
Sets the height of a renderer to explicitly be determined by the &quot;font&quot; and
&quot;y_pad&quot; property set on it.  Further changes in these properties do not
affect the height, so they must be accompanied by a subsequent call to this
function.  Using this function is unflexible, and should really only be used
if calculating the size of a cell is too slow (ie, a massive number of cells
displayed).  If @number_of_rows is -1, then the fixed height is unset, and
the height is determined by the properties again.

</description>
<parameters>
<parameter name="renderer">
<parameter_description> A #GtkCellRendererText
</parameter_description>
</parameter>
<parameter name="number_of_rows">
<parameter_description> Number of rows of text each cell renderer is allocated, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_push_composite_child">
<description>
Makes all newly-created widgets as composite children until
the corresponding gtk_widget_pop_composite_child() call.

A composite child is a child that&apos;s an implementation detail of the
container it&apos;s inside and should not be visible to people using the
container. Composite children aren&apos;t treated differently by GTK (but
see gtk_container_foreach() vs. gtk_container_forall()), but e.g. GUI 
builders might want to treat them in a different way.

Here is a simple example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_widget_push_composite_child (&amp;lt;!-- --&amp;gt;);
scrolled_window-&amp;gt;hscrollbar = gtk_hscrollbar_new (hadjustment);
gtk_widget_set_composite_name (scrolled_window-&amp;gt;hscrollbar, &quot;hscrollbar&quot;);
gtk_widget_pop_composite_child (&amp;lt;!-- --&amp;gt;);
gtk_widget_set_parent (scrolled_window-&amp;gt;hscrollbar, 
GTK_WIDGET (scrolled_window));
g_object_ref (scrolled_window-&amp;gt;hscrollbar);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_find_target">
<description>
Looks for a match between @context-&amp;gt;targets and the
@dest_target_list, returning the first matching target, otherwise
returning %GDK_NONE. @dest_target_list should usually be the return
value from gtk_drag_dest_get_target_list(), but some widgets may
have different valid targets for different parts of the widget; in
that case, they will have to implement a drag_motion handler that
passes the correct target list to this function.


</description>
<parameters>
<parameter name="widget">
<parameter_description> drag destination widget
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> drag context
</parameter_description>
</parameter>
<parameter name="target_list">
<parameter_description> list of droppable targets, or %NULL to use
gtk_drag_dest_get_target_list (@widget).
</parameter_description>
</parameter>
</parameters>
<return> first target that the source offers and the dest can accept, or %GDK_NONE
</return>
</function>

<function name="gtk_entry_set_has_frame">
<description>
Sets whether the entry has a beveled frame around it.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_frame_dimensions">
<description>
(Note: this is a special-purpose function intended for the
framebuffer port; see gtk_window_set_has_frame(). It will not
return the size of the window border drawn by the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;, which is the normal
case when using a windowing system.  See
gdk_window_get_frame_extents() to get the standard window border
extents.)

Retrieves the dimensions of the frame window for this toplevel.
See gtk_window_set_has_frame(), gtk_window_set_frame_dimensions().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="left">
<parameter_description> location to store the width of the frame at the left, or %NULL
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description> location to store the height of the frame at the top, or %NULL
</parameter_description>
</parameter>
<parameter name="right">
<parameter_description> location to store the width of the frame at the returns, or %NULL
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> location to store the height of the frame at the bottom, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_popup">
<description>
Displays a menu and makes it available for selection.  Applications can use
this function to display context-sensitive menus, and will typically supply
%NULL for the @parent_menu_shell, @parent_menu_item, @func and @data 
parameters. The default menu positioning function will position the menu
at the current mouse cursor position.

The @button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@button should be 0.

The @activate_time parameter should be the time stamp of the event that
initiated the popup. If such an event is not available, use
gtk_get_current_event_time() instead.


</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu.
</parameter_description>
</parameter>
<parameter name="parent_menu_shell">
<parameter_description> the menu shell containing the triggering menu item, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_menu_item">
<parameter_description> the menu item whose activation triggered the popup, or %NULL
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a user supplied function used to position the menu, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user supplied data to be passed to @func.
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the mouse button which was pressed to initiate the event.
</parameter_description>
</parameter>
<parameter name="activate_time">
<parameter_description> the time at which the activation event occurred.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_remove">
<description>
Removes @iter from @tree_store.  After being removed, @iter is set to the
next valid row at that level, or invalidated if it previously pointed to the
last one.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is still valid, %FALSE if not.
</return>
</function>

<function name="_gtk_plug_add_to_socket">
<description>
Adds a plug to a socket within the same application.

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug
</parameter_description>
</parameter>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_slice">
<description>
Returns the text in the range [@start,@end). Excludes undisplayed
text (text marked with tags that set the invisibility attribute) if
@include_hidden_chars is FALSE. The returned string includes a
0xFFFC character whenever the buffer contains
embedded images, so byte and character indexes into
the returned string &amp;lt;emphasis&amp;gt;do&amp;lt;/emphasis&amp;gt; correspond to byte
and character indexes into the buffer. Contrast with
gtk_text_buffer_get_text (). Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of a range
</parameter_description>
</parameter>
<parameter name="include_hidden_chars">
<parameter_description> whether to include invisible text
</parameter_description>
</parameter>
</parameters>
<return> an allocated UTF-8 string
</return>
</function>

<function name="gtk_label_get_use_markup">
<description>
Returns whether the label&apos;s text is interpreted as marked up with
the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup
language&amp;lt;/link&amp;gt;. See gtk_label_set_use_markup ().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the label&apos;s text will be parsed for markup.
</return>
</function>

<function name="gtk_entry_get_max_length">
<description>
Retrieves the maximum allowed length of the text in
@entry. See gtk_entry_set_max_length().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the maximum allowed number of characters
in #GtkEntry, or 0 if there is no maximum.
</return>
</function>

<function name="gtk_text_iter_ends_tag">
<description>
Returns %TRUE if @tag is toggled off at exactly this point. If @tag
is %NULL, returns %TRUE if any tag is toggled off at this point. Note
that the gtk_text_iter_ends_tag () returns %TRUE if @iter is the
&amp;lt;emphasis&amp;gt;end&amp;lt;/emphasis&amp;gt; of the tagged range;
gtk_text_iter_has_tag () tells you whether an iterator is
&amp;lt;emphasis&amp;gt;within&amp;lt;/emphasis&amp;gt; a tagged range.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the end of a range tagged with @tag

</return>
</function>

<function name="gtk_container_propagate_expose">
<description>
When a container receives an expose event, it must send synthetic
expose events to all children that don&apos;t have their own #GdkWindows.
This function provides a convenient way of doing this. A container,
when it receives an expose event, calls gtk_container_propagate_expose() 
once for each child, passing in the event the container received.

gtk_container_propagate_expose() takes care of deciding whether
an expose event needs to be sent to the child, intersecting
the event&apos;s area with the child area, and sending the event.

In most cases, a container can simply either simply inherit the
::expose implementation from #GtkContainer, or, do some drawing 
and then chain to the ::expose implementation from #GtkContainer.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @container
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a expose event sent to container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_new">
<description>
Creates a new text buffer.


</description>
<parameters>
<parameter name="table">
<parameter_description> a tag table, or NULL to create a new one
</parameter_description>
</parameter>
</parameters>
<return> a new text buffer
</return>
</function>

<function name="gtk_layout_freeze">
<description>
This is a deprecated function, it doesn&apos;t do anything useful.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_set_shadow_type">
<description>
Changes the type of shadow drawn around the contents of
@scrolled_window.


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> kind of shadow to draw around scrolled window contents
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_move_iter_to_next_line">
<description>
Move the iterator to the beginning of the next line. The
lines of a wrapped paragraph are treated as distinct for
this operation.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_direction_wildcarded">
<description>
If the text direction is wildcarded, this source can be used
as the base image for an icon in any #GtkTextDirection.
If the text direction is not wildcarded, then the
text direction the icon source applies to should be set
with gtk_icon_source_set_direction(), and the icon source
will only be used with that text direction.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to wildcard the text direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_value">
<description>
Get the value in the @spin_button.


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the value of @spin_button
</return>
</function>

<function name="gtk_tree_model_iter_has_child">
<description>
Returns %TRUE if @iter has children, %FALSE otherwise.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to test for children.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter has children.
</return>
</function>

<function name="gtk_invisible_new">
<description>
Creates a new #GtkInvisible.


</description>
<parameters>
</parameters>
<return> a new #GtkInvisible.
</return>
</function>

<function name="gtk_spin_button_get_update_policy">
<description>
Gets the update behavior of a spin button. See
gtk_spin_button_set_update_policy().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the current update policy
</return>
</function>

<function name="gtk_color_selection_set_has_palette">
<description>
Shows and hides the palette based upon the value of @has_palette.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="has_palette">
<parameter_description> %TRUE if palette is to be visible, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_set_visible_line_index">
<description>
Like gtk_text_iter_set_line_index(), but the index is in visible
bytes, i.e. text with a tag making it invisible is not counted
in the index.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="byte_on_line">
<parameter_description> a byte index
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_get_valist">
<description>
Gets the values of one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a %NULL-terminated list of property names and #GValue*, 
starting with @first_prop_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_icon_list">
<description>
Retrieves the list of icons set by gtk_window_set_icon_list().
The list is copied, but the reference count on each
member won&apos;t be incremented.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> copy of window&apos;s icon list
</return>
</function>

<function name="gtk_widget_remove_accelerator">
<description>
Removes an accelerator from @widget, previously installed with
gtk_widget_add_accelerator().

</description>
<parameters>
<parameter name="widget">
<parameter_description>       widget to install an accelerator on
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description>  accel group for this widget
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>    GDK keyval of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>   modifier key combination of the accelerator
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>      whether an accelerator was installed and could be removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_size_register_alias">
<description>
Registers @alias as another name for @target.
So calling gtk_icon_size_from_name() with @alias as argument
will return @target.


</description>
<parameters>
<parameter name="alias">
<parameter_description> an alias for @target
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an existing icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_visible">
<description>
Sets the visibility of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="visible">
<parameter_description> %TRUE if the @tree_column is visible.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_attributes">
<description>
Sets a #PangoAttrList; the attributes in the list are applied to the
label text. The attributes set with this function will be ignored
if the &quot;use_underline&quot; property or the &quot;use_markup&quot; property
is %TRUE.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description> a #PangoAttrList
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_default_files">
<description>
Retrieves the current list of RC files that will be parsed
at the end of gtk_init().


</description>
<parameters>
</parameters>
<return> A %NULL-terminated array of filenames. This memory
is owned by GTK+ and must not be freed by the application.
If you want to store this information, you should make a copy.
</return>
</function>

<function name="gtk_tree_selection_get_selected_rows">
<description>
Creates a list of path of all selected rows. Additionally, if you are
planning on modifying the model after calling this function, you may
want to convert the returned list into a list of #GtkTreeRowReference&amp;lt;!-- --&amp;gt;s.
To do this, you can use gtk_tree_row_reference_new_proxy().

To free the return value, use:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
g_list_foreach (list, gtk_tree_path_free, NULL);
g_list_free (list);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A pointer to set to the #GtkTreeModel, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> A #GList containing a #GtkTreePath for each selected row.

Since: 2.2
</return>
</function>

<function name="gtk_plug_new">
<description>
Creates a new plug widget inside the #GtkSocket identified
by @socket_id. If @socket_id is 0, the plug is left &quot;unplugged&quot; and
can later be plugged into a #GtkSocket by  gtk_socket_add_id().


</description>
<parameters>
<parameter name="socket_id">
<parameter_description>  the window ID of the socket, or 0.
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkPlug widget.
</return>
</function>

<function name="gtk_window_activate_focus">
<description>
Activates the current focused widget within the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a widget got activated.
</return>
</function>

<function name="gtk_notebook_set_tab_pos">
<description>
Sets the edge at which the tabs for switching pages in the
notebook are drawn.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the edge to draw the tabs at.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_swap">
<description>
Swaps @a and @b in the same level of @tree_store. Note that this function
only works with unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="a">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Another #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_collapse_row">
<description>
Collapses a row (hides its child rows, if they exist).


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path to a row in the @tree_view
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row was collapsed.
</return>
</function>

<function name="gtk_tree_store_iter_depth">
<description>
Returns the depth of @iter.  This will be 0 for anything on the root level, 1
for anything down a level, etc.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> The depth of @iter
</return>
</function>

<function name="gtk_text_view_window_to_buffer_coords">
<description>
Converts coordinates on the window identified by @win to buffer
coordinates, storing the result in (@buffer_x,@buffer_y).

Note that you can&apos;t convert coordinates for a nonexisting window (see 
gtk_text_view_set_border_window_size()).

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="win">
<parameter_description> a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
</parameter_description>
</parameter>
<parameter name="window_x">
<parameter_description> window x coordinate
</parameter_description>
</parameter>
<parameter name="window_y">
<parameter_description> window y coordinate
</parameter_description>
</parameter>
<parameter name="buffer_x">
<parameter_description> buffer x coordinate return location
</parameter_description>
</parameter>
<parameter name="buffer_y">
<parameter_description> buffer y coordinate return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_insert_after">
<description>
Inserts a new row after @sibling. If @sibling is %NULL, then the row will be
prepended to the beginning of the list. @iter will be changed to point to
this new row. The row will be empty after this function is called. To fill
in values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_move_mark_by_name">
<description>
Moves the mark named @name (which must exist) to location @where.
See gtk_text_buffer_move_mark () for details.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a mark
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> new location for mark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_set_line_offset">
<description>
Moves @iter within a line, to a new &amp;lt;emphasis&amp;gt;character&amp;lt;/emphasis&amp;gt;
(not byte) offset. The given character offset must be less than or
equal to the number of characters in the line; if equal, @iter
moves to the start of the next line. See
gtk_text_iter_set_line_index() if you have a byte index rather than
a character offset.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter 
</parameter_description>
</parameter>
<parameter name="char_on_line">
<parameter_description> a character offset relative to the start of @iter&apos;s current line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_iter_is_valid">
<description>
WARNING: This function is slow. Only use it for debugging and/or testing
purposes.

Checks if the given iter is a valid iter for this #GtkTreeStore.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iter is valid, %FALSE if the iter is invalid.

Since: 2.2
</return>
</function>

<function name="gtk_vscale_new_with_range">
<description>
Creates a new vertical scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it&apos;s the distance the
slider moves when using the arrow keys to adjust the scale value.


</description>
<parameters>
<parameter name="min">
<parameter_description> minimum value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum value
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> step increment (tick size) used with keyboard shortcuts
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkVScale
</return>
</function>

<function name="gtk_list_store_clear">
<description>
Removes all rows from the list store.  


</description>
<parameters>
<parameter name="list_store">
<parameter_description> a #GtkListStore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_window_unset_focus_and_default">
<description>
Checks whether the focus and default widgets of @window are
@widget or a descendent of @widget, and if so, unset them.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget inside of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_drag_dest_drag_data_received">
<description>
Asks the #GtkTreeDragDest to insert a row before the path @dest,
deriving the contents of the row from @selection_data. If @dest is
outside the tree so that inserting before it is impossible, %FALSE
will be returned. Also, %FALSE may be returned if the new row is
not created for some model-specific reason.  Should robustly handle
a @dest no longer found in the model!


</description>
<parameters>
<parameter name="drag_dest">
<parameter_description> a #GtkTreeDragDest
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> row to drop in front of
</parameter_description>
</parameter>
<parameter name="selection_data">
<parameter_description> data to drop
</parameter_description>
</parameter>
</parameters>
<return> whether a new row was created before position @dest
</return>
</function>

<function name="gtk_hsv_set_color">
<description>
Sets the current color in an HSV color selector.  Color component values must
be in the [0.0, 1.0] range.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="h">
<parameter_description> Hue.
</parameter_description>
</parameter>
<parameter name="s">
<parameter_description> Saturation.
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> Value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_rules_hint">
<description>
This function tells GTK+ that the user interface for your
application requires users to read across tree rows and associate
cells with one another. By default, GTK+ will then render the tree
with alternating row colors. Do &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; use it
just because you prefer the appearance of the ruled tree; that&apos;s a
question for the theme. Some themes will draw tree rows in
alternating colors even when rules are turned off, and users who
prefer that appearance all the time can choose those themes. You
should call this function only as a &amp;lt;emphasis&amp;gt;semantic&amp;lt;/emphasis&amp;gt;
hint to the theme engine that your tree makes alternating colors
useful from a functional standpoint (since it has lots of columns,
generally).


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the tree requires reading across rows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_add_accel_group">
<description>
Associate @accel_group with @window, such that calling
gtk_accel_groups_activate() on @window will activate accelerators
in @accel_group.

</description>
<parameters>
<parameter name="window">
<parameter_description> window to attach accelerator group to
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_line">
<description>
Moves @iter to the start of the previous line. Returns %TRUE if
@iter could be moved; i.e. if @iter was at character offset 0, this
function returns %FALSE. Therefore if @iter was already on line 0,
but not at the start of the line, @iter is snapped to the start of
the line and the function returns %TRUE. (Note that this implies that
in a loop calling this function, the line number may not change on
every iteration, if your first iteration is on line 0.)


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved
</return>
</function>

<function name="gtk_widget_set_usize">
<description>
This function is deprecated; use gtk_widget_set_size_request()
instead.

Sets the minimum size of a widget; that is, the widget&apos;s size
request will be @width by @height. You can use this function to
force a widget to be either larger or smaller than it is. The
strange &quot;usize&quot; name dates from the early days of GTK+, and derives
from X Window System terminology. In many cases,
gtk_window_set_default_size() is a better choice for toplevel
windows than this function; setting the default size will still
allow users to shrink the window. Setting the usize will force them
to leave the window at least as large as the usize. When dealing
with window sizes, gtk_window_set_geometry_hints() can be a useful
function as well.

Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it&apos;s
basically impossible to hardcode a size that will always be
correct.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> minimum width, or -1 to unset
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> minimum height, or -1 to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_range">
<description>
Copies text, tags, and pixbufs between @start and @end (the order
of @start and @end doesn&apos;t matter) and inserts the copy at @iter.
Used instead of simply getting/inserting text because it preserves
images and tags. If @start and @end are in a different buffer from
@buffer, the two buffers must share the same tag table.

Implemented via emissions of the insert_text and apply_tag signals,
so expect those.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> a position in a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> another position in the same buffer as @start
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_init">
<description>
Call this function before using any other GTK+ functions in your GUI
applications.  It will initialize everything needed to operate the toolkit and
parses some standard command line options. @argc and 
@argv are adjusted accordingly so your own code will 
never see those standard arguments.

&amp;lt;note&amp;gt;&amp;lt;para&amp;gt;
This function will terminate your program if it was unable to initialize 
the GUI for some reason. If you want your program to fall back to a 
textual interface you want to call gtk_init_check() instead.
&amp;lt;/para&amp;gt;&amp;lt;/note&amp;gt;

</description>
<parameters>
<parameter name="argc">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argc&amp;lt;/parameter&amp;gt; parameter of your 
&amp;lt;function&amp;gt;main()&amp;lt;/function&amp;gt; function. Changed if any arguments were 
handled.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argv&amp;lt;/parameter&amp;gt; parameter of 
&amp;lt;function&amp;gt;main()&amp;lt;/function&amp;gt;. Any parameters understood by gtk_init() 
are stripped before return.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_set_line_index">
<description>
Same as gtk_text_iter_set_line_offset(), but works with a
&amp;lt;emphasis&amp;gt;byte&amp;lt;/emphasis&amp;gt; index. The given byte index must be at
the start of a character, it can&apos;t be in the middle of a UTF-8
encoded character.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="byte_on_line">
<parameter_description> a byte index relative to the start of @iter&apos;s current line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_search_column">
<description>
Sets @column as the column where the interactive search code should
search in.  Additionally, turns on interactive searching. Note that
@column refers to a column of the model.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column of the model to search in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_size_group_queue_resize">
<description>
Queue a resize on a widget, and on all other widgets grouped with this widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_bindings_activate_event">
<description>
Looks up key bindings for @object to find one matching
@event, and if one was found, activate it.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GtkObject (generally must be a widget)
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a matching key binding was found
</return>
</function>

<function name="gtk_accel_label_set_accel_closure">
<description>
Sets the closure to be monitored by this accelerator label. The closure
must be connected to an accelerator group; see gtk_accel_group_connect().

</description>
<parameters>
<parameter name="accel_label">
<parameter_description> a #GtkAccelLabel
</parameter_description>
</parameter>
<parameter name="accel_closure">
<parameter_description> the closure to monitor for accelerator changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_label">
<description>
Changes the tab label for @child. If %NULL is specified
for @tab_label, then the page will have the label &apos;page N&apos;.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the tab label widget to use, or %NULL for default tab
label.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete_mark">
<description>
Deletes @mark, so that it&apos;s no longer located anywhere in the
buffer. Removes the reference the buffer holds to the mark, so if
you haven&apos;t called g_object_ref () on the mark, it will be freed. Even
if the mark isn&apos;t freed, most operations on @mark become
invalid. There is no way to undelete a
mark. gtk_text_mark_get_deleted () will return TRUE after this
function has been called on a mark; gtk_text_mark_get_deleted ()
indicates that a mark no longer belongs to a buffer. The &quot;mark_deleted&quot;
signal will be emitted as notification after the mark is deleted.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_tag_table">
<description>
Get the #GtkTextTagTable associated with this buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> the buffer&apos;s tag table
</return>
</function>

<function name="gtk_text_tag_get_priority">
<description>
Get the tag priority.


</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return> The tag&apos;s priority.
</return>
</function>

<function name="_gtk_key_hash_add_entry">
<description>
Inserts a pair of key symbol and modifier mask into the key hash. 

</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> key symbol for this binding
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> modifiers for this binding
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value to insert in the key hash
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_set_hadjustment">
<description>
Sets the horizontal adjustment of the viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_text_btree_validate_line">
<description>
Revalidate a single line of the btree for the given view, propagate
results up through the entire tree.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextBTree
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description> line to validate
</parameter_description>
</parameter>
<parameter name="view_id">
<parameter_description> view ID for the view to validate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_change_palette_hook">
<description>
Installs a global function to be called whenever the user tries to
modify the palette in a color selection. This function should save
the new palette contents, and update the GtkSettings property
&quot;gtk-color-palette&quot; so all GtkColorSelection widgets will be modified.

This function is deprecated in favor of
gtk_color_selection_set_change_palette_with_screen_hook(), and does
not work in multihead environments.


</description>
<parameters>
<parameter name="func">
<parameter_description> a function to call when the custom palette needs saving.
</parameter_description>
</parameter>
</parameters>
<return> the previous change palette hook (that was replaced).
</return>
</function>

<function name="gtk_text_buffer_remove_tag_by_name">
<description>
Calls gtk_text_tag_table_lookup() on the buffer&apos;s tag table to
get a #GtkTextTag, then calls gtk_text_buffer_remove_tag().



</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be untagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be untagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_icon_set">
<description>
See gtk_image_new_from_icon_set() for details.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_decorated">
<description>
Returns whether the window has been set to have decorations
such as a title bar via gtk_window_set_decorated().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window has been set to have decorations
</return>
</function>

<function name="gtk_tree_view_get_search_column">
<description>
Gets the column searched on by the interactive search code.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the column the interactive search code searches in.
</return>
</function>

<function name="gtk_tree_view_column_set_sort_order">
<description>
Changes the appearance of the sort indicator. 

This &amp;lt;emphasis&amp;gt;does not&amp;lt;/emphasis&amp;gt; actually sort the model.  Use
gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
support.  This function is primarily for custom sorting behavior, and should
be used in conjunction with gtk_tree_sortable_set_sort_column() to do
that. For custom models, the mechanism will vary. 

The sort indicator changes direction to indicate normal sort or reverse sort.
Note that you must have the sort indicator enabled to see anything when 
calling this function; see gtk_tree_view_column_set_sort_indicator().

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> sort order that the sort indicator should indicate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_size_allocate">
<description>
This function is only used by #GtkContainer subclasses, to assign a size
and position to their child widgets. 


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="allocation">
<parameter_description> position and size to be allocated to @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_child_anchor">
<description>
Obtains the location of @anchor within @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> an iterator to be initialized
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> a child anchor that appears in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_set_surrounding">
<description>
Sets surrounding context around the insertion point and preedit
string. This function is expected to be called in response to the
GtkIMContext::retrieve_context signal, and will likely have no
effect if called at other times.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext 
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text surrounding the insertion point, as UTF-8.
the preedit string should not be included within
@text.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @text, or -1 if @text is nul-terminated
</parameter_description>
</parameter>
<parameter name="cursor_index">
<parameter_description> the byte index of the insertion cursor within @text.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_get_preedit_string">
<description>
Retrieve the current preedit string for the input context,
and a list of attributes to apply to the string.
This string should be displayed inserted at the insertion
point.

</description>
<parameters>
<parameter name="context">
<parameter_description>    a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>        location to store the retrieved string. The
string retrieved must be freed with g_free ().
</parameter_description>
</parameter>
<parameter name="attrs">
<parameter_description>      location to store the retrieved attribute list.
When you are done with this list, you must
unreference it with pango_attr_list_unref().
</parameter_description>
</parameter>
<parameter name="cursor_pos">
<parameter_description> location to store position of cursor (in bytes)
within the preedit string.  
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_hide_all">
<description>
Recursively hides a widget and any child widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_validate_yrange">
<description>
Ensure that a region of a #GtkTextLayout is valid. The ::changed
signal will be emitted if any lines are validated.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> iter pointing into a line that will be used as the
coordinate origin
</parameter_description>
</parameter>
<parameter name="y0_">
<parameter_description> offset from the top of the line pointed to by @anchor at
which to begin validation. (The offset here is in pixels
after validation.)
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> offset from the top of the line pointed to by @anchor at
which to end validation. (The offset here is in pixels
after validation.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_mark">
<description>
Initializes @iter with the current position of @mark.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unparent">
<description>
This function is only for use in widget implementations.
Should be called by implementations of the remove method
on #GtkContainer, to dissociate a child from the container.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_lines">
<description>
Moves @count lines backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves forward by 0 - @count lines.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of lines to move backward
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_text_iter_get_toggled_tags">
<description>
Returns a list of #GtkTextTag that are toggled on or off at this
point.  (If @toggled_on is %TRUE, the list contains tags that are
toggled on.) If a tag is toggled on at @iter, then some non-empty
range of characters following @iter has that tag applied to it.  If
a tag is toggled off, then some non-empty range following @iter
does &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; have the tag applied to it.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="toggled_on">
<parameter_description> %TRUE to get toggled-on tags
</parameter_description>
</parameter>
</parameters>
<return> tags toggled at this point
</return>
</function>

<function name="gtk_text_iter_forward_to_tag_toggle">
<description>
Moves forward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
@tag is %NULL. If no matching tag toggles are found,
returns %FALSE, otherwise %TRUE. Does not return toggles
located at @iter, only toggles after @iter. Sets @iter to
the location of the toggle, or to the end of the buffer
if no toggle is found.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether we found a tag toggle after @iter
</return>
</function>

<function name="gtk_tree_sortable_set_default_sort_func">
<description>
Sets the default comparison function used when sorting to be @sort_func.  If
the current sort column id of @sortable is
%GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using this function.

If @sort_func is %NULL, then there will be no default comparison function.
This means that once the model  has been sorted, it can&apos;t go back to the
default state. In this case, when the current sort column id of @sortable is
GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
<parameter name="sort_func">
<parameter_description> The sorting function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data to pass to the sort func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier of @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_prepend_widget">
<description>
Adds a widget to the beginning of the given toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget to add to the toolbar. 
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_settings">
<description>
Gets the settings object holding the settings (global property
settings, RC file information, etc) used for this widget.

Note that this function can only be called when the #GtkWidget
is attached to a toplevel, since the settings object is specific
to a particular #GdkScreen.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the relevant #GtkSettings object
</return>
</function>

<function name="gtk_menu_item_set_accel_path">
<description>
Set the accelerator path on @menu_item, through which runtime changes of the
menu item&apos;s accelerator caused by the user can be identified and saved to
persistant storage (see gtk_accel_map_save() on this).
To setup a default accelerator for this menu item, call
gtk_accel_map_add_entry() with the same @accel_path.
See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
and gtk_menu_set_accel_path() for a more convenient variant of this function.

This function is basically a convenience wrapper that handles calling
gtk_widget_set_accel_path() with the appropriate accelerator group for
the menu item.

Note that you do need to set an accelerator on the parent menu with
gtk_menu_set_accel_group() for this to work.

</description>
<parameters>
<parameter name="menu_item">
<parameter_description>  a valid #GtkMenuItem
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> accelerator path, corresponding to this menu item&apos;s
functionality, or %NULL to unset the current path.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_set_font">
<description>
Sets the #GdkFont to use for a given style. This is
meant only as a replacement for direct access to style-&amp;gt;font
and should not be used in new code. New code should
use style-&amp;gt;font_desc instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont, or %NULL to use the #GdkFont corresponding
to style-&amp;gt;font_desc.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_lookup_entry">
<description>
Looks up the accelerator entry for @accel_path and fills in @key.

</description>
<parameters>
<parameter name="accel_path">
<parameter_description>  a valid accelerator path
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description>         the accelerator key to be filled in (optional)
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>     %TRUE if @accel_path is known, %FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_send_expose">
<description>
Very rarely-used function. This function is used to emit
an expose event signals on a widget. This function is not
normally used directly. The only time it is used is when
propagating an expose event to a child %NO_WINDOW widget, and
that is normally done using gtk_container_propagate_expose().

If you want to force an area of a window to be redrawn, 
use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
To cause the redraw to be done immediately, follow that call
with a call to gdk_window_process_updates().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a expose #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> return from the event signal emission (%TRUE if the event was handled)
</return>
</function>

<function name="gtk_tree_path_free">
<description>
Frees @path.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_find_char">
<description>
Advances @iter, calling @pred on each character. If
@pred returns %TRUE, returns %TRUE and stops scanning.
If @pred never returns %TRUE, @iter is set to @limit if
@limit is non-%NULL, otherwise to the end iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="pred">
<parameter_description> a function to be called on each character
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for @pred
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> search limit, or %NULL for none 
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_tree_view_map_expanded_rows">
<description>
Calls @func on all expanded rows.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to be called
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to be passed to the function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_file_selection_get_filename">
<description>
This function returns the selected filename in the on-disk encoding
(see g_filename_from_utf8()), which may or may not be the same as that
used by GTK+ (UTF-8). To convert to UTF-8, call g_filename_to_utf8().
The returned string points to a statically allocated buffer and
should be copied if you plan to keep it around.

If no file is selected then the selected directory path is returned.


</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
</parameters>
<return> currently-selected filename in the on-disk encoding.
</return>
</function>

<function name="gtk_item_factory_set_translate_func">
<description>
Sets a function to be used for translating the path elements before they
are displayed. 

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the #GtkTranslateFunc function to be used to translate path elements 
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @func and @notify
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GtkDestroyNotify function to be called when @ifactory is 
destroyed and when the translation function is changed again
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_select_region">
<description>
Selects a range of characters in the label, if the label is selectable.
See gtk_label_set_selectable(). If the label is not selectable,
this function has no effect. If @start_offset or
@end_offset are -1, then the end of the label will be substituted.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> start offset (in characters not bytes)
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> end offset (in characters not bytes)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_row_has_child_toggled">
<description>
Emits the &quot;row_has_child_toggled&quot; signal on @tree_model.  This should be
called by models after the child state of a node changes.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the changed row
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the changed row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_interactive_at_cursor">
<description>
Calls gtk_text_buffer_insert_interactive () at the cursor
position.

@default_editable indicates the editability of text that doesn&apos;t
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> text in UTF-8 format
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text in bytes, or -1
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of buffer
</parameter_description>
</parameter>
</parameters>
<return> whether text was actually inserted
</return>
</function>

<function name="gtk_clipboard_get">
<description>
Returns the clipboard object for the given selection.
See gtk_clipboard_get_for_display() for complete details.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GdkAtom which identifies the clipboard
to use.
</parameter_description>
</parameter>
</parameters>
<return> the appropriate clipboard object. If no
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent for all time and
cannot be freed.
</return>
</function>

<function name="gtk_tree_view_column_get_width">
<description>
Returns the current size of @tree_column in pixels.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The current width of @tree_column.
</return>
</function>

<function name="gtk_text_iter_forward_word_ends">
<description>
Calls gtk_text_iter_forward_word_end() up to @count times.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of times to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_viewport_set_vadjustment">
<description>
Sets the vertical adjustment of the viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_get_children">
<description>
Returns the the container&apos;s non-internal children. See
gtk_container_forall() for details on what constitutes an &quot;internal&quot; child. 


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated list of the container&apos;s non-internal children.
</return>
</function>

<function name="gtk_notebook_get_current_page">
<description>
Returns the page number of the current page.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the index (starting from 0) of the current
page in the notebook. If the notebook has no pages, then
-1 will be returned.
</return>
</function>

<function name="gtk_text_view_buffer_to_window_coords">
<description>
Converts coordinate (@buffer_x, @buffer_y) to coordinates for the window
@win, and stores the result in (@window_x, @window_y). 

Note that you can&apos;t convert coordinates for a nonexisting window (see 
gtk_text_view_set_border_window_size()).

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="win">
<parameter_description> a #GtkTextWindowType except #GTK_TEXT_WINDOW_PRIVATE
</parameter_description>
</parameter>
<parameter name="buffer_x">
<parameter_description> buffer x coordinate
</parameter_description>
</parameter>
<parameter name="buffer_y">
<parameter_description> buffer y coordinate
</parameter_description>
</parameter>
<parameter name="window_x">
<parameter_description> window x coordinate return location
</parameter_description>
</parameter>
<parameter name="window_y">
<parameter_description> window y coordinate return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_stick">
<description>
Asks to stick @window, which means that it will appear on all user
desktops. Note that you shouldn&apos;t assume the window is definitely
stuck afterward, because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could unstick it
again, and some window managers do not support sticking
windows. But normally the window will end up stuck. Just don&apos;t
write code that crashes if not.

It&apos;s permitted to call this function before showing a window.

You can track stickiness via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_set_with_data">
<description>
Virtually sets the contents of the specified clipboard by providing
a list of supported formats for the clipboard data and a function
to call to get the actual data when it is requested.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description>  a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description>    array containing information about the available forms for the
clipboard data
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description>  number of elements in @targets
</parameter_description>
</parameter>
<parameter name="get_func">
<parameter_description>   function to call to get the actual clipboard data
</parameter_description>
</parameter>
<parameter name="clear_func">
<parameter_description> when the clipboard contents are set again, this function will
be called, and @get_func will not be subsequently called.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description>  user data to pass to @get_func and @clear_func.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the clipboard data succeeded. If setting
the clipboard data failed the provided callback functions
will be ignored.
</return>
</function>

<function name="gtk_dialog_add_buttons">
<description>
Adds more buttons, same as calling gtk_dialog_add_button()
repeatedly.  The variable argument list should be %NULL-terminated
as with gtk_dialog_new_with_buttons(). Each button must have both
text and response ID.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> button text or stock ID
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for first button, then more text-response_id pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_iter_at_line_offset">
<description>
Obtains an iterator pointing to @char_offset within the given
line. The @char_offset must exist, offsets off the end of the line
are not allowed. Note &amp;lt;emphasis&amp;gt;characters&amp;lt;/emphasis&amp;gt;, not bytes;
UTF-8 may encode one character as multiple bytes.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number counting from 0
</parameter_description>
</parameter>
<parameter name="char_offset">
<parameter_description> char offset from start of line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_set_icon">
<description>
Sets the icon that will be used for drags from a particular widget
from a pixmap/mask. GTK+ retains references for the arguments, and 
will release them when they are no longer needed.
Use gtk_drag_source_set_icon_pixbuf() instead.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> the colormap of the icon
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> the image data for the icon
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the transparency mask for an image.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_sensitive">
<description>
Sets the sensitivity of a widget. A widget is sensitive if the user
can interact with it. Insensitive widgets are &quot;grayed out&quot; and the
user can&apos;t interact with them. Insensitive widgets are known as
&quot;inactive&quot;, &quot;disabled&quot;, or &quot;ghosted&quot; in some other toolkits.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="sensitive">
<parameter_description> %TRUE to make the widget sensitive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_new">
<description>
Creates a new #GtkItemFactory.

</description>
<parameters>
<parameter name="container_type">
<parameter_description> the kind of menu to create; can be
#GTK_TYPE_MENU_BAR, #GTK_TYPE_MENU or #GTK_TYPE_OPTION_MENU
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the factory path of the new item factory, a string of the form 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup to which the accelerators for the
menu items will be added, or %NULL to create a new one
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkItemFactory
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_im_module_list">
<description>
List all available types of input method context

</description>
<parameters>
<parameter name="contexts">
<parameter_description> location to store an array of pointers to #GtkIMContextInfo
this array should be freed with g_free() when you are finished.
The structures it points are statically allocated and should
not be modified or freed.
</parameter_description>
</parameter>
<parameter name="n_contexts">
<parameter_description> the length of the array stored in @contexts
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_get_widget">
<description>
Obtains the widget which corresponds to @path. 

If the widget corresponding to @path is a menu item which opens a 
submenu, then the submenu is returned. If you are interested in the menu 
item, use gtk_item_factory_get_item() instead.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to the widget
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the widget for the given path, or %NULL if @path doesn&apos;t lead
to a widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_state_wildcarded">
<description>
Gets the value set by gtk_icon_source_set_state_wildcarded().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this icon source is a base for any widget state variant
</return>
</function>

<function name="gtk_ruler_get_range">
<description>
Retrieves values indicating the range and current position of a #GtkRuler.
See gtk_ruler_set_range().

</description>
<parameters>
<parameter name="ruler">
<parameter_description> a #GtkRuler
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> location to store lower limit of the ruler, or %NULL
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> location to store upper limit of the ruler, or %NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> location to store the current position of the mark on the ruler, or %NULL
</parameter_description>
</parameter>
<parameter name="max_size">
<parameter_description> location to store the maximum size of the ruler used when calculating
the space to leave for the text, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_begin_move_drag">
<description>
Starts moving a window. This function is used if an application has
window movement grips. When GDK can support it, the window movement
will be done using the standard mechanism for the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; or windowing
system. Otherwise, GDK will try to emulate window movement,
potentially not all that well, depending on the windowing system.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> mouse button that initiated the drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> X position where the user clicked to initiate the drag, in root window coordinates
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> Y position where the user clicked to initiate the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp from the click event that initiated the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_path_at_pos">
<description>
Finds the path at the point (@x, @y), relative to widget coordinates.  That
is, @x and @y are relative to an events coordinates. @x and @y must come
from an event on the @tree_view only where event-&amp;gt;window ==
gtk_tree_view_get_bin (). It is primarily for things like popup menus.
If @path is non-%NULL, then it will be filled with the #GtkTreePath at that
point.  This path should be freed with gtk_tree_path_free().  If @column
is non-%NULL, then it will be filled with the column at that point.
@cell_x and @cell_y return the coordinates relative to the cell background
(i.e. the @background_area passed to gtk_cell_renderer_render()).  This
function is only meaningful if @tree_view is realized.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The x position to be identified.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The y position to be identified.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A pointer to a #GtkTreePath pointer to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> A pointer to a #GtkTreeViewColumn pointer to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="cell_x">
<parameter_description> A pointer where the X coordinate relative to the cell can be placed, or %NULL
</parameter_description>
</parameter>
<parameter name="cell_y">
<parameter_description> A pointer where the Y coordinate relative to the cell can be placed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a row exists at that coordinate.
</return>
</function>

<function name="gtk_tree_selection_get_mode">
<description>
Gets the selection mode for @selection. See
gtk_tree_selection_set_mode().


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GtkTreeSelection
</parameter_description>
</parameter>
</parameters>
<return> the current selection mode
</return>
</function>

<function name="gtk_text_attributes_ref">
<description>
Increments the reference count on @values.

</description>
<parameters>
<parameter name="values">
<parameter_description> a #GtkTextAttributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_multicontext_new">
<description>
Creates a new #GtkIMMulticontext.


</description>
<parameters>
</parameters>
<return> a new #GtkIMMulticontext.
</return>
</function>

<function name="gtk_paint_string">
<description>
Draws a text string on @window with the given parameters.

This function is deprecated, use gtk_paint_layout() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> clip rectangle
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_editable_start_editing">
<description>
Begins editing on a @cell_editable.  @event is the #GdkEvent that began the
editing process.  It may be %NULL, in the instance that editing was initiated
through programatic means.

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> A #GtkCellEditable
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> A #GdkEvent, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paned_get_position">
<description>
Obtains the position of the divider between the two panes.


</description>
<parameters>
<parameter name="paned">
<parameter_description> a #GtkPaned widget
</parameter_description>
</parameter>
</parameters>
<return> position of the divider
</return>
</function>

<function name="_gtk_window_set_has_toplevel_focus">
<description>
Internal function that sets whether the keyboard focus for the
toplevel window (taking into account inter-process embedding.)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="has_toplevel_focus">
<parameter_description> %TRUE if the in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_value">
<description>
Sets the current value of the range; if the value is outside the
minimum or maximum range values, it will be clamped to fit inside
them. The range emits the &quot;value_changed&quot; signal if the value
changes.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value of the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_scale_format_value">
<description>
Emits &quot;format_value&quot; signal to format the value, if no user
signal handlers, falls back to a default format.


</description>
<parameters>
<parameter name="scale">
<parameter_description> a #GtkScale
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> adjustment value
</parameter_description>
</parameter>
</parameters>
<return> formatted value
</return>
</function>

<function name="gtk_tree_drag_source_drag_data_get">
<description>
Asks the #GtkTreeDragSource to fill in @selection_data with a
representation of the row at @path. @selection_data-&amp;gt;target gives
the required type of the data.  Should robustly handle a @path no
longer found in the model!


</description>
<parameters>
<parameter name="drag_source">
<parameter_description> a #GtkTreeDragSource
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row that was dragged
</parameter_description>
</parameter>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData to fill with data from the dragged row
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if data of the required type was provided 
</return>
</function>

<function name="gtk_im_context_get_surrounding">
<description>
Retrieves context around the insertion point. Input methods
typically want context in order to constrain input text based on
existing text; this is important for languages such as Thai where
only some sequences of characters are allowed.

This function is implemented by emitting the
GtkIMContext::retrieve_context signal on the input method; in
response to this signal, a widget should provide as much context as
is available, up to an entire paragraph, by calling
gtk_im_context_set_surrounding(). Note that there is no obligation
for a widget to respond to the ::retrieve_context signal, so input
methods must be prepared to function without context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> location to store a UTF-8 encoded string of text
holding context around the insertion point.
If the function returns %TRUE, then you must free
the result stored in this location with g_free().
</parameter_description>
</parameter>
<parameter name="cursor_index">
<parameter_description> location to store byte index of the insertion cursor
within @text.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if surrounding text was provided; in this case
you must free the result stored in *text.
</return>
</function>

<function name="_gtk_scrolled_window_get_spacing">
<description>
Gets the spacing between the scrolled window&apos;s scrollbars and
the scrolled widget. Used by GtkCombo


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a scrolled window
</parameter_description>
</parameter>
</parameters>
<return> the spacing, in pixels.
</return>
</function>

<function name="gtk_spin_button_set_digits">
<description>
Set the precision to be displayed by @spin_button. Up to 20 digit precision
is allowed.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="digits">
<parameter_description> the number of digits to be displayed for the spin button&apos;s value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_size">
<description>
Sets the icon size this icon source is intended to be used
with.

Setting the icon size on an icon source makes no difference
if the size is wildcarded. Therefore, you should usually
call gtk_icon_source_set_size_wildcarded() to un-wildcard it
in addition to calling this function.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> icon size this source applies to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_get_hadjustment">
<description>
Returns the horizontal adjustment of the viewport.


</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
</parameters>
<return> the horizontal adjustment of @viewport.
</return>
</function>

<function name="gtk_text_buffer_get_selection_bound">
<description>
Returns the mark that represents the selection bound.  Equivalent
to calling gtk_text_buffer_get_mark () to get the mark named
&quot;selection_bound&quot;, but very slightly more efficient, and involves
less typing.

The currently-selected text in @buffer is the region between the
&quot;selection_bound&quot; and &quot;insert&quot; marks. If &quot;selection_bound&quot; and
&quot;insert&quot; are in the same place, then there is no current selection.
gtk_text_buffer_get_selection_bounds() is another convenient function
for handling the selection, if you just want to know whether there&apos;s a
selection and what its bounds are.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> selection bound mark
</return>
</function>

<function name="gtk_window_present">
<description>
Presents a window to the user. This may mean raising the window
in the stacking order, deiconifying it, moving it to the current
desktop, and/or giving it the keyboard focus, possibly dependent
on the user&apos;s platform, window manager, and preferences.

If @window is hidden, this function calls gtk_widget_show()
as well.

This function should be used when the user tries to open a window
that&apos;s already open. Say for example the preferences dialog is
currently open, and the user chooses Preferences from the menu
a second time; use gtk_window_present() to move the already-open dialog
where the user can see it.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_style_get_property">
<description>
Gets the value of a style property of @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of a style property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to return the property value 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_line_index">
<description>
Returns the number of bytes from the start of the
line to the given @iter, not counting bytes that
are invisible due to tags with the &quot;invisible&quot; flag
toggled on.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> byte index of @iter with respect to the start of the line
</return>
</function>

<function name="gtk_accel_group_unlock">
<description>
Undoes the last call to gtk_accel_group_lock() on this @accel_group.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_copy">
<description>
Copies a #GtkTreeRowReference.


</description>
<parameters>
<parameter name="reference">
<parameter_description> a #GtkTreeRowReference
</parameter_description>
</parameter>
</parameters>
<return> a copy of @reference.

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_scroll_to_point">
<description>
Scrolls the tree view such that the top-left corner of the visible
area is @tree_x, @tree_y, where @tree_x and @tree_y are specified
in tree window coordinates.  The @tree_view must be realized before
this function is called.  If it isn&apos;t, you probably want to be
using gtk_tree_view_scroll_to_cell().

If either @tree_x or @tree_y are -1, then that direction isn&apos;t scrolled.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tree_x">
<parameter_description> X coordinate of new top-left pixel of visible area, or -1
</parameter_description>
</parameter>
<parameter name="tree_y">
<parameter_description> Y coordinate of new top-left pixel of visible area, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_pixbuf">
<description>
Retrieves the source pixbuf, or %NULL if none is set.
The reference count on the pixbuf is not incremented.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> source pixbuf
</return>
</function>

<function name="gtk_style_attach">
<description>
Attaches a style to a window; this process allocates the
colors and creates the GC&apos;s for the style - it specializes
it to a particular visual and colormap. The process may 
involve the creation of a new style if the style has already 
been attached to a window with a different style and colormap.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> Either @style, or a newly-created #GtkStyle.
If the style is newly created, the style parameter
will be dereferenced, and the new style will have
a reference count belonging to the caller.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_type_hint">
<description>
Gets the type hint for this window. See gtk_window_set_type_hint().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the type hint for @window.
</return>
</function>

<function name="gtk_text_buffer_create_child_anchor">
<description>
This is a convenience function which simply creates a child anchor
with gtk_text_child_anchor_new() and inserts it into the buffer
with gtk_text_buffer_insert_child_anchor(). The new anchor is
owned by the buffer; no reference count is returned to
the caller of gtk_text_buffer_create_child_anchor().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location in the buffer
</parameter_description>
</parameter>
</parameters>
<return> the created child anchor
</return>
</function>

<function name="gtk_accelerator_set_default_mod_mask">
<description>
Sets the modifiers that will be considered significant for keyboard
accelerators. The default mod mask is #GDK_CONTROL_MASK |
#GDK_SHIFT_MASK | #GDK_MOD1_MASK, that is, Control, Shift, and Alt.
Other modifiers will by default be ignored by #GtkAccelGroup.
You must include at least the three default modifiers in any
value you pass to this function.

The default mod mask should be changed on application startup,
before using any accelerator groups.

</description>
<parameters>
<parameter name="default_mod_mask">
<parameter_description> accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_new">
<description>
Creates a #GtkTextAttributes, which describes
a set of properties on some text.


</description>
<parameters>
</parameters>
<return> a new #GtkTextAttributes
</return>
</function>

<function name="gtk_widget_get_display">
<description>
Get the #GdkDisplay for the toplevel window associated with
this widget. This function can only be called after the widget
has been added to a widget hierarchy with a #GtkWindow at the top.

In general, you should only create display specific
resources when a widget has been realized, and you should
free those resources when the widget is unrealized.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay for the toplevel for this widget.

Since: 2.2
</return>
</function>

<function name="gtk_text_iter_copy">
<description>
Creates a dynamically-allocated copy of an iterator. This function
is not useful in applications, because iterators can be copied with a
simple assignment (&amp;lt;literal&amp;gt;GtkTextIter i = j;&amp;lt;/literal&amp;gt;). The
function is used by language bindings.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a copy of the @iter, free with gtk_text_iter_free ()
</return>
</function>

<function name="gtk_window_reshow_with_initial_size">
<description>
Hides @window, then reshows it, resetting the
default size and position of the window. Used
by GUI builders only.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_box_get_homogeneous">
<description>
Returns whether the box is homogeneous (all children are the
same size). See gtk_box_set_homogeneous ().


</description>
<parameters>
<parameter name="box">
<parameter_description> a #GtkBox
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the box is homogeneous.
</return>
</function>

<function name="gtk_im_context_simple_add_table">
<description>
Adds an additional table to search to the input context.
Each row of the table consists of @max_seq_len key symbols
followed by two #guint16 interpreted as the high and low
words of a #gunicode value. Tables are searched starting
from the last added.

The table must be sorted in dictionary order on the
numeric value of the key symbol fields. (Values beyond
the length of the sequence should be zero.)

</description>
<parameters>
<parameter name="context_simple">
<parameter_description> A #GtkIMContextSimple
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the table 
</parameter_description>
</parameter>
<parameter name="max_seq_len">
<parameter_description> Maximum length of a sequence in the table
(cannot be greater than #GTK_MAX_COMPOSE_LEN)
</parameter_description>
</parameter>
<parameter name="n_seqs">
<parameter_description> number of sequences in the table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_inserted">
<description>
Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the &quot;row_inserted&quot; signal.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GObject
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The row position that was inserted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_shape_combine_mask">
<description>
Sets a shape for this widget&apos;s GDK window. This allows for
transparent windows etc., see gdk_window_shape_combine_mask()
for more information.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="shape_mask">
<parameter_description> shape to be added, or %NULL to remove an existing shape. 
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of shape mask with respect to @window.
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of shape mask with respect to @window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_role">
<description>
Returns the role of the window. See gtk_window_set_role() for
further explanation.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the role of the window if set, or %NULL. The
returned is owned by the widget and must not be modified
or freed.
</return>
</function>

<function name="gtk_toolbar_unset_style">
<description>
Unsets a toolbar style set with gtk_toolbar_set_style(), so that
user preferences will be used to determine the toolbar style.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_key_hash_free">
<description>
Destroys a key hash created with gtk_key_hash_new()

</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_for_text">
<description>
Requests the contents of the clipboard as text and converts
the result to UTF-8 if necessary. This function waits for
the data to be received using the main loop, so events,
timeouts, etc, may be dispatched during the wait.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated UTF-8 string which must
be freed with g_free(), or %NULL if retrieving
the selection data failed. (This could happen
for various reasons, in particular if the
clipboard was empty or if the contents of the
clipboard could not be converted into text form.)
</return>
</function>

<function name="gtk_window_move">
<description>
Asks the &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; to move
@window to the given position.  Window managers are free to ignore
this; most window managers ignore requests for initial window
positions (instead using a user-defined placement algorithm) and
honor requests after the window has already been shown.

Note: the position is the position of the gravity-determined
reference point for the window. The gravity determines two things:
first, the location of the reference point in root window
coordinates; and second, which point on the window is positioned at
the reference point.

By default the gravity is #GDK_GRAVITY_NORTH_WEST, so the reference
point is simply the @x, @y supplied to gtk_window_move(). The
top-left corner of the window decorations (aka window frame or
border) will be placed at @x, @y.  Therefore, to position a window
at the top left of the screen, you want to use the default gravity
(which is #GDK_GRAVITY_NORTH_WEST) and move the window to 0,0.

To position a window at the bottom right corner of the screen, you
would set #GDK_GRAVITY_SOUTH_EAST, which means that the reference
point is at @x + the window width and @y + the window height, and
the bottom-right corner of the window border will be placed at that
reference point. So, to place a window in the bottom right corner
you would first set gravity to south east, then write:
&amp;lt;literal&amp;gt;gtk_window_move (window, gdk_screen_width () - window_width,
gdk_screen_height () - window_height)&amp;lt;/literal&amp;gt;.

The extended window manager hints specification at &amp;lt;ulink 
url=&quot;http://www.freedesktop.org/standards/wm-spec.html&quot;&amp;gt;
http://www.freedesktop.org/standards/wm-spec.html&amp;lt;/ulink&amp;gt; has a 
nice table of gravities in the &quot;implementation notes&quot; section.

The gtk_window_get_position() documentation may also be relevant.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate to move window to
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate to move window to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_inverted">
<description>
Gets the value set by gtk_range_set_inverted().


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the range is inverted
</return>
</function>

<function name="gtk_window_set_resizable">
<description>
Sets whether the user can resize a window. Windows are user resizable
by default.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> %TRUE if the user can resize this window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_select_all">
<description>
Selects all the nodes.  @selection is must be set to #GTK_SELECTION_MULTIPLE
mode.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_fixed_set_has_window">
<description>
Sets whether a #GtkFixed widget is created with a separate
#GdkWindow for widget-&amp;gt;window or not. (By default, it will be
created with no separate #GdkWindow). This function must be called
while the #GtkFixed is not realized, for instance, immediately after the
window is created.

</description>
<parameters>
<parameter name="fixed">
<parameter_description> a #GtkFixed
</parameter_description>
</parameter>
<parameter name="has_window">
<parameter_description> %TRUE if a separate window should be created
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_get_label">
<description>
If the frame&apos;s label widget is a #GtkLabel, return the
text in the label widget. (The frame will have a #GtkLabel
for the label widget if a non-%NULL argument was passed
to gtk_frame_new().)


</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
</parameters>
<return> the text in the label, or %NULL if there
was no label widget or the lable widget was not
a #GtkLabel. This string is owned by GTK+ and
must not be modified or freed.
</return>
</function>

<function name="gtk_draw_diamond">
<description>
Draws a diamond in the given rectangle on @window using the given parameters.

This function is deprecated, use gtk_paint_diamond() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle to draw the diamond in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle to draw the diamond in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_size_group_set_mode">
<description>
Sets the #GtkSizeGroupMode of the size group. The mode of the size
group determines whether the widgets in the size group should
all have the same horizontal requisition (%GTK_SIZE_GROUP_MODE_HORIZONTAL)
all have the same vertical requisition (%GTK_SIZE_GROUP_MODE_VERTICAL),
or should all have the same requisition in both directions
(%GTK_SIZE_GROUP_MODE_BOTH).

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to set for the size group.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_begin_user_action">
<description>
Called to indicate that the buffer operations between here and a
call to gtk_text_buffer_end_user_action() are part of a single
user-visible operation. The operations between
gtk_text_buffer_begin_user_action() and
gtk_text_buffer_end_user_action() can then be grouped when creating
an undo stack. #GtkTextBuffer maintains a count of calls to
gtk_text_buffer_begin_user_action() that have not been closed with
a call to gtk_text_buffer_end_user_action(), and emits the &quot;begin_user_action&quot;
and &quot;end_user_action&quot; signals only for the outermost pair of calls.
This allows you to build user actions from other user actions.

The &quot;interactive&quot; buffer mutation functions, such as
gtk_text_buffer_insert_interactive(), automatically call begin/end
user action around the buffer operations they perform, so there&apos;s
no need to add extra calls if you user action consists solely of a
single call to one of those functions.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_menu_bar_cycle_focus">
<description>
Move the focus between menubars in the toplevel.

</description>
<parameters>
<parameter name="menubar">
<parameter_description> a #GtkMenuBar
</parameter_description>
</parameter>
<parameter name="dir">
<parameter_description> direction in which to cycle the focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_is_text_available">
<description>
Test to see if there is text available to be pasted
This is done by requesting the TARGETS atom and checking
if it contains any of the names: STRING, TEXT, COMPOUND_TEXT,
UTF8_STRING. This function waits for the data to be received
using the main loop, so events, timeouts, etc, may be dispatched
during the wait.

This function is a little faster than calling
gtk_clipboard_wait_for_text() since it doesn&apos;t need to retrieve
the actual text.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> %TRUE is there is text available, %FALSE otherwise.
</return>
</function>

<function name="gtk_tree_model_sort_convert_child_path_to_path">
<description>
Converts @child_path to a path relative to @tree_model_sort.  That is,
@child_path points to a path in the child model.  The returned path will
point to the same row in the sorted model.  If @child_path isn&apos;t a valid path
on the child model, then %NULL is returned.


</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="child_path">
<parameter_description> A #GtkTreePath to convert
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreePath, or %NULL
</return>
</function>

<function name="gtk_text_iter_is_cursor_position">
<description>
See gtk_text_iter_forward_cursor_position() or #PangoLogAttr or
pango_break() for details on what a cursor position is.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cursor can be placed at @iter
</return>
</function>

<function name="gtk_tree_model_sort_convert_path_to_child_path">
<description>
Converts @sorted_path to a path on the child model of @tree_model_sort.  That
is, @sorted_path points to a location in @tree_model_sort.  The returned path
will point to the same location in the model not being sorted.  If @sorted_path 
does not point to a location in the child model, %NULL is returned.


</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="sorted_path">
<parameter_description> A #GtkTreePath to convert
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreePath, or %NULL
</return>
</function>

<function name="gtk_widget_get_child_requisition">
<description>
This function is only for use in widget implementations. Obtains
@widget-&amp;gt;requisition, unless someone has forced a particular
geometry on the widget (e.g. with gtk_widget_set_usize()), in which
case it returns that geometry instead of the widget&apos;s requisition.

This function differs from gtk_widget_size_request() in that
it retrieves the last size request value from @widget-&amp;gt;requisition,
while gtk_widget_size_request() actually calls the &quot;size_request&quot; method
on @widget to compute the size request and fill in @widget-&amp;gt;requisition,
and only then returns @widget-&amp;gt;requisition.

Because this function does not call the &quot;size_request&quot; method, it
can only be used when you know that @widget-&amp;gt;requisition is
up-to-date, that is, gtk_widget_size_request() has been called
since the last time a resize was queued. In general, only container
implementations have this information; applications should use
gtk_widget_size_request().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> a #GtkRequisition to be filled in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_remove_tag">
<description>
Emits the &quot;remove_tag&quot; signal. The default handler for the signal
removes all occurrences of @tag from the given range. @start and
@end don&apos;t have to be in order.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be untagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be untagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_current_page">
<description>
Switches to the page number @page_num.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> index of the page to switch to, starting from 0.
If negative, the last page will be used. If greater
than the number of pages in the notebook, nothing
will be done.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_key_hash_new">
<description>
Create a new key hash object for doing binding resolution. 


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="item_destroy_notify">
<parameter_description> function to be called when items are removed
from the hash or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the newly created object. Free with _gtk_key_hash_free().
</return>
</function>

<function name="gtk_notebook_prepend_page_menu">
<description>
Prepends a page to @notebook, specifying the widget to use as the
label in the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu, if that is enabled. If %NULL, and @tab_label
is a #GtkLabel or %NULL, then the menu label will be
a newly created label with the same text as @tab_label;
If @tab_label is not a #GtkLabel, @menu_label must be
specified if the page-switch menu is to be used.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_menu_label_text">
<description>
Retrieves the text of the menu label for the page containing
@child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget of a page of the notebook.
</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label, or %NULL if the
widget does not have a menu label other than
the default menu label, or the menu label widget
is not a #GtkLabel. The string is owned by
the widget and must not be freed.
</return>
</function>

<function name="gtk_text_buffer_get_iter_at_line_index">
<description>
Obtains an iterator pointing to @byte_index within the given line.
@byte_index must be the start of a UTF-8 character, and must not be
beyond the end of the line.  Note &amp;lt;emphasis&amp;gt;bytes&amp;lt;/emphasis&amp;gt;, not
characters; UTF-8 may encode one character as multiple bytes.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize 
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number counting from 0
</parameter_description>
</parameter>
<parameter name="byte_index">
<parameter_description> byte index from start of line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_class_find_style_property">
<description>
Finds a style property of a widget class by name.

Since: 2.2

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GtkWidgetClass
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the style property to find
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the #GParamSpec of the style property or %NULL if @class has no
style property with that name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_order">
<description>
Swaps the value of @first and @second if @second comes before
@first in the buffer. That is, ensures that @first and @second are
in sequence. Most text buffer functions that take a range call this
automatically on your behalf, so there&apos;s no real reason to call it yourself
in those cases. There are some exceptions, such as gtk_text_iter_in_range(),
that expect a pre-sorted range.


</description>
<parameters>
<parameter name="first">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="second">
<parameter_description> another #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_role">
<description>
This function is only useful on X11, not with other GTK+ targets.

In combination with the window title, the window role allows a
&amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; to identify &quot;the
same&quot; window when an application is restarted. So for example you
might set the &quot;toolbox&quot; role on your app&apos;s toolbox window, so that
when the user restarts their session, the window manager can put
the toolbox back in the same place.

If a window already has a unique title, you don&apos;t need to set the
role, since the WM can use the title to identify the window when
restoring the session.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> unique identifier for the window to be used when restoring a session
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_size_register">
<description>
Registers a new icon size, along the same lines as #GTK_ICON_SIZE_MENU,
etc. Returns the integer value for the size.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of the icon size
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the icon width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the icon height
</parameter_description>
</parameter>
</parameters>
<return> integer value representing the size

</return>
</function>

<function name="gtk_text_mark_get_deleted">
<description>
Returns %TRUE if the mark has been removed from its buffer
with gtk_text_buffer_delete_mark(). Marks can&apos;t be used
once deleted.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> whether the mark is deleted
</return>
</function>

<function name="gtk_selection_clear">
<description>
The default handler for the GtkWidget::selection_clear_event
signal. Instead of calling this function, chain up from
your selection_clear_event handler. Calling this function
from any other context is illegal. This function will
be deprecated in future versions of GTK+.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was handled, otherwise false

Since: 2.2
</return>
</function>

<function name="gtk_list_store_remove">
<description>
Removes the given row from the list store.  After being removed, 
@iter is set to be the next valid row, or invalidated if it pointed 
to the last row in @list_store.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is valid, %FALSE if not.
</return>
</function>

<function name="gtk_notebook_prepend_page">
<description>
Prepends a page to @notebook.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_line_wrap">
<description>
Returns whether lines in the label are automatically wrapped. See gtk_label_set_line_wrap ().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the lines of the label are automatically wrapped.
</return>
</function>

<function name="gtk_tree_view_tree_to_widget_coords">
<description>
Converts tree coordinates (coordinates in full scrollable area of the tree)
to widget coordinates.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="tx">
<parameter_description> tree X coordinate
</parameter_description>
</parameter>
<parameter name="ty">
<parameter_description> tree Y coordinate
</parameter_description>
</parameter>
<parameter name="wx">
<parameter_description> return location for widget X coordinate
</parameter_description>
</parameter>
<parameter name="wy">
<parameter_description> return location for widget Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_insert">
<description>
Returns the mark that represents the cursor (insertion point).
Equivalent to calling gtk_text_buffer_get_mark () to get the mark
named &quot;insert&quot;, but very slightly more efficient, and involves less
typing.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return> insertion point mark
</return>
</function>

<function name="gtk_text_view_get_border_window_size">
<description>
Gets the width of the specified border window. See
gtk_text_view_set_border_window_size().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> window to return size from
</parameter_description>
</parameter>
</parameters>
<return> width of window
</return>
</function>

<function name="gtk_widget_destroy">
<description>
Destroys a widget. Equivalent to gtk_object_destroy(), except that
you don&apos;t have to cast the widget to #GtkObject. When a widget is
destroyed, it will break any references it holds to other objects.
If the widget is inside a container, the widget will be removed
from the container. If the widget is a toplevel (derived from
#GtkWindow), it will be removed from the list of toplevels, and the
reference GTK+ holds to it will be removed. Removing a
widget from its container or the list of toplevels results in the
widget being finalized, unless you&apos;ve added additional references
to the widget with g_object_ref().

In most cases, only toplevel widgets (windows) require explicit
destruction, because when you destroy a toplevel its children will
be destroyed as well.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_is_ancestor">
<description>
Returns %TRUE if @descendant is a descendant of @path.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> another #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @descendant is contained inside @path
</return>
</function>

<function name="gtk_accel_group_disconnect_key">
<description>
Removes an accelerator previously installed through
gtk_accel_group_connect().

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install an accelerator in
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>        key value of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>       modifier combination of the accelerator
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>          %TRUE if there was an accelerator which could be 
removed, %FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_paste_clipboard">
<description>
Pastes the contents of a clipboard at the insertion point, or at @override_location.
(Note: pasting is asynchronous, that is, we&apos;ll ask for the paste data and
return, and at some point later after the main loop runs, the paste
data will be inserted.)


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard to paste from
</parameter_description>
</parameter>
<parameter name="override_location">
<parameter_description> location to insert pasted text, or %NULL for at the cursor
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> whether the buffer is editable by default
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new">
<description>
Creates a new empty #GtkImage widget.


</description>
<parameters>
</parameters>
<return> a newly created #GtkImage widget. 
</return>
</function>

<function name="gtk_icon_size_from_name">
<description>
Looks up the icon size associated with @name.

</description>
<parameters>
<parameter name="name">
<parameter_description> the name to look up.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the icon size with the given name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_find_pixmap_in_path">
<description>
Looks up a file in pixmap path for the specified #GtkSettings.
If the file is not found, it outputs a warning message using
g_warning() and returns %NULL.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings
</parameter_description>
</parameter>
<parameter name="scanner">
<parameter_description> Scanner used to get line number information for the
warning message, or %NULL
</parameter_description>
</parameter>
<parameter name="pixmap_file">
<parameter_description> name of the pixmap file to locate.
</parameter_description>
</parameter>
</parameters>
<return> the filename. 
</return>
</function>

<function name="gtk_image_new_from_animation">
<description>
Creates a #GtkImage displaying the given animation.
The #GtkImage does not assume a reference to the
animation; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.


</description>
<parameters>
<parameter name="animation">
<parameter_description> an animation
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage widget
</return>
</function>

<function name="gtk_tree_view_expand_to_path">
<description>
Expands the row at @path. This will also expand all parent rows of
@path as necessary.

Since: 2.2

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path to a row.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_render_icon">
<description>
Renders the icon specified by @source at the given @size 
according to the given parameters and returns the result in a 
pixbuf.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> the #GtkIconSource specifying the icon to render
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> a text direction
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size to render the icon at. A size of (GtkIconSize)-1
means render at the size of the source and don&apos;t scale.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget 
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> a style detail
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a newly-created #GdkPixbuf containing the rendered icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_cell_area">
<description>
Fills the bounding rectangle in tree window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path is
%NULL, or points to a path not currently displayed, the @y and @height fields
of the rectangle will be filled with 0. If @column is %NULL, the @x and @width
fields will be filled with 0.  The sum of all cell rects does not cover the
entire tree; there are extra pixels in between rows, for example. The
returned rectangle is equivalent to the @cell_area passed to
gtk_cell_renderer_render().  This function is only valid if #tree_view is
realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath for the row, or %NULL to get only horizontal coordinates
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn for the column, or %NULL to get only vertical coordiantes
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with cell rect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_insert_page">
<description>
Insert a page into @notebook at the given position

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page after all other pages.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_title">
<description>
Sets the title of the #GtkWindow. The title of a window will be
displayed in its title bar; on the X Window System, the title bar
is rendered by the &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
manager&amp;lt;/link&amp;gt;, so exactly how the title appears to users may vary
according to a user&apos;s exact configuration. The title should help a
user distinguish this window from other windows they may have
open. A good title might include the application name and current
document filename, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_class_list_child_properties">
<description>

</description>
<parameters>
<parameter name="cclass">
<parameter_description> a #GtkContainerClass
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> location to return the number of child properties found
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a newly allocated array of #GParamSpec*. The array must be 
freed with g_free().
</parameter_description>
</parameter>
</parameters>
<return>all child properties of a container class.
</return>
</function>

<function name="gtk_text_mark_get_visible">
<description>
Returns %TRUE if the mark is visible (i.e. a cursor is displayed
for it)


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if visible
</return>
</function>

<function name="gtk_window_get_title">
<description>
Retrieves the title of the window. See gtk_window_set_title().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the title of the window, or %NULL if none has
been set explicitely. The returned string is owned by the widget
and must not be modified or freed.
</return>
</function>

<function name="gtk_rc_find_module_in_path">
<description>
Searches for a theme engine in the GTK+ search path. This function
is not useful for applications and should not be used.


</description>
<parameters>
<parameter name="module_file">
<parameter_description> name of a theme engine
</parameter_description>
</parameter>
</parameters>
<return> The filename, if found (must be freed with g_free()),
otherwise %NULL.
</return>
</function>

<function name="gtk_icon_set_new">
<description>
Creates a new #GtkIconSet. A #GtkIconSet represents a single icon
in various sizes and widget states. It can provide a #GdkPixbuf
for a given size and state on request, and automatically caches
some of the rendered #GdkPixbuf objects.

Normally you would use gtk_widget_render_icon() instead of
using #GtkIconSet directly. The one case where you&apos;d use
#GtkIconSet is to create application-specific icon sets to place in
a #GtkIconFactory.


</description>
<parameters>
</parameters>
<return> a new #GtkIconSet
</return>
</function>

<function name="gtk_text_tag_table_lookup">
<description>
Look up a named tag.


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable 
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a tag
</parameter_description>
</parameter>
</parameters>
<return> The tag, or %NULL if none by that name is in the table.
</return>
</function>

<function name="gtk_widget_get_root_window">
<description>
Get the root window where this widget is located. This function can
only be called after the widget has been added to a widget
heirarchy with #GtkWindow at the top.

The root window is useful for such purposes as creating a popup
#GdkWindow associated with the window. In general, you should only
create display specific resources when a widget has been realized,
and you should free those resources when the widget is unrealized.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow root window for the toplevel for this widget.

Since: 2.2
</return>
</function>

<function name="gtk_file_selection_set_filename">
<description>
Sets a default path for the file requestor. If @filename includes a
directory path, then the requestor will open with that path as its
current working directory.

The encoding of @filename is the on-disk encoding, which
may not be UTF-8. See g_filename_from_utf8().

</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description>  a string to set as the default file name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_get_vadjustment">
<description>
Returns the vertical adjustment of the viewport.


</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
</parameters>
<return> the vertical adjustment of @viewport.
</return>
</function>

<function name="gtk_window_group_remove_window">
<description>
Removes a window from a #GtkWindowGroup.

</description>
<parameters>
<parameter name="window_group">
<parameter_description> a #GtkWindowGroup
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the #GtkWindow to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_steal">
<description>
Reparents a pre-existing toplevel window into a #GtkSocket. This is
meant to embed clients that do not know about embedding into a
#GtkSocket, however doing so is inherently unreliable, and using
this function is not recommended.

The #GtkSocket must have already be added into a toplevel window
before you can make this call.

</description>
<parameters>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
<parameter name="wid">
<parameter_description> the window ID of an existing toplevel window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_get_image">
<description>
Gets the #GdkImage and mask being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_IMAGE (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned image and mask.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="gdk_image">
<parameter_description> return location for a #GtkImage
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for a #GdkBitmap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_queue_resize">
<description>
This function is only for use in widget implementations.
Flags a widget to have its size renegotiated; should
be called when a widget for some reason has a new size request.
For example, when you change the text in a #GtkLabel, #GtkLabel
queues a resize to ensure there&apos;s enough space for the new text.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_sentence_end">
<description>
Moves forward to the next sentence end. (If @iter is at the end of
a sentence, moves to the next end of sentence.)  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_selection_data_targets_include_text">
<description>
Given a #GtkSelectionData object holding a list of targets,
determines if any of the targets in @targets can be used to
provide text.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data holds a list of targets,
and a suitable target for text is included, otherwise %FALSE.
</return>
</function>

<function name="gtk_text_iter_backward_sentence_starts">
<description>
Calls gtk_text_iter_backward_sentence_start() up to @count times,
or until it returns %FALSE. If @count is negative, moves forward
instead of backward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of sentences to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_tree_model_sort_clear_cache">
<description>
This function should almost never be called.  It clears the @tree_model_sort
of any cached iterators that haven&apos;t been reffed with
gtk_tree_model_ref_node().  This might be useful if the child model being
sorted is static (and doesn&apos;t change often) and there has been a lot of
unreffed access to nodes.  As a side effect of this function, all unreffed
iters will be invalid.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_move_before">
<description>
Moves @iter in @tree_store to the position before @position. @iter and
@position should be in the same level. Note that this function only
works with unsorted stores. If @position is %NULL, @iter will be
moved to the end of the level.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_get_storage_type">
<description>
Gets the type of representation being used by the #GtkImage
to store image data. If the #GtkImage has no image data,
the return value will be %GTK_IMAGE_EMPTY.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
</parameters>
<return> image representation being used
</return>
</function>

<function name="gtk_tree_view_column_get_max_width">
<description>
Returns the maximum width in pixels of the @tree_column, or -1 if no maximum
width is set.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The maximum width of the @tree_column.
</return>
</function>

<function name="gtk_window_set_auto_startup_notification">
<description>
By default, after showing the first #GtkWindow for each #GdkScreen,
GTK+ calls gdk_screen_notify_startup_complete().  Call this
function to disable the automatic startup notification. You might
do this if your first window is a splash screen, and you want to
delay notification until after your real main window has been
shown, for example.

In that example, you would disable startup notification
temporarily, show your splash screen, then re-enable it so that
showing the main window would automatically result in notification.

Since: 2.2

</description>
<parameters>
<parameter name="setting">
<parameter_description> %TRUE to automatically do startup notification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_im_module_file">
<description>
Obtains the path to the IM modules file. See the documentation
of the &amp;lt;link linkend=&quot;im-module-file&quot;&amp;gt;&amp;lt;envar&amp;gt;GTK_IM_MODULE_FILE&amp;lt;/envar&amp;gt;&amp;lt;/link&amp;gt;
environment variable for more details.

</description>
<parameters>
<parameter name="returns">
<parameter_description> a newly-allocated string containing the name of the file
listing the IM modules available for loading
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_old_editable_changed">
<description>
Emits the ::changed signal on @old_editable.

</description>
<parameters>
<parameter name="old_editable">
<parameter_description> a #GtkOldEditable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_pixbuf">
<description>
If the element at @iter is a pixbuf, the pixbuf is returned
(with no new reference count added). Otherwise,
%NULL is returned.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf at @iter
</return>
</function>

<function name="gtk_spin_button_set_adjustment">
<description>
Replaces the #GtkAdjustment associated with @spin_button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment to replace the existing adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_base">
<description>
Sets the base color for a widget in a particular state.
All other style values are left untouched. The base color
is the background color used along with the text color
(see gtk_widget_modify_text()) for widgets such as #GtkEntry
and #GtkTextView. See also gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the base color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_base().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_ensure_style">
<description>
Ensures that @widget has a style (@widget-&amp;gt;style). Not a very useful
function; most of the time, if you want the style, the widget is
realized, and realized widgets are guaranteed to have a style
already.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_popup_enable">
<description>
Enables the popup menu: if the user clicks with the right mouse button on
the bookmarks, a menu with all the pages will be popped up.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_columns">
<description>
Returns a #GList of all the #GtkTreeViewColumn s currently in @tree_view.
The returned list must be freed with g_list_free ().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkTreeViewColumn s
</return>
</function>

<function name="gtk_window_set_skip_pager_hint">
<description>
Windows may set a hint asking the desktop environment not to display
the window in the pager. This function toggles this hint.
(A &quot;pager&quot; is any desktop navigation tool such as a workspace
switcher that displays a thumbnail representation of the windows
on the screen.)

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to keep this window from appearing in the pager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_delete">
<description>
Deletes text between @start and @end. The order of @start and @end
is not actually relevant; gtk_text_buffer_delete () will reorder
them. This function actually emits the &quot;delete_range&quot; signal, and
the default handler of that signal deletes the text. Because the
buffer is modified, all outstanding iterators become invalid after
calling this function; however, the @start and @end will be
re-initialized to point to the location where text was deleted.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> another position in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hscale_new_with_range">
<description>
Creates a new horizontal scale widget that lets the user input a
number between @min and @max (including @min and @max) with the
increment @step.  @step must be nonzero; it&apos;s the distance the
slider moves when using the arrow keys to adjust the scale value.


</description>
<parameters>
<parameter name="min">
<parameter_description> minimum value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum value
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> step increment (tick size) used with keyboard shortcuts
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkHScale
</return>
</function>

<function name="gtk_text_buffer_insert">
<description>
Inserts @len bytes of @text at position @iter.  If @len is -1,
@text must be nul-terminated and will be inserted in its
entirety. Emits the &quot;insert_text&quot; signal; insertion actually occurs
in the default handler for the signal. @iter is invalidated when
insertion occurs (because the buffer contents change), but the
default signal handler revalidates it to point to the end of the
inserted text.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in the buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 format text to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text in bytes, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_file">
<description>
See gtk_image_new_from_file() for details.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> a filename or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_line_at_y">
<description>
Gets the #GtkTextIter at the start of the line containing
the coordinate @y. @y is in buffer coordinates, convert from
window coordinates with gtk_text_view_window_to_buffer_coords().
If non-%NULL, @line_top will be filled with the coordinate of the top
edge of the line.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="target_iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> a y coordinate
</parameter_description>
</parameter>
<parameter name="line_top">
<parameter_description> return location for top coordinate of the line
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_column_type">
<description>
Returns the type of the column.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The column index.
</parameter_description>
</parameter>
</parameters>
<return> The type of the column.
</return>
</function>

<function name="gtk_range_set_update_policy">
<description>
Sets the update policy for the range. #GTK_UPDATE_CONTINUOUS means that
anytime the range slider is moved, the range value will change and the
value_changed signal will be emitted. #GTK_UPDATE_DELAYED means that
the value will be updated after a brief timeout where no slider motion
occurs, so updates are spaced by a short time rather than
continuous. #GTK_UPDATE_DISCONTINUOUS means that the value will only
be updated when the user releases the button and ends the slider
drag operation.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> update policy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_unref_node">
<description>
Lets the tree unref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.

For more information on what this means, see gtk_tree_model_ref_node().
Please note that nodes that are deleted are not unreffed.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_starts_line">
<description>
Returns %TRUE if @iter begins a paragraph,
i.e. if gtk_text_iter_get_line_offset () would return 0.
However this function is potentially more efficient than
gtk_text_iter_get_line_offset () because it doesn&apos;t have to compute
the offset, it just has to see whether it&apos;s 0.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter begins a line
</return>
</function>

<function name="gtk_tree_view_column_new_with_attributes">
<description>
Creates a new #GtkTreeViewColumn with a number of default values.  This is
equivalent to calling gtk_tree_view_column_set_title(),
gtk_tree_view_column_pack_start(), and
gtk_tree_view_column_set_attributes() on the newly created #GtkTreeViewColumn.

Here&apos;s a simple example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
enum { TEXT_COLUMN, COLOR_COLUMN, N_COLUMNS };
...
{
GtkTreeViewColumn *column;
GtkCellRenderer   *renderer = gtk_cell_renderer_text_new (&amp;lt;!-- --&amp;gt;);

column = gtk_tree_view_column_new_with_attributes (&quot;Title&quot;,
renderer,
&quot;text&quot;, TEXT_COLUMN,
&quot;foreground&quot;, COLOR_COLUMN,
NULL);
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="title">
<parameter_description> The title to set the header to.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreeViewColumn.
</return>
</function>

<function name="gtk_color_selection_set_palette_color">
<description>
Sets the palette located at @index to have @color as its color.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the color index of the palette.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #GdkColor to set the palette with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_popup_disable">
<description>
Disables the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_hline">
<description>
Draws a horizontal line from (@x1, @y) to (@x2, @y) in @window
using the given style and state.

This function is deprecated, use gtk_paint_hline() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="x1">
<parameter_description> the starting x coordinate
</parameter_description>
</parameter>
<parameter name="x2">
<parameter_description> the ending x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_set_new_from_pixbuf">
<description>
Creates a new #GtkIconSet with @pixbuf as the default/fallback
source image. If you don&apos;t add any additional #GtkIconSource to the
icon set, all variants of the icon will be created from @pixbuf,
using scaling, pixelation, etc. as required to adjust the icon size
or make the icon look insensitive/prelighted.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkIconSet
</return>
</function>

<function name="_gtk_text_btree_validate">
<description>
Validate a single contiguous invalid region of a #GtkTextBTree for
a given view.


</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextBTree
</parameter_description>
</parameter>
<parameter name="view_id">
<parameter_description> view id
</parameter_description>
</parameter>
<parameter name="max_pixels">
<parameter_description> the maximum number of pixels to validate. (No more
than one paragraph beyond this limit will be validated)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store starting y coordinate of validated region
</parameter_description>
</parameter>
<parameter name="old_height">
<parameter_description> location to store old height of validated region
</parameter_description>
</parameter>
<parameter name="new_height">
<parameter_description> location to store new height of validated region
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a region has been validated, %FALSE if the
entire tree was already valid.
</return>
</function>

<function name="gtk_text_iter_set_offset">
<description>
Sets @iter to point to @char_offset. @char_offset counts from the start
of the entire text buffer, starting with 0.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="char_offset">
<parameter_description> a character number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_flags">
<description>
Returns a set of flags supported by this interface.  The flags are a bitwise
combination of #GtkTreeModelFlags.  The flags supported should not change
during the lifecycle of the tree_model.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
</parameters>
<return> The flags supported by this interface.
</return>
</function>

<function name="gtk_tree_view_row_activated">
<description>
Activates the cell determined by @path and @column.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be activated.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to be activated.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_iter_copy">
<description>
Creates a dynamically allocated tree iterator as a copy of @iter.  This
function is not intended for use in applications, because you can just copy
the structs by value (&amp;lt;literal&amp;gt;GtkTreeIter new_iter = iter;&amp;lt;/literal&amp;gt;).  You
must free this iter with gtk_tree_iter_free ().


</description>
<parameters>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated copy of @iter.
</return>
</function>

<function name="gtk_size_group_new">
<description>
Create a new #GtkSizeGroup.
 

</description>
<parameters>
<parameter name="mode">
<parameter_description> the mode for the new size group.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GtkSizeGroup
</return>
</function>

<function name="gtk_window_set_mnemonic_modifier">
<description>
Sets the mnemonic modifier for this window. 

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="modifier">
<parameter_description> the modifier mask used to activate
mnemonics on this window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_iter_location">
<description>
Gets a rectangle which roughly contains the character at @iter.
The rectangle position is in buffer coordinates; use
gtk_text_view_buffer_to_window_coords() to convert these
coordinates to coordinates for one of the windows in the text view.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> bounds of the character at @iter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_select_range">
<description>
Selects a range of nodes, determined by @start_path and @end_path inclusive.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="start_path">
<parameter_description> The initial node of the range.
</parameter_description>
</parameter>
<parameter name="end_path">
<parameter_description> The final node of the range.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_draw_insertion_cursor">
<description>
Draws a text caret on @drawable at @location. This is not a style function
but merely a convenience function for drawing the standard cursor shape.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> location where to draw the cursor (@location-&amp;gt;width is ignored)
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> whether the cursor is left-to-right or
right-to-left. Should never be #GTK_TEXT_DIR_NONE
</parameter_description>
</parameter>
<parameter name="draw_arrow">
<parameter_description> %TRUE to draw a directional arrow on the
cursor. Should be %FALSE unless the cursor is split.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_from_accel_closure">
<description>
Finds the #GtkAccelGroup to which @closure is connected; 
see gtk_accel_group_connect().

</description>
<parameters>
<parameter name="closure">
<parameter_description> a #GClosure
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the #GtkAccelGroup to which @closure is connected, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_get_size">
<description>
Gets the size that has been set on the layout, and that determines
the total extents of the layout&apos;s scrollbar area. See
gtk_layout_set_size ().

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store the width set on @layout, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store the height set on @layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_word_start">
<description>
Moves backward to the previous word start. (If @iter is currently on a
word start, moves backward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_rc_style_copy">
<description>
Makes a copy of the specified #GtkRcStyle. This function
will correctly copy an RC style that is a member of a class
derived from #GtkRcStyle.


</description>
<parameters>
<parameter name="orig">
<parameter_description> the style to copy
</parameter_description>
</parameter>
</parameters>
<return> the resulting #GtkRcStyle
</return>
</function>

<function name="gtk_toolbar_insert_widget">
<description>
Inserts a widget in the toolbar at the given position.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget to add to the toolbar. 
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the number of widgets to insert this widget after.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_iter_parent">
<description>
Sets @iter to be the parent of @child.  If @child is at the toplevel, and
doesn&apos;t have a parent, then @iter is set to an invalid iterator and %FALSE
is returned.  @child will remain a valid node after this function has been
called.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The new #GtkTreeIter to set to the parent.
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter is set to the parent of @child.
</return>
</function>

<function name="gtk_text_iter_equal">
<description>
Tests whether two iterators are equal, using the fastest possible
mechanism. This function is very fast; you can expect it to perform
better than e.g. getting the character offset for each iterator and
comparing the offsets yourself. Also, it&apos;s a bit faster than
gtk_text_iter_compare().


</description>
<parameters>
<parameter name="lhs">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="rhs">
<parameter_description> another #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterators point to the same place in the buffer
</return>
</function>

<function name="gtk_widget_get_toplevel">
<description>
This function returns the topmost widget in the container hierarchy
@widget is a part of. If @widget has no parent widgets, it will be
returned as the topmost widget. No reference will be added to the
returned widget; it should not be unreferenced.

Note the difference in behavior vs. gtk_widget_get_ancestor();
&amp;lt;literal&amp;gt;gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)&amp;lt;/literal&amp;gt; 
would return
%NULL if @widget wasn&apos;t inside a toplevel window, and if the
window was inside a #GtkWindow-derived widget which was in turn
inside the toplevel #GtkWindow. While the second case may
seem unlikely, it actually happens when a #GtkPlug is embedded
inside a #GtkSocket within the same application.

To reliably find the toplevel #GtkWindow, use
gtk_widget_get_toplevel() and check if the %TOPLEVEL flags
is set on the result.
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
if (GTK_WIDGET_TOPLEVEL (toplevel))
{
[ Perform action on toplevel. ]
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the topmost ancestor of @widget, or @widget itself if there&apos;s no ancestor.
</return>
</function>

<function name="gtk_window_set_skip_taskbar_hint">
<description>
Windows may set a hint asking the desktop environment not to display
the window in the task bar. This function toggles this hint.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to keep this window from appearing in the task bar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_clipboard">
<description>
Returns the clipboard object for the given selection to
be used with @widget. @widget must have a #GdkDisplay
associated with it, so must be attached to a toplevel
window.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> a #GdkAtom which identifies the clipboard
to use. %GDK_SELECTION_CLIPBOARD gives the
default clipboard. Another common value
is %GDK_SELECTION_PRIMARY, which gives
the primary X selection. 
</parameter_description>
</parameter>
</parameters>
<return> the appropriate clipboard object. If no
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent for all time.

Since: 2.2
</return>
</function>

<function name="gtk_window_group_add_window">
<description>
Adds a window to a #GtkWindowGroup. 

</description>
<parameters>
<parameter name="window_group">
<parameter_description> a #GtkWindowGroup
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the #GtkWindow to add
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_add_selection_clipboard">
<description>
Adds @clipboard to the list of clipboards in which the selection contents
of @buffer are available. In most cases, @clipboard will be the #GtkClipboard
of type %GDK_SELECTION_PRIMARY for a view of @buffer.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_menu_item_new_from_stock">
<description>
Creates a new #GtkImageMenuItem containing the image and text from a 
stock item. Some stock ids have preprocessor macros like #GTK_STOCK_OK 
and #GTK_STOCK_APPLY.

If you want this menu item to have changeable accelerators, then pass in
%NULL for accel_group. Next call gtk_menu_item_set_accel_path() with an
appropriate path for the menu item, use gtk_stock_lookup() to look up the
standard accelerator for the stock item, and if one is found, call
gtk_accel_map_add_entry() to register it.

</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of the stock item.
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> the #GtkAccelGroup to add the menu items accelerator to,
or %NULL.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkImageMenuItem.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_disable_setlocale">
<description>
Prevents gtk_init() and gtk_init_check() from automatically
calling &amp;lt;literal&amp;gt;setlocale (LC_ALL, &quot;&quot;)&amp;lt;/literal&amp;gt;. You would 
want to use this function if you wanted to set the locale for 
your program to something other than the user&apos;s locale, or if 
you wanted to set different values for different locale categories.

Most programs should not need to call this function.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_icon_factory_new">
<description>
Creates a new #GtkIconFactory. An icon factory manages a collection
of #GtkIconSet&amp;lt;!-- --&amp;gt;s; a #GtkIconSet manages a set of variants of a
particular icon (i.e. a #GtkIconSet contains variants for different
sizes and widget states). Icons in an icon factory are named by a
stock ID, which is a simple string identifying the icon. Each
#GtkStyle has a list of #GtkIconFactory&amp;lt;!-- --&amp;gt;s derived from the current
theme; those icon factories are consulted first when searching for
an icon. If the theme doesn&apos;t set a particular icon, GTK+ looks for
the icon in a list of default icon factories, maintained by
gtk_icon_factory_add_default() and
gtk_icon_factory_remove_default(). Applications with icons should
add a default icon factory with their icons, which will allow
themes to override the icons for the application.


</description>
<parameters>
</parameters>
<return> a new #GtkIconFactory
</return>
</function>

<function name="gtk_widget_set_extension_events">
<description>
Sets the extension events mask to @mode. See #GdkExtensionMode
and gdk_input_set_extension_events().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> bitfield of extension events to receive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_width_chars">
<description>
Gets the value set by gtk_entry_set_width_chars().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> number of chars to request space for, or negative if unset
</return>
</function>

<function name="gtk_drag_set_icon_default">
<description>
Sets the icon for a particular drag to the default
icon.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
             with a  context for the source side of a drag)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_copy">
<description>
Creates a copy of @source; mostly useful for language bindings.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkIconSource
</return>
</function>

<function name="gtk_widget_create_pango_layout">
<description>
Creates a new #PangoLayout with the appropriate colormap,
font description, and base direction for drawing text for
this widget.

If you keep a #PangoLayout created in this way around, in order
notify the layout of changes to the base direction or font of this
widget, you must call pango_layout_context_changed() in response to
the ::style_set and ::direction_set signals for the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>   text to set on the layout (can be %NULL)
</parameter_description>
</parameter>
</parameters>
<return> the new #PangoLayout
</return>
</function>

<function name="gtk_text_attr_appearance_new">
<description>
Create a new font description attribute. (This attribute
allows setting family, style, weight, variant, stretch,
and size simultaneously.)


</description>
<parameters>
<parameter name="desc">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gtk_widget_render_icon">
<description>
A convenience function that uses the theme engine and RC file
settings for @widget to look up @stock_id and render it to
a pixbuf. @stock_id should be a stock icon ID such as
#GTK_STOCK_OPEN or #GTK_STOCK_OK. @size should be a size
such as #GTK_ICON_SIZE_MENU. @detail should be a string that
identifies the widget or code doing the rendering, so that
theme engines can special-case rendering for that widget or code.

The pixels in the returned #GdkPixbuf are shared with the rest of
the application and should not be modified. The pixbuf should be freed
after use with g_object_unref().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a stock ID
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock size
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> render detail to pass to theme engine
</parameter_description>
</parameter>
</parameters>
<return> a new pixbuf, or %NULL if the stock ID wasn&apos;t known
</return>
</function>

<function name="gtk_button_set_use_stock">
<description>
If true, the label set on the button is used as a
stock id to select the stock item for the button.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="use_stock">
<parameter_description> %TRUE if the button should use a stock item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_get_current_event_time">
<description>
If there is a current event and it has a timestamp, return that
timestamp, otherwise return %GDK_CURRENT_TIME.


</description>
<parameters>
</parameters>
<return> the timestamp from the current event, or %GDK_CURRENT_TIME.
</return>
</function>

<function name="gtk_image_new_from_pixbuf">
<description>
Creates a new #GtkImage displaying @pixbuf.
The #GtkImage does not assume a reference to the
pixbuf; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.

Note that this function just creates an #GtkImage from the pixbuf.  The
#GtkImage created will not react to state changes.  Should you want that, you
should use gtk_image_new_from_icon_set().


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_tree_selection_unselect_iter">
<description>
Unselects the specified iterator.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to be unselected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_line_index">
<description>
Returns the byte index of the iterator, counting
from the start of a newline-terminated line.
Remember that #GtkTextBuffer encodes text in
UTF-8, and that characters can require a variable
number of bytes to represent.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> distance from start of line, in bytes
</return>
</function>

<function name="gtk_tree_model_iter_n_children">
<description>
Returns the number of children that @iter has.  As a special case, if @iter
is %NULL, then the number of toplevel nodes is returned.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The number of children of @iter.
</return>
</function>

<function name="gtk_window_set_icon_from_file">
<description>
Sets the icon for @window.  
Warns on failure if @err is %NULL.

This function is equivalent to calling gtk_window_set_icon()
with a pixbuf created by loading the image from @filename.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> location of icon file
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> location to store error, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the icon succeeded.

Since: 2.2
</return>
</function>

<function name="gtk_text_layout_set_cursor_visible">
<description>
Sets whether the insertion cursor should be shown. Generally,
widgets using #GtkTextLayout will hide the cursor when the
widget does not have the input focus.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="cursor_visible">
<parameter_description> If %FALSE, then the insertion cursor will not
be shown, even if the text is editable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_set_from_image">
<description>
See gtk_image_new_from_image() for details.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="gdk_image">
<parameter_description> a #GdkImage or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_wrap">
<description>
Sets the flag that determines if a spin button value wraps around to the
opposite limit when the upper or lower limit of the range is exceeded.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="wrap">
<parameter_description> a flag indicating if wrapping behavior is performed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_size_group_get_mode">
<description>
Gets the current mode of the size group. See gtk_size_group_set_mode().


</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGroup
</parameter_description>
</parameter>
</parameters>
<return> the current mode of the size group.
</return>
</function>

<function name="gtk_entry_get_visibility">
<description>
Retrieves whether the text in @entry is visible. See
gtk_entry_set_visibility().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the text is currently visible
</return>
</function>

<function name="gtk_text_child_anchor_new">
<description>
Creates a new #GtkTextChildAnchor. Usually you would then insert
it into a #GtkTextBuffer with gtk_text_buffer_insert_child_anchor().
To perform the creation and insertion in one step, use the
convenience function gtk_text_buffer_create_child_anchor().


</description>
<parameters>
</parameters>
<return> a new #GtkTextChildAnchor
</return>
</function>

<function name="gtk_text_iter_free">
<description>
Free an iterator allocated on the heap. This function
is intended for use in language bindings, and is not
especially useful for applications, because iterators can
simply be allocated on the stack.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a dynamically-allocated iterator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_stock_add">
<description>
Registers each of the stock items in @items. If an item already
exists with the same stock ID as one of the @items, the old item
gets replaced. The stock items are copied, so GTK+ does not hold
any pointer into @items and @items can be freed. Use
gtk_stock_add_static() if @items is persistent and GTK+ need not
copy the array.


</description>
<parameters>
<parameter name="items">
<parameter_description> a #GtkStockItem or array of items
</parameter_description>
</parameter>
<parameter name="n_items">
<parameter_description> number of #GtkStockItem in @items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_set_resize_mode">
<description>
Sets the resize mode for the container.

The resize mode of a container determines whether a resize request 
will be passed to the container&apos;s parent, queued for later execution
or executed immediately.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer.
</parameter_description>
</parameter>
<parameter name="resize_mode">
<parameter_description> the new resize mode.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_rules_hint">
<description>
Gets the setting set by gtk_tree_view_set_rules_hint().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if rules are useful for the user of this tree
</return>
</function>

<function name="gtk_border_copy">
<description>
Copies a #GtkBorder structure.

</description>
<parameters>
<parameter name="border_">
<parameter_description> a #GtkBorder.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a copy of @border_.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_get_policy">
<description>
Retrieves the current policy values for the horizontal and vertical
scrollbars. See gtk_scrolled_window_set_policy().

</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
<parameter name="hscrollbar_policy">
<parameter_description> location to store the policy for the horizontal scrollbar, or %NULL.
</parameter_description>
</parameter>
<parameter name="vscrollbar_policy">
<parameter_description> location to store the policy for the horizontal scrollbar, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_with_tags">
<description>
Inserts @text into @buffer at @iter, applying the list of tags to
the newly-inserted text. The last tag specified must be NULL to
terminate the list. Equivalent to calling gtk_text_buffer_insert (),
then gtk_text_buffer_apply_tag () on the inserted text;
gtk_text_buffer_insert_with_tags () is just a convenience function.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> an iterator in @buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 text
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text, or -1
</parameter_description>
</parameter>
<parameter name="first_tag">
<parameter_description> first tag to apply to @text
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> NULL-terminated list of tags to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_reorderable">
<description>
This function is a convenience function to allow you to reorder models that
support the #GtkDragSourceIface and the #GtkDragDestIface.  Both
#GtkTreeStore and #GtkListStore support these.  If @reorderable is %TRUE, then
the user can reorder the model by dragging and dropping rows.  The
developer can listen to these changes by connecting to the model&apos;s
signals.

This function does not give you any degree of control over the order -- any
reorderering is allowed.  If more control is needed, you should probably
handle drag and drop manually.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="reorderable">
<parameter_description> %TRUE, if the tree can be reordered.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_increments">
<description>
Gets the current step and page the increments used by @spin_button. See
gtk_spin_button_set_increments().

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> location to store step increment, or %NULL
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> location to store page increment, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_class_path">
<description>
Same as gtk_widget_path(), but always uses the name of a widget&apos;s type,
never uses a custom name set with gtk_widget_set_name().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="path_length">
<parameter_description> location to store the length of the class path, or %NULL
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> location to store the class path as an allocated string, or %NULL
</parameter_description>
</parameter>
<parameter name="path_reversed">
<parameter_description> location to store the reverse class path as an allocated string, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_ends_sentence">
<description>
Determines whether @iter ends a sentence.  Sentence boundaries are
determined by Pango and should be correct for nearly any language
(if not, the correct fix would be to the Pango text boundary
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the end of a sentence.
</return>
</function>

<function name="gtk_spin_button_set_value">
<description>
Set the value of @spin_button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_style">
<description>
Retrieves whether the toolbar has text, icons, or both . See
gtk_toolbar_set_style().
 

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the current style of @toolbar
</return>
</function>

<function name="gtk_widget_set_scroll_adjustments">
<description>
For widgets that support scrolling, sets the scroll adjustments and
returns %TRUE.  For widgets that don&apos;t support scrolling, does
nothing and returns %FALSE. Widgets that don&apos;t support scrolling
can be scrolled by placing them in a #GtkViewport, which does
support scrolling.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="hadjustment">
<parameter_description> an adjustment for horizontal scrolling, or %NULL
</parameter_description>
</parameter>
<parameter name="vadjustment">
<parameter_description> an adjustment for vertical scrolling, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget supports scrolling
</return>
</function>

<function name="gtk_window_set_screen">
<description>
Sets the #GdkScreen where the @window is displayed; if
the window is already mapped, it will be unmapped, and
then remapped on the new screen.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_append">
<description>
Appends a new row to @list_store.  @iter will be changed to point to this new
row.  The row will be empty after this function is called.  To fill in
values, you need to call gtk_list_store_set() or gtk_list_store_set_value().


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the appended row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_prev_page">
<description>
Switches to the previous page. Nothing happens if the current page
is the first page.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_free">
<description>
Frees a dynamically-allocated icon source, along with its
filename, size, and pixbuf fields if those are not %NULL.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_text">
<description>
Returns the text in the range [@start,@end). Excludes undisplayed
text (text marked with tags that set the invisibility attribute) if
@include_hidden_chars is FALSE. Does not include characters
representing embedded images, so byte and character indexes into
the returned string do &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; correspond to byte
and character indexes into the buffer. Contrast with
gtk_text_buffer_get_slice ().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of a range
</parameter_description>
</parameter>
<parameter name="include_hidden_chars">
<parameter_description> whether to include invisible text
</parameter_description>
</parameter>
</parameters>
<return> an allocated UTF-8 string
</return>
</function>

<function name="_gtk_key_hash_lookup">
<description>
Looks up the best matching entry or entries in the hash table for
a given event. The results are sorted so that entries with less
modifiers come before entries with more modifiers.


</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> hardware keycode field from a #GdkEventKey
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> state field from a #GdkEventKey
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> group field from a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> A #GSList of all matching entries. If there were exact
matches, they are returned, otherwise all fuzzy matches are
returned. (A fuzzy match is a match in keycode and level, but not
in group.)
</return>
</function>

<function name="gtk_color_selection_get_has_opacity_control">
<description>
Determines whether the colorsel has an opacity control.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @colorsel has an opacity control.  %FALSE if it does&apos;t.
</return>
</function>

<function name="gtk_window_get_position">
<description>
This function returns the position you need to pass to
gtk_window_move() to keep @window in its current position.  This
means that the meaning of the returned value varies with window
gravity. See gtk_window_move() for more details.

If you haven&apos;t changed the window gravity, its gravity will be
#GDK_GRAVITY_NORTH_WEST. This means that gtk_window_get_position()
gets the position of the top-left corner of the window manager
frame for the window. gtk_window_move() sets the position of this
same top-left corner.

gtk_window_get_position() is not 100% reliable because the X Window System
does not specify a way to obtain the geometry of the
decorations placed on a window by the window manager.
Thus GTK+ is using a &quot;best guess&quot; that works with most
window managers.

Moreover, nearly all window managers are historically broken with
respect to their handling of window gravity. So moving a window to
its current position as returned by gtk_window_get_position() tends
to result in moving the window slightly. Window managers are
slowly getting better over time.

If a window has gravity #GDK_GRAVITY_STATIC the window manager
frame is not relevant, and thus gtk_window_get_position() will
always produce accurate results. However you can&apos;t use static
gravity to do things like place a window in a corner of the screen,
because static gravity ignores the window manager decorations.

If you are saving and restoring your application&apos;s window
positions, you should know that it&apos;s impossible for applications to
do this without getting it somewhat wrong because applications do
not have sufficient knowledge of window manager state. The Correct
Mechanism is to support the session management protocol (see the
&quot;GnomeClient&quot; object in the GNOME libraries for example) and allow
the window manager to save your window sizes and positions.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> return location for X coordinate of gravity-determined reference p\oint
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> return location for Y coordinate of gravity-determined reference p\oint
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_destroyed">
<description>
This function sets *@widget_pointer to %NULL if @widget_pointer !=
%NULL.  It&apos;s intended to be used as a callback connected to the
&quot;destroy&quot; signal of a widget. You connect gtk_widget_destroyed()
as a signal handler, and pass the address of your widget variable
as user data. Then when the widget is destroyed, the variable will
be set to %NULL. Useful for example to avoid multiple copies
of the same dialog.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="widget_pointer">
<parameter_description> address of a variable that contains @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_border">
<description>
Sets the width the border around the tab labels
in a notebook. This is equivalent to calling
gtk_notebook_set_tab_hborder (@notebook, @border_width) followed
by gtk_notebook_set_tab_vborder (@notebook, @border_width).

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="border_width">
<parameter_description> width of the border around the tab labels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_query">
<description>
Queries an accelerator group for all entries matching @accel_key and 
@accel_mods.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to query
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>        key value of the accelerator
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>       modifier combination of the accelerator
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description>        location to return the number of entries found, or %NULL
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>          an array of @n_entries #GtkAccelGroupEntry elements, or %NULL. The array is owned by GTK+ and must not be freed. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_propagate_event">
<description>
Sends an event to a widget, propagating the event to parent widgets
if the event remains unhandled. Events received by GTK+ from GDK
normally begin in gtk_main_do_event(). Depending on the type of
event, existence of modal dialogs, grabs, etc., the event may be
propagated; if so, this function is used. gtk_propagate_event()
calls gtk_widget_event() on each widget it decides to send the
event to.  So gtk_widget_event() is the lowest-level function; it
simply emits the &quot;event&quot; and possibly an event-specific signal on a
widget.  gtk_propagate_event() is a bit higher-level, and
gtk_main_do_event() is the highest level.

All that said, you most likely don&apos;t want to use any of these
functions; synthesizing events is rarely needed. Consider asking on
the mailing list for better ways to achieve your goals. For
example, use gdk_window_invalidate_rect() or
gtk_widget_queue_draw() instead of making up expose events.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> an event
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_queue_clear_area">
<description>
DEPRECATED. This function is no longer different from
gtk_widget_queue_draw_area(), though it once was. Now it just calls
gtk_widget_queue_draw_area(). Originally
gtk_widget_queue_clear_area() would force a redraw of the
background for %GTK_NO_WINDOW widgets, and
gtk_widget_queue_draw_area() would not. Now both functions ensure
the background will be redrawn.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_groups_from_object">
<description>
Gets a list of all accel groups which are attached to @object.

</description>
<parameters>
<parameter name="object">
<parameter_description>        a #GObject, usually a #GtkWindow 
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a list of all accel groups which are attached to @object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_apply_tag_by_name">
<description>
Calls gtk_text_tag_table_lookup() on the buffer&apos;s tag table to
get a #GtkTextTag, then calls gtk_text_buffer_apply_tag().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a named #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be tagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be tagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_get_for_display">
<description>
Returns the clipboard object for the given selection.
Cut/copy/paste menu items and keyboard shortcuts should use
the default clipboard, returned by passing %GDK_SELECTION_CLIPBOARD for @selection.
(%GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARD
for backwards compatibility reasons.)
The currently-selected object or text should be provided on the clipboard
identified by #GDK_SELECTION_PRIMARY. Cut/copy/paste menu items
conceptually copy the contents of the #GDK_SELECTION_PRIMARY clipboard
to the default clipboard, i.e. they copy the selection to what the
user sees as the clipboard.

(Passing #GDK_NONE is the same as using &amp;lt;literal&amp;gt;gdk_atom_intern
(&quot;CLIPBOARD&quot;, FALSE)&amp;lt;/literal&amp;gt;. See
&amp;lt;ulink url=&quot;http://www.freedesktop.org/standards/clipboards.txt&quot;&amp;gt;
http://www.freedesktop.org/standards/clipboards.txt&amp;lt;/ulink&amp;gt;
for a detailed discussion of the &quot;CLIPBOARD&quot; vs. &quot;PRIMARY&quot; selections
under the X window system. On Win32 the #GDK_SELECTION_PRIMARY
clipboard is essentially ignored.)

It&apos;s possible to have arbitrary named clipboards; if you do invent
new clipboards, you should prefix the selection name with an
underscore (because the ICCCM requires that nonstandard atoms are
underscore-prefixed), and namespace it as well. For example,
if your application called &quot;Foo&quot; has a special-purpose
clipboard, you might call it &quot;_FOO_SPECIAL_CLIPBOARD&quot;.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display for which the clipboard is to be retrieved or created
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> a #GdkAtom which identifies the clipboard
to use.
</parameter_description>
</parameter>
</parameters>
<return> the appropriate clipboard object. If no
clipboard already exists, a new one will
be created. Once a clipboard object has
been created, it is persistent for all time and
cannot be freed.

Since: 2.2
</return>
</function>

<function name="gtk_window_remove_accel_group">
<description>
Reverses the effects of gtk_window_add_accel_group().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_set_max_length">
<description>
Sets the maximum allowed length of the contents of the widget. If
the current contents are longer than the given length, then they
will be truncated to fit.

</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry.
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum length of the entry, or 0 for no maximum.
(other than the maximum length of entries.) The value passed in will
be clamped to the range 0-65536.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_new_from_stock">
<description>
Creates a new #GtkButton containing the image and text from a stock item.
Some stock ids have preprocessor macros like #GTK_STOCK_OK and
#GTK_STOCK_APPLY.

If @stock_id is unknown, then it will be treated as a mnemonic
label (as for gtk_button_new_with_mnemonic()).


</description>
<parameters>
<parameter name="stock_id">
<parameter_description> the name of the stock item 
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkButton
</return>
</function>

<function name="gtk_hsv_to_rgb">
<description>
Converts a color from RGB space to HSV.  Input values must be in the
[0.0, 1.0] range; output values will be in the same range.

</description>
<parameters>
<parameter name="r">
<parameter_description> Red.
</parameter_description>
</parameter>
<parameter name="g">
<parameter_description> Green.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Blue.
</parameter_description>
</parameter>
<parameter name="h">
<parameter_description> Return value for the hue component.
</parameter_description>
</parameter>
<parameter name="s">
<parameter_description> Return value for the saturation component.
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> Return value for the value component.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_is_focus">
<description>
Determines if the widget is the focus widget within its
toplevel. (This does not mean that the %HAS_FOCUS flag is
necessarily set; %HAS_FOCUS will only be set if the
toplevel widget additionally has the global input focus.)


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget is the focus widget.
</return>
</function>

<function name="gtk_hsv_get_metrics">
<description>
Queries the size and ring width of an HSV color selector.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Return value for the diameter of the hue ring.
</parameter_description>
</parameter>
<parameter name="ring_width">
<parameter_description> Return value for the width of the hue ring.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_pixels_above_lines">
<description>
Gets the default number of pixels to put above paragraphs.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default number of pixels above paragraphs
</return>
</function>

<function name="gtk_text_tag_table_get_size">
<description>
Returns the size of the table (number of tags)


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
</parameters>
<return> number of tags in @table
</return>
</function>

<function name="gtk_toggle_button_set_mode">
<description>
Sets whether the button is displayed as a separate indicator and label.
You can call this function on a checkbutton or a radiobutton with
@draw_indicator = %FALSE to make the button look like a normal button

This function only effects instances of classes like #GtkCheckButton
and #GtkRadioButton that derive from #GtkToggleButton,
not instances of #GtkToggleButton itself.

</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
<parameter name="draw_indicator">
<parameter_description> if %TRUE, draw the button as a separate indicator
and label; if %FALSE, draw the button like a normal button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_set_use_preedit">
<description>
Sets whether the IM context should use the preedit string
to display feedback. If @use_preedit is FALSE (default
is TRUE), then the IM context may use some other method to display
feedback, such as displaying it in a child of the root window.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="use_preedit">
<parameter_description> whether the IM context should use the preedit string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_set">
<description>
Sets one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_prop_name">
<parameter_description> the name of the first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of property names and values, starting
with @first_prop_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_new_with_model">
<description>
Creates a new #GtkTreeView widget with the model initialized to @model.


</description>
<parameters>
<parameter name="model">
<parameter_description> the model.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreeView widget.
</return>
</function>

<function name="gtk_color_selection_set_previous_color">
<description>
Sets the &apos;previous&apos; color to be @color.  This function should be called with
some hesitations, as it might seem confusing to have that color change.
Calling gtk_color_selection_set_current_color() will also set this color the first
time it is called.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to set the previous color with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set">
<description>
Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set. 
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to &quot;Foo&quot;, you would write 
&amp;lt;literal&amp;gt;gtk_tree_store_set (store, iter, 0, &quot;Foo&quot;, -1)&amp;lt;/literal&amp;gt;.

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_size">
<description>
Obtains the icon size this source applies to. The return value
is only useful/meaningful if the icon size is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; wildcarded.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> icon size this source matches.
</return>
</function>

<function name="gtk_notebook_set_show_tabs">
<description>
Sets whether to show the tabs for the notebook or not.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="show_tabs">
<parameter_description> %TRUE if the tabs should be shown.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_set_cursor_direction">
<description>
Sets which text directions (left-to-right and/or right-to-left) for
which cursors will be drawn for the insertion point. The visual
point at which new text is inserted depends on whether the new
text is right-to-left or left-to-right, so it may be desired to
make the drawn position of the cursor depend on the keyboard state.

</description>
<parameters>
<parameter name="direction">
<parameter_description> the new direction(s) for which to draw cursors.
%GTK_TEXT_DIR_NONE means draw cursors for both
left-to-right insertion and right-to-left insertion.
(The two cursors will be visually distinguished.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_style_by_paths">
<description>
Creates up a #GtkStyle from styles defined in a RC file by providing
the raw components used in matching. This function may be useful
when creating pseudo-widgets that should be themed like widgets but
don&apos;t actually have corresponding GTK+ widgets. An example of this
would be items inside a GNOME canvas widget.

The action of gtk_rc_get_style() is similar to:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gtk_widget_path (widget, NULL, &amp;amp;path, NULL);
gtk_widget_class_path (widget, NULL, &amp;amp;class_path, NULL);
gtk_rc_get_style_by_paths (gtk_widget_get_settings (widget), path, class_path,
G_OBJECT_TYPE (widget));
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings object
</parameter_description>
</parameter>
<parameter name="widget_path">
<parameter_description> the widget path to use when looking up the style, or %NULL
if no matching against the widget path should be done
</parameter_description>
</parameter>
<parameter name="class_path">
<parameter_description> the class path to use when looking up the style, or %NULL
if no matching against the class path should be done.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a type that will be used along with parent types of this type
when matching against class styles, or #G_TYPE_NONE
</parameter_description>
</parameter>
</parameters>
<return> A style created by matching with the supplied paths,
or %NULL if nothing matching was specified and the default style should
be used. The returned value is owned by GTK+ as part of an internal cache,
so you must call g_object_ref() on the returned value if you want to
keep a reference to it.
</return>
</function>

<function name="gtk_widget_class_list_style_properties">
<description>

</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GtkWidgetClass
</parameter_description>
</parameter>
<parameter name="n_properties">
<parameter_description> location to return the number of style properties found
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> an newly allocated array of #GParamSpec*. The array must be freed with g_free().
</parameter_description>
</parameter>
</parameters>
<return>all style properties of a widget class.

Since: 2.2
</return>
</function>

<function name="gtk_text_iter_backward_word_starts">
<description>
Calls gtk_text_iter_backward_word_start() up to @count times.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of times to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_settings_get_for_screen">
<description>
Gets the #GtkSettings object for @screen, creating it if necessary.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> a #GtkSettings object.

Since: 2.2
</return>
</function>

<function name="gtk_text_buffer_delete_mark_by_name">
<description>
Deletes the mark named @name; the mark must exist. See
gtk_text_buffer_delete_mark () for details.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of a mark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_tab">
<description>
Draws an option menu tab (i.e. the up and down pointing arrows)
in the given rectangle on @window using the given parameters.

This function is deprecated, use gtk_paint_tab() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the tab in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the tab in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_free">
<description>
Free&apos;s %reference.  %reference may be NULL.

</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_transient_for">
<description>
Fetches the transient parent for this window. See
gtk_window_set_transient_for().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the transient parent for this window, or %NULL
if no transient parent has been set.
</return>
</function>

<function name="gtk_widget_modify_text">
<description>
Sets the text color for a widget in a particular state.  All other
style values are left untouched. The text color is the foreground
color used along with the base color (see gtk_widget_modify_base())
for widgets such as #GtkEntry and #GtkTextView. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the text color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_text().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_unset_focus_chain">
<description>
Removes a focus chain explicitly set with gtk_container_set_focus_chain().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_reset_shapes">
<description>
Recursively resets the shape on this widget and its descendants.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_style">
<description>
Simply an accessor function that returns @widget-&amp;gt;style.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the widget&apos;s #GtkStyle
</return>
</function>

<function name="gtk_adjustment_get_value">
<description>
Gets the current value of the adjustment. See
gtk_adjustment_set_value ().


</description>
<parameters>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment
</parameter_description>
</parameter>
</parameters>
<return> The current value of the adjustment.
</return>
</function>

<function name="gtk_tree_view_insert_column">
<description>
This inserts the @column into the @tree_view at @position.  If @position is
-1, then the column is inserted at the end.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to be inserted.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position to insert @column in.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after insertion.
</return>
</function>

<function name="gtk_widget_get_parent_window">
<description>
Gets @widget&apos;s parent window.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the parent window of @widget.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_size_lookup">
<description>
Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for the default #GtkSettings.
(See gtk_icon_size_lookup_for_settings().)
Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn&apos;t normally needed, gtk_widget_render_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.


</description>
<parameters>
<parameter name="size">
<parameter_description> an icon size
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store icon width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store icon height
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @size was a valid size
</return>
</function>

<function name="gtk_text_attributes_unref">
<description>
Decrements the reference count on @values, freeing the structure
if the reference count reaches 0.

</description>
<parameters>
<parameter name="values">
<parameter_description> a #GtkTextAttributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_cell_get_size">
<description>
Obtains the width and height needed to render the column.  This is used
primarily by the #GtkTreeView.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> The area a cell in the column will be allocated, or %NULL
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> location to return x offset of a cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> location to return y offset of a cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to return width needed to render a cell, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to return height needed to render a cell, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set_column_types">
<description>
This function is meant primarily for #GObjects that inherit from 
#GtkTreeStore, and should only be used when constructing a new 
#GtkTreeStore.  It will not function after a row has been added, 
or a method on the #GtkTreeModel interface is called.

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> Number of columns for the tree store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> An array of #GType types, one for each column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_child_anchor">
<description>
If the location at @iter contains a child anchor, the
anchor is returned (with no new reference count added). Otherwise,
%NULL is returned.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> the anchor at @iter
</return>
</function>

<function name="gtk_window_get_skip_pager_hint">
<description>
Gets the value set by gtk_window_set_skip_pager_hint().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window shouldn&apos;t be in pager

Since: 2.2
</return>
</function>

<function name="gtk_menu_item_get_right_justified">
<description>
Gets whether the menu item appears justified at the right
side of the menu bar.


</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu item will appear at the
far right if added to a menu bar.
</return>
</function>

<function name="gtk_widget_get_default_colormap">
<description>
Obtains the default colormap used to create widgets.


</description>
<parameters>
</parameters>
<return> default widget colormap
</return>
</function>

<function name="gtk_image_set_from_stock">
<description>
See gtk_image_new_from_stock() for details.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> a stock icon name
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_module_dir">
<description>
Returns a directory in which GTK+ looks for theme engines.
For full information about the search for theme engines,
see the docs for &amp;lt;envar&amp;gt;GTK_PATH&amp;lt;/envar&amp;gt; in
&amp;lt;xref linkend=&quot;gtk-running&quot;/&amp;gt;.


</description>
<parameters>
</parameters>
<return> the directory. (Must be freed with g_free())
</return>
</function>

<function name="gtk_radio_button_new_with_mnemonic">
<description>
Creates a new #GtkRadioButton containing a label, adding it to the same 
group as @group. The label will be created using 
gtk_label_new_with_mnemonic(), so underscores in @label indicate the 
mnemonic for the button.

</description>
<parameters>
<parameter name="group">
<parameter_description> the radio button group
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkRadioButton
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_child_notify">
<description>
Emits a &quot;child-notify&quot; signal for the 
&amp;lt;link linkend=&quot;child-properties&quot;&amp;gt;child property&amp;lt;/link&amp;gt; @child_property 
on @widget.

This is the analogue of g_object_notify() for child properties.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="child_property">
<parameter_description> the name of a child property installed on the 
class of @widget&amp;lt;!-- --&amp;gt;&apos;s parent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_new">
<description>
Creates a new #GtkIconSource. A #GtkIconSource contains a #GdkPixbuf (or
image filename) that serves as the base image for one or more of the
icons in a #GtkIconSet, along with a specification for which icons in the
icon set will be based on that pixbuf or image file. An icon set contains
a set of icons that represent &quot;the same&quot; logical concept in different states,
different global text directions, and different sizes.

So for example a web browser&apos;s &quot;Back to Previous Page&quot; icon might
point in a different direction in Hebrew and in English; it might
look different when insensitive; and it might change size depending
on toolbar mode (small/large icons). So a single icon set would
contain all those variants of the icon. #GtkIconSet contains a list
of #GtkIconSource from which it can derive specific icon variants in
the set. 

In the simplest case, #GtkIconSet contains one source pixbuf from
which it derives all variants. The convenience function
gtk_icon_set_new_from_pixbuf() handles this case; if you only have
one source pixbuf, just use that function.

If you want to use a different base pixbuf for different icon
variants, you create multiple icon sources, mark which variants
they&apos;ll be used to create, and add them to the icon set with
gtk_icon_set_add_source().

By default, the icon source has all parameters wildcarded. That is,
the icon source will be used as the base icon for any desired text
direction, widget state, or icon size.


</description>
<parameters>
</parameters>
<return> a new #GtkIconSource
</return>
</function>

<function name="gtk_tree_store_newv">
<description>
Non vararg creation function.  Used primarily by language bindings.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the tree store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTreeStore
</return>
</function>

<function name="gtk_tree_path_is_descendant">
<description>
Returns %TRUE if @path is a descendant of @ancestor.


</description>
<parameters>
<parameter name="path">
<parameter_description> a #GtkTreePath
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> another #GtkTreePath
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @ancestor contains @path somewhere below it
</return>
</function>

<function name="gtk_tree_view_remove_column">
<description>
Removes @column from @tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to remove.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after removing.
</return>
</function>

<function name="gtk_tree_view_expand_row">
<description>
Opens the row so its children are visible.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> path to a row
</parameter_description>
</parameter>
<parameter name="open_all">
<parameter_description> whether to recursively expand, or just expand immediate children
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row existed and had children
</return>
</function>

<function name="gtk_cell_renderer_toggle_set_radio">
<description>
If @radio is %TRUE, the cell renderer renders a radio toggle
(i.e. a toggle in a group of mutually-exclusive toggles).
If %FALSE, it renders a check toggle (a standalone boolean option).
This can be set globally for the cell renderer, or changed just
before rendering each cell in the model (for #GtkTreeView, you set
up a per-row setting using #GtkTreeViewColumn to associate model
columns with cell renderer properties).

</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle
</parameter_description>
</parameter>
<parameter name="radio">
<parameter_description> %TRUE to make the toggle look like a radio button
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_justification">
<description>
Gets the default justification of paragraphs in @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default justification
</return>
</function>

<function name="gtk_text_iter_get_marks">
<description>
Returns a list of all #GtkTextMark at this location. Because marks
are not iterable (they don&apos;t take up any &quot;space&quot; in the buffer,
they are just marks in between iterable locations), multiple marks
can exist in the same place. The returned list is not in any
meaningful order.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> list of #GtkTextMark
</return>
</function>

<function name="gtk_tree_selection_path_is_selected">
<description>
Returns %TRUE if the row pointed to by @path is currently selected.  If @path
does not point to a valid location, %FALSE is returned


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath to check selection on.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path is selected.
</return>
</function>

<function name="gtk_tree_set_row_drag_data">
<description>
Sets selection data of target type %GTK_TREE_MODEL_ROW. Normally used
in a drag_data_get handler.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> some #GtkSelectionData
</parameter_description>
</parameter>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a row in @tree_model
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #GtkSelectionData had the proper target type to allow us to set a tree row
</return>
</function>

<function name="gtk_get_current_event_state">
<description>
If there is a current event and it has a state field, place
that state field in @state and return %TRUE, otherwise return
%FALSE.


</description>
<parameters>
<parameter name="state">
<parameter_description> a location to store the state of the current event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a current event and it had a state field
</return>
</function>

<function name="gtk_im_context_set_cursor_location">
<description>
Notify the input method that a change in cursor 
position has been made. The location is relative to the client
window.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> new location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_visible_rect">
<description>
Fills @visible_rect with the currently-visible
region of the buffer, in buffer coordinates. Convert to window coordinates
with gtk_text_view_buffer_to_window_coords().

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="visible_rect">
<parameter_description> rectangle to fill
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_get_orientation">
<description>
Retrieves the current orientation of the toolbar. See
gtk_toolbar_set_orientation().


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the orientation
</return>
</function>

<function name="gtk_tree_view_set_cursor_on_cell">
<description>
Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user&apos;s attention on a particular row.  If
@focus_column is not %NULL, then focus is given to the column specified by
it. If @focus_column and @focus_cell are not %NULL, and @focus_column
contains 2 or more editable or activatable cells, then focus is given to
the cell specified by @focus_cell. Additionally, if @focus_column is
specified, and @start_editing is %TRUE, then editing should be started in
the specified cell.  This function is often followed by
@gtk_widget_grab_focus (@tree_view) in order to give keyboard focus to the
widget.  Please note that editing can only happen when the widget is
realized.

Since: 2.2

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
<parameter name="focus_column">
<parameter_description> A #GtkTreeViewColumn, or %NULL
</parameter_description>
</parameter>
<parameter name="focus_cell">
<parameter_description> A #GtkCellRenderer, or %NULL
</parameter_description>
</parameter>
<parameter name="start_editing">
<parameter_description> %TRUE if the specified cell should start being edited.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_new">
<description>
Creates a new #GtkTreeView widget.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreeView widget.
</return>
</function>

<function name="gtk_text_view_backward_display_line">
<description>
Moves the given @iter backward by one display (wrapped) line.  A
display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph.  If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_widget_add_events">
<description>
Adds the events in the bitfield @events to the event mask for
@widget. See gtk_widget_set_events() for details.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> an event mask, see #GdkEventMask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_move_iter_to_x">
<description>
Keeping the iterator on the same line of the layout, move it to the
specified X coordinate. The lines of a wrapped paragraph are
treated as distinct for this operation.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      X coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_clamp_iter_to_vrange">
<description>
If the iterator is not fully in the range @top &amp;lt;= y &amp;lt; @bottom,
then, if possible, move it the minimum distance so that the
iterator in this range.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="top">
<parameter_description>    the top of the range
</parameter_description>
</parameter>
<parameter name="bottom">
<parameter_description> the bottom the range
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iterator was moved, otherwise %FALSE.
</return>
</function>

<function name="gtk_color_selection_get_has_palette">
<description>
Determines whether the color selector has a color palette.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selector has a palette.  %FALSE if it hasn&apos;t.
</return>
</function>

<function name="gtk_label_get_selection_bounds">
<description>
Gets the selected range of characters in the label, returning %TRUE
if there&apos;s a selection.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> return location for start of selection, as a character offset
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> return location for end of selection, as a character offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if selection is non-empty
</return>
</function>

<function name="gtk_rc_get_im_module_path">
<description>
Obtains the path in which to look for IM modules. See the documentation
of the &amp;lt;link linkend=&quot;im-module-path&quot;&amp;gt;&amp;lt;envar&amp;gt;GTK_PATH&amp;lt;/envar&amp;gt;&amp;lt;/link&amp;gt;
environment variable for more details about looking up modules. This
function is useful solely for utilities supplied with GTK+ and should
not be used by applications under normal circumstances.

</description>
<parameters>
<parameter name="returns">
<parameter_description> a newly-allocated string containing the path in which to 
look for IM modules.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_get_has_separator">
<description>
Accessor for whether the dialog has a separator.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the dialog has a separator
</return>
</function>

<function name="gtk_get_default_language">
<description>
Returns the ISO language code for the default language currently in
effect. (Note that this can change over the life of an
application.)  The default language is derived from the current
locale. It determines, for example, whether GTK+ uses the
right-to-left or left-to-right text direction.


</description>
<parameters>
</parameters>
<return> the default language as an allocated string, must be freed
</return>
</function>

<function name="gtk_label_new">
<description>
Creates a new label with the given text inside it. You can
pass %NULL to get an empty label widget.


</description>
<parameters>
<parameter name="str">
<parameter_description> The text of the label
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkLabel
</return>
</function>

<function name="gtk_tree_view_column_pack_start">
<description>
Packs the @cell into the beginning of the column. If @expand is FALSE, then
the @cell is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is TRUE.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer. 
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if @cell is to be given extra space allocated to box.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_iter_is_valid">
<description>
WARNING: This function is slow. Only use it for debugging and/or testing
purposes.

Checks if the given iter is a valid iter for this #GtkTreeModelSort.


</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the iter is valid, %FALSE if the iter is invalid.

Since: 2.2
</return>
</function>

<function name="gtk_get_current_event">
<description>
Obtains a copy of the event currently being processed by GTK+.  For
example, if you get a &quot;clicked&quot; signal from #GtkButton, the current
event will be the #GdkEventButton that triggered the &quot;clicked&quot;
signal. The returned event must be freed with gdk_event_free().
If there is no current event, the function returns %NULL.


</description>
<parameters>
</parameters>
<return> a copy of the current event, or %NULL if no current event.
</return>
</function>

<function name="gtk_size_group_remove_widget">
<description>
Removes a widget from a #GtkSizeGroup.

</description>
<parameters>
<parameter name="size_group">
<parameter_description> a #GtkSizeGrup
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the #GtkWidget to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_reorder">
<description>
Reorders the children of @parent in @tree_store to follow the order
indicated by @new_order. Note that this function only works with
unsorted stores.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> An integer array indication the new order for the list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_update">
<description>
Manually force an update of the spin button.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_add">
<description>
Adds @widget to @container. Typically used for simple containers
such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
layout containers such as #GtkBox or #GtkTable, this function will
pick default packing parameters that may not be correct.  So
consider functions such as gtk_box_pack_start() and
gtk_table_attach() as an alternative to gtk_container_add() in
those cases. A widget may be added to only one container at a time;
you can&apos;t place the same widget inside two different containers.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget to be placed inside @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_toggle_set_active">
<description>
Activates or deactivates a cell renderer.

</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle.
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> the value to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_sort_order">
<description>
Gets the value set by gtk_tree_view_column_set_sort_order().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> the sort order the sort indicator is indicating
</return>
</function>

<function name="gtk_widget_modify_font">
<description>
Sets the font to use for a widget.  All other style values are left
untouched. See also gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> the font description to use, or %NULL to undo
the effect of previous calls to gtk_widget_modify_font().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_tags">
<description>
Returns a list of tags that apply to @iter, in ascending order of
priority (highest-priority tags are last). The #GtkTextTag in the
list don&apos;t have a reference added, but you have to free the list
itself.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> list of #GtkTextTag
</return>
</function>

<function name="_gtk_im_module_create">
<description>
Create an IM context of a type specified by the string
ID @context_id.


</description>
<parameters>
<parameter name="context_id">
<parameter_description> the context ID for the context type to create
</parameter_description>
</parameter>
</parameters>
<return> a newly created input context of or @context_id, or
if that could not be created, a newly created GtkIMContextSimple.
</return>
</function>

<function name="gtk_window_get_destroy_with_parent">
<description>
Returns whether the window will be destroyed with its transient parent. See
gtk_window_set_destroy_with_parent ().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window will be destroyed with its transient parent.
</return>
</function>

<function name="gtk_text_view_new">
<description>
Creates a new #GtkTextView. If you don&apos;t call gtk_text_view_set_buffer()
before using the text view, an empty default buffer will be created
for you. Get the buffer with gtk_text_view_get_buffer(). If you want
to specify your own buffer, consider gtk_text_view_new_with_buffer().


</description>
<parameters>
</parameters>
<return> a new #GtkTextView
</return>
</function>

<function name="gtk_button_box_set_child_secondary">
<description>
Sets whether @child should appear in a secondary group of children.
A typical use of a secondary child is the help button in a dialog.

This group appears after the other children if the style
is %GTK_BUTTONBOX_START, %GTK_BUTTONBOX_SPREAD or
%GTK_BUTTONBOX_EDGE, and before the the other children if the style
is %GTK_BUTTONBOX_END. For horizontal button boxes, the definition
of before/after depends on direction of the widget (see
gtk_widget_set_direction()). If the style is %GTK_BUTTONBOX_START
or %GTK_BUTTONBOX_END, then the secondary children are aligned at
the other end of the button box from the main children. For the
other styles, they appear immediately next to the main children.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkButtonBox
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a child of @widget
</parameter_description>
</parameter>
<parameter name="is_secondary">
<parameter_description> if %TRUE, the @child appears in a secondary group of the
button box.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_delete_entries">
<description>
Deletes the menu items which were created from the @entries by the given
item factory.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkItemFactoryEntry&amp;lt;!-- --&amp;gt;s 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_use_underline">
<description>
Returns whether an embedded underline in the label indicates a
mnemonic. See gtk_label_set_use_underline ().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE whether an embedded underline in the label indicates
the mnemonic accelerator keys.
</return>
</function>

<function name="gtk_table_get_col_spacing">
<description>
Gets the amount of space between column @col, and
column @col + 1. See gtk_table_set_col_spacing().


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a column in the table, 0 indicates the first column
</parameter_description>
</parameter>
</parameters>
<return> the column spacing
</return>
</function>

<function name="gtk_text_iter_forward_cursor_position">
<description>
Moves @iter forward by a single cursor position. Cursor positions
are (unsurprisingly) positions where the cursor can appear. Perhaps
surprisingly, there may not be a cursor position between all
characters. The most common example for European languages would be
a carriage return/newline sequence. For some Unicode characters,
the equivalent of say the letter &quot;a&quot; with an accent mark will be
represented as two characters, first the letter then a &quot;combining
mark&quot; that causes the accent to be rendered; so the cursor can&apos;t go
between those two characters. See also the #PangoLogAttr structure and
pango_break() function.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable
</return>
</function>

<function name="gtk_entry_get_activates_default">
<description>
Retrieves the value set by gtk_entry_set_activates_default().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the entry will activate the default widget
</return>
</function>

<function name="gtk_widget_style_get_valist">
<description>
Non-vararg variant of gtk_widget_style_get(). Used primarily by language 
bindings.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; of pairs of property names and
locations to return the property values, starting with the location
for @first_property_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_add">
<description>
Add a tag to the table. The tag is assigned the highest priority
in the table.

@tag must not be in a tag table already, and may not have
the same name as an already-added tag.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_ref_node">
<description>
Lets the tree ref the node.  This is an optional method for models to
implement.  To be more specific, models may ignore this call as it exists
primarily for performance reasons.

This function is primarily meant as a way for views to let caching model know
when nodes are being displayed (and hence, whether or not to cache that
node.)  For example, a file-system based model would not want to keep the
entire file-hierarchy in memory, just the sections that are currently being
displayed by every current view.

A model should be expected to be able to get an iter independent of it&apos;s
reffed state.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_mnemonic_widget">
<description>
If the label has been set so that it has an mnemonic key (using
i.e.  gtk_label_set_markup_with_mnemonic(),
gtk_label_set_text_with_mnemonic(), gtk_label_new_with_mnemonic()
or the &quot;use_underline&quot; property) the label can be associated with a
widget that is the target of the mnemonic. When the label is inside
a widget (like a #GtkButton or a #GtkNotebook tab) it is
automatically associated with the correct widget, but sometimes
(i.e. when the target is a #GtkEntry next to the label) you need to
set it explicitly using this function.

The target widget will be accelerated by emitting &quot;mnemonic_activate&quot; on it.
The default handler for this signal will activate the widget if there are no
mnemonic collisions and toggle focus between the colliding widgets otherwise.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the target #GtkWidget 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_state">
<description>
This function is for use in widget implementations. Sets the state
of a widget (insensitive, prelighted, etc.) Usually you should set
the state using wrapper functions such as gtk_widget_set_sensitive().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> new state for @widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_option_menu_get_history">
<description>
Retrieves the index of the currently selected menu item. The menu
items are numbered from top to bottom, starting with 0. 


</description>
<parameters>
<parameter name="option_menu">
<parameter_description> a #GtkOptionMenu
</parameter_description>
</parameter>
</parameters>
<return> index of the selected menu item, or -1 if there are no menu items
</return>
</function>

<function name="gtk_image_new_from_icon_set">
<description>
Creates a #GtkImage displaying an icon set. Sample stock sizes are
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_SMALL_TOOLBAR. Instead of using
this function, usually it&apos;s better to create a #GtkIconFactory, put
your icon sets in the icon factory, add the icon factory to the
list of default factories with gtk_icon_factory_add_default(), and
then use gtk_image_new_from_stock(). This will allow themes to
override the icon you ship with your application.

The #GtkImage does not assume a reference to the
icon set; you still need to unref it if you own references.
#GtkImage will add its own reference rather than adopting yours.



</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a stock icon size
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_notebook_append_page">
<description>
Appends a page to @notebook.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_reparent">
<description>
Moves a widget from one #GtkContainer to another, handling reference
count issues to avoid destroying the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> a #GtkContainer to move the widget into
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_slice">
<description>
Like gtk_text_iter_get_slice (), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
&quot;invisible&quot; attribute turned on has been applied to it.


</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of range
</parameter_description>
</parameter>
</parameters>
<return> slice of text from the buffer
</return>
</function>

<function name="gtk_color_selection_set_color">
<description>
Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.

This function is deprecated, use gtk_color_selection_set_current_color() instead.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an array of 4 doubles specifying the red, green, blue and opacity 
to set the current color to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_clear">
<description>
Removes all rows from @tree_store

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> a #GtkTreeStore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_set_column_type">
<description>
Supported types include: %G_TYPE_UINT, %G_TYPE_INT, %G_TYPE_UCHAR,
%G_TYPE_CHAR, %G_TYPE_BOOLEAN, %G_TYPE_POINTER, %G_TYPE_FLOAT,
%G_TYPE_DOUBLE, %G_TYPE_STRING, %G_TYPE_OBJECT, and %G_TYPE_BOXED, along with
subclasses of those types such as %GDK_TYPE_PIXBUF.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> a #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> type of the data to be stored in @column
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_iter_nth_child">
<description>
Sets @iter to be the child of @parent, using the given index.  The first
index is 0.  If @n is too big, or @parent has no children, @iter is set
to an invalid iterator and %FALSE is returned.  @parent will remain a valid
node after this function has been called.  As a special case, if @parent is
%NULL, then the @n&amp;lt;!-- --&amp;gt;th root node is set.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter to set to the nth child.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> The #GtkTreeIter to get the child from, or %NULL.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> Then index of the desired child.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @parent has an @n&amp;lt;!-- --&amp;gt;th child.
</return>
</function>

<function name="gtk_text_view_place_cursor_onscreen">
<description>
Moves the cursor to the currently visible region of the
buffer, it it isn&apos;t there already.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the cursor had to be moved.
</return>
</function>

<function name="gtk_label_get_mnemonic_keyval">
<description>
If the label has been set so that it has an mnemonic key this function
returns the keyval used for the mnemonic accelerator. If there is no
mnemonic set up it returns #GDK_VoidSymbol.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> GDK keyval usable for accelerators, or #GDK_VoidSymbol
</return>
</function>

<function name="gtk_layout_set_vadjustment">
<description>
Sets the vertical scroll adjustment for the layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> new scroll adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_set_metrics">
<description>
Sets the size and ring width of an HSV color selector.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Diameter for the hue ring.
</parameter_description>
</parameter>
<parameter name="ring_width">
<parameter_description> Width of the hue ring.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_new">
<description>
Creates a new #GtkTreeViewColumn.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreeViewColumn.
</return>
</function>

<function name="gtk_widget_queue_draw">
<description>
Equivalent to calling gtk_widget_queue_draw_area() for the
entire area of a widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_connect_by_path">
<description>
Installs an accelerator in this group, using an accelerator path to look
up the appropriate key and modifiers (see gtk_accel_map_add_entry()).
When @accel_group is being activated in response to a call to
gtk_accel_groups_activate(), @closure will be invoked if the @accel_key and
@accel_mods from gtk_accel_groups_activate() match the key and modifiers
for the path.

The signature used for the @closure is that of #GtkAccelGroupActivate.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description>      the accelerator group to install an accelerator in
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description>       path used for determining key and modifiers.
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description>          closure to be executed upon accelerator activation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_foreach_unfiltered">
<description>
Loops over all entries in the accelerator map, and execute
@foreach_func on each. The signature of @foreach_func is that of
#GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).

</description>
<parameters>
<parameter name="data">
<parameter_description>         data to be passed into @foreach_func
</parameter_description>
</parameter>
<parameter name="foreach_func">
<parameter_description> function to be executed for each accel map entry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_get_fixed_size">
<description>
Fills in @width and @height with the appropriate size of @cell.

</description>
<parameters>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to fill in with the fixed width of the widget, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to fill in with the fixed height of the widget, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_set_icon_pixbuf">
<description>
Sets the icon that will be used for drags from a particular widget
from a #GdkPixbuf. GTK+ retains a reference for @pixbuf and will 
release it when it is no longer needed.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the #GdkPixbuf for the drag icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_default_colormap">
<description>
Sets the default colormap to use when creating widgets.
gtk_widget_push_colormap() is a better function to use if
you only want to affect a few widgets, rather than all widgets.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_size_request">
<description>
This function is typically used when implementing a #GtkContainer
subclass.  Obtains the preferred size of a widget. The container
uses this information to arrange its child widgets and decide what
size allocations to give them with gtk_widget_size_allocate().

You can also call this function from an application, with some
caveats. Most notably, getting a size request requires the widget
to be associated with a screen, because font information may be
needed. Multihead-aware applications should keep this in mind.

Also remember that the size request is not necessarily the size
a widget will actually be allocated.

See also gtk_widget_get_child_requisition().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> a #GtkRequisition to be filled in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_char">
<description>
Moves @iter forward by one character offset. Note that images
embedded in the buffer occupy 1 character slot, so
gtk_text_iter_forward_char () may actually move onto an image instead
of a character, if you have images in your buffer.  If @iter is the
end iterator or one character before it, @iter will now point at
the end iterator, and gtk_text_iter_forward_char () returns %FALSE for
convenience when writing loops.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_tree_view_column_add_attribute">
<description>
Adds an attribute mapping to the list in @tree_column.  The @column is the
column of the model to get a value from, and the @attribute is the
parameter on @cell_renderer to be set from the value. So for example
if column 2 of the model contains strings, you could have the
&quot;text&quot; attribute of a #GtkCellRendererText get its values from
column 2.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> the #GtkCellRenderer to set attributes on
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> An attribute on the renderer
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The column position on the model to get the attribute from.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_indent">
<description>
Gets the default indentation of paragraphs in @text_view.
Tags in the view&apos;s buffer may override the default.
The indentation may be negative.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> number of pixels of indentation
</return>
</function>

<function name="gtk_window_get_skip_taskbar_hint">
<description>
Gets the value set by gtk_window_set_skip_taskbar_hint()


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if window shouldn&apos;t be in taskbar

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_get_expander_column">
<description>
Returns the column that is the current expander column.  This
column has the expander arrow drawn next to it.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> The expander column.
</return>
</function>

<function name="gtk_text_view_get_default_attributes">
<description>
Obtains a copy of the default text attributes. These are the
attributes used for text unless a tag overrides them.
You&apos;d typically pass the default attributes in to
gtk_text_iter_get_attributes() in order to get the
attributes in effect at a given text position.

The return value is a copy owned by the caller of this function,
and should be freed.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTextAttributes
</return>
</function>

<function name="gtk_image_get_icon_set">
<description>
Gets the icon set and size being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_ICON_SET (see gtk_image_get_storage_type()).


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="icon_set">
<parameter_description> location to store a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location to store a stock icon size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_selection_bounds">
<description>
Returns %TRUE if some text is selected; places the bounds
of the selection in @start and @end (if the selection has length 0,
then @start and @end are filled in with the same value).
@start and @end will be in ascending order. If @start and @end are
NULL, then they are not filled in, but the return value still indicates
whether text is selected.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> iterator to initialize with selection start
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator to initialize with selection end
</parameter_description>
</parameter>
</parameters>
<return> whether the selection has nonzero length
</return>
</function>

<function name="gtk_container_focus_sort">
<description>
Sorts @children in the correct order for focusing with
direction type @direction.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="children">
<parameter_description>  a list of descendents of @container (they don&apos;t
have to be direct children.
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> focus direction
</parameter_description>
</parameter>
<parameter name="old_focus">
<parameter_description> widget to use for the starting position, or %NULL
to determine this automatically.
[ Note, this argument isn&apos;t used for GTK_DIR_TAB_*,
which is the only @direction we use currently,
so perhaps this argument should be removed ]
</parameter_description>
</parameter>
</parameters>
<return> a copy of @children, sorted in correct focusing order,
with children that aren&apos;t suitable for focusing in this direction
removed.
</return>
</function>

<function name="gtk_widget_common_ancestor">
<description>
Find the common ancestor of @widget_a and @widget_b that
is closest to the two widgets.


</description>
<parameters>
<parameter name="widget_a">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="widget_b">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the closest common ancestor of @widget_a and
@widget_b or %NULL if @widget_a and @widget_b do not
share a common ancestor.
</return>
</function>

<function name="gtk_tree_view_column_set_reorderable">
<description>
If @reorderable is #TRUE, then the column can be reordered by the end user
dragging the header.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="reorderable">
<parameter_description> #TRUE, if the column can be reordered.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_find_module">
<description>
Looks for a dynamically module named @name of type @type in the standard GTK+
module search path.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the module
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of the module, for instance &apos;modules&apos;, &apos;engines&apos;, immodules&apos;
</parameter_description>
</parameter>
</parameters>
<return> the pathname to the found module, or %NULL if it wasn&apos;t found.
Free with g_free().
</return>
</function>

<function name="gtk_text_iter_begins_tag">
<description>
Returns %TRUE if @tag is toggled on at exactly this point. If @tag
is %NULL, returns %TRUE if any tag is toggled on at this point. Note
that the gtk_text_iter_begins_tag () returns %TRUE if @iter is the
&amp;lt;emphasis&amp;gt;start&amp;lt;/emphasis&amp;gt; of the tagged range;
gtk_text_iter_has_tag () tells you whether an iterator is
&amp;lt;emphasis&amp;gt;within&amp;lt;/emphasis&amp;gt; a tagged range.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is the start of a range tagged with @tag
</return>
</function>

<function name="gtk_tree_view_column_set_sort_indicator">
<description>
Call this function with a @setting of %TRUE to display an arrow in
the header button indicating the column is sorted. Call
gtk_tree_view_column_set_sort_order() to change the direction of
the arrow.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to display an indicator that the column is sorted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_popup_with_data">
<description>
Pops up the menu constructed from the item factory at (@x, @y). Callbacks
can access the @popup_data while the menu is posted via 
gtk_item_factory_popup_data() and gtk_item_factory_popup_data_from_widget().

The @mouse_button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@mouse_button should be 0.

The @time_ parameter should be the time stamp of the event that
initiated the popup. If such an event is not available, use
gtk_get_current_event_time() instead.

The operation of the @mouse_button and the @time_ parameters is the same
as the @button and @activation_time parameters for gtk_menu_popup().

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory of type #GTK_TYPE_MENU (see gtk_item_factory_new())
</parameter_description>
</parameter>
<parameter name="popup_data">
<parameter_description> data available for callbacks while the menu is posted
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a #GtkDestroyNotify function to be called on @popup_data when
the menu is unposted
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x position 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y position
</parameter_description>
</parameter>
<parameter name="mouse_button">
<parameter_description> the mouse button which was pressed to initiate the popup
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the time at which the activation event occurred
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default_icon_from_file">
<description>
Sets an icon to be used as fallback for windows that haven&apos;t
had gtk_window_set_icon_list() called on them from a file
on disk. Warns on failure if @err is %NULL.


</description>
<parameters>
<parameter name="filename">
<parameter_description> location of icon file
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> location to store error, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the icon succeeded.

Since: 2.2
</return>
</function>

<function name="gtk_list_store_set_value">
<description>
Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_set_shadow_type">
<description>
Sets the shadow type of the viewport.

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new shadow type.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_count_selected_rows">
<description>
Returns the number of rows that have been selected in @tree.


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return> The number of rows selected.

Since: 2.2
</return>
</function>

<function name="gtk_cell_renderer_get_size">
<description>
Obtains the width and height needed to render the cell. Used by view widgets
to determine the appropriate size for the cell_area passed to
gtk_cell_renderer_render().  If @cell_area is not %NULL, fills in the x and y
offsets (if set) of the cell relative to this location.  Please note that the
values set in @width and @height, as well as those in @x_offset and @y_offset
are inclusive of the xpad and ypad properties.

</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget the renderer is rendering to
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> The area a cell will be allocated, or %NULL
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> location to return x offset of cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> location to return y offset of cell relative to @cell_area, or %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to return width needed to render a cell, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to return height needed to render a cell, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_set_label">
<description>
Sets the text of the label of the button to @str. This text is
also used to select the stock item if gtk_button_set_use_stock()
is used.

This will also clear any previously set labels.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_button_new_with_mnemonic">
<description>
Creates a new #GtkCheckButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the check button.

</description>
<parameters>
<parameter name="label">
<parameter_description> The text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkCheckButton
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_selectable">
<description>
Selectable labels allow the user to select text from the label, for
copy-and-paste.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to allow selecting text in the label
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_unfullscreen">
<description>
Asks to toggle off the fullscreen state for @window. Note that you
shouldn&apos;t assume the window is definitely not full screen
afterward, because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could fullscreen it
again, and not all window managers honor requests to unfullscreen
windows. But normally the window will end up restored to its normal
state. Just don&apos;t write code that crashes if not.

You can track the fullscreen state via the &quot;window_state_event&quot; signal
on #GtkWidget.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_add_child_at_anchor">
<description>
Adds a child widget in the text buffer, at the given @anchor.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor in the #GtkTextBuffer for @text_view
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_update_policy">
<description>
Gets the update policy of @range. See gtk_range_set_update_policy().


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> the current update policy
</return>
</function>

<function name="gtk_icon_set_unref">
<description>
Decrements the reference count on @icon_set, and frees memory
if the reference count reaches 0.

</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_set_focus_chain">
<description>
Sets a focus chain, overriding the one computed automatically by GTK+.

In principle each widget in the chain should be a descendant of the 
container, but this is not enforced by this method, since it&apos;s allowed 
to set the focus chain before you pack the widgets, or have a widget 
in the chain that isn&apos;t always packed. The necessary checks are done 
when the focus chain is actually traversed.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer.
</parameter_description>
</parameter>
<parameter name="focusable_widgets">
<parameter_description> the new focus chain.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_is_valid">
<description>
Check if there are any invalid regions in a #GtkTextLayout&apos;s buffer


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if any invalid regions were found
</return>
</function>

<function name="gtk_toggle_button_set_inconsistent">
<description>
If the user has selected a range of elements (such as some text or
spreadsheet cells) that are affected by a toggle button, and the
current values in that range are inconsistent, you may want to
display the toggle in an &quot;in between&quot; state. This function turns on
&quot;in between&quot; display.  Normally you would turn off the inconsistent
state again if the user toggles the toggle button. This has to be
done manually, gtk_toggle_button_set_inconsistent() only affects
visual appearance, it doesn&apos;t affect the semantics of the button.


</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if state is inconsistent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_markup">
<description>
Parses @str which is marked up with the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;,
setting the label&apos;s text and attribute list based on the parse results.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a markup string (see &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_scroll_mark_onscreen">
<description>
Scrolls @text_view the minimum distance such that @mark is contained
within the visible area of the widget.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a mark in the buffer for @text_view
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_wait_for_contents">
<description>
Requests the contents of the clipboard using the given target.
This function waits for the data to be received using the main 
loop, so events, timeouts, etc, may be dispatched during the wait.


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an atom representing the form into which the clipboard
owner should convert the selection.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GtkSelectionData object or %NULL
if retrieving the given target failed. If non-%NULL,
this value must be freed with gtk_selection_data_free() 
when you are finished with it.
</return>
</function>

<function name="gtk_entry_set_width_chars">
<description>
Changes the size request of the entry to be about the right size
for @n_chars characters. Note that it changes the size
&amp;lt;emphasis&amp;gt;request&amp;lt;/emphasis&amp;gt;, the size can still be affected by
how you pack the widget into containers. If @n_chars is -1, the
size reverts to the default entry size.


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="n_chars">
<parameter_description> width in chars
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_add_button">
<description>
Adds a button with the given text (or a stock button, if @button_text is a
stock ID) and sets things up so that clicking the button will emit the
&quot;response&quot; signal with the given @response_id. The button is appended to the
end of the dialog&apos;s action area. The button widget is returned, but usually
you don&apos;t need it.


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="button_text">
<parameter_description> text of button, or stock ID
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> response ID for the button
</parameter_description>
</parameter>
</parameters>
<return> the button widget that was added
</return>
</function>

<function name="gtk_tree_store_move_after">
<description>
Moves @iter in @tree_store to the position after @position. @iter and
@position should be in the same level. Note that this function only
works with unsorted stores. If @position is %NULL, @iter will be moved
to the start of the level.

Since: 2.2

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_deiconify">
<description>
Asks to deiconify (i.e. unminimize) the specified @window. Note
that you shouldn&apos;t assume the window is definitely deiconified
afterward, because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could iconify it
again before your code which assumes deiconification gets to run.

You can track iconification via the &quot;window_state_event&quot; signal
on #GtkWidget.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_resize">
<description>
Resizes the window as if the user had done so, obeying geometry
constraints. The default geometry constraint is that windows may
not be smaller than their size request; to override this
constraint, call gtk_widget_set_size_request() to set the window&apos;s
request to a smaller value.

If gtk_window_resize() is called before showing a window for the
first time, it overrides any default size set with
gtk_window_set_default_size().

Windows may not be resized smaller than 1 by 1 pixels.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width in pixels to resize the window to
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height in pixels to resize the window to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_get_shadow_type">
<description>
Retrieves the shadow type of the frame. See
gtk_frame_set_shadow_type().


</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
</parameters>
<return> the current shadow type of the frame.
</return>
</function>

<function name="gtk_tree_view_column_focus_cell">
<description>
Sets the current keyboard focus to be at @cell, if the column contains
2 or more editable and activatable cells.

Since: 2.2

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_sort_column_id">
<description>
Sets the logical @sort_column_id that this column sorts on when this column 
is selected for sorting.  Doing so makes the column header clickable.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="sort_column_id">
<parameter_description> The @sort_column_id of the model to sort on.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_row_changed">
<description>
Emits the &quot;row_changed&quot; signal on @tree_model.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the changed row
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter pointing to the changed row
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_delete_entry">
<description>
Deletes the menu item which was created from @entry by the given
item factory.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="entry">
<parameter_description> a #GtkItemFactoryEntry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_range_interactive">
<description>
Same as gtk_text_buffer_insert_range(), but does nothing if the
insertion point isn&apos;t editable. The @default_editable parameter
indicates whether the text is editable at @iter if no tags
enclosing @iter affect editability. Typically the result of
gtk_text_view_get_editable() is appropriate here.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> a position in a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> another position in the same buffer as @start
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of the buffer
</parameter_description>
</parameter>
</parameters>
<return> whether an insertion was possible at @iter
</return>
</function>

<function name="gtk_tree_drag_dest_drop_possible">
<description>
Determines whether a drop is possible before the given @dest_path,
at the same depth as @dest_path. i.e., can we drop the data in
@selection_data at that location. @dest_path does not have to
exist; the return value will almost certainly be %FALSE if the
parent of @dest_path doesn&apos;t exist, though.


</description>
<parameters>
<parameter name="drag_dest">
<parameter_description> a #GtkTreeDragDest
</parameter_description>
</parameter>
<parameter name="dest_path">
<parameter_description> destination row
</parameter_description>
</parameter>
<parameter name="selection_data">
<parameter_description> the data being dragged
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a drop is possible before @dest_path
</return>
</function>

<function name="gtk_window_maximize">
<description>
Asks to maximize @window, so that it becomes full-screen. Note that
you shouldn&apos;t assume the window is definitely maximized afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could unmaximize it
again, and not all window managers support maximization. But
normally the window will end up maximized. Just don&apos;t write code
that crashes if not.

It&apos;s permitted to call this function before showing a window,
in which case the window will be maximized when it appears onscreen
initially.

You can track maximization via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_new">
<description>
Creates a new #GtkStyle.

</description>
<parameters>
<parameter name="returns">
<parameter_description> a new #GtkStyle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_pixbuf_new">
<description>
Creates a new #GtkCellRendererPixbuf. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the &quot;pixbuf&quot; property on the cell renderer to a pixbuf value
in the model, thus rendering a different image in each row of the
#GtkTreeView.


</description>
<parameters>
</parameters>
<return> the new cell renderer
</return>
</function>

<function name="gtk_im_context_simple_new">
<description>
Creates a new #GtkIMContextSimple.


</description>
<parameters>
</parameters>
<return> a new #GtkIMContextSimple.
</return>
</function>

<function name="gtk_image_new_from_file">
<description>
Creates a new #GtkImage displaying the file @filename. If the file
isn&apos;t found or can&apos;t be loaded, the resulting #GtkImage will
display a &quot;broken image&quot; icon. This function never returns %NULL,
it always returns a valid #GtkImage widget.

If the file contains an animation, the image will contain an
animation.

If you need to detect failures to load the file, use
gdk_pixbuf_new_from_file() to load the file yourself, then create
the #GtkImage from the pixbuf. (Or for animations, use
gdk_pixbuf_animation_new_from_file()).

The storage type (gtk_image_get_storage_type()) of the returned
image is not defined, it will be whatever is appropriate for
displaying the file.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a filename
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_file_selection_get_select_multiple">
<description>
Determines whether or not the user is allowed to select multiple files in
the file list. See gtk_file_selection_set_select_multiple().


</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user is allowed to select multiple files in the
file list
</return>
</function>

<function name="gtk_text_iter_can_insert">
<description>
Considering the default editability of the buffer, and tags that
affect editability, determines whether text inserted at @iter would
be editable. If text inserted at @iter would be editable then the
user should be allowed to insert text at @iter.
gtk_text_buffer_insert_interactive() uses this function to decide
whether insertions are allowed at a given position.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="default_editability">
<parameter_description> %TRUE if text is editable by default
</parameter_description>
</parameter>
</parameters>
<return> whether text inserted at @iter would be editable
</return>
</function>

<function name="gtk_text_iter_set_line">
<description>
Moves iterator @iter to the start of the line @line_number.  If
@line_number is negative or larger than the number of lines in the
buffer, moves @iter to the start of the last line in the buffer.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="line_number">
<parameter_description> line number (counted from 0)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_pointer">
<description>
Obtains the location of the mouse pointer in widget coordinates.
Widget coordinates are a bit odd; for historical reasons, they are
defined as @widget-&amp;gt;window coordinates for widgets that are not
#GTK_NO_WINDOW widgets, and are relative to @widget-&amp;gt;allocation.x,
@widget-&amp;gt;allocation.y for widgets that are #GTK_NO_WINDOW widgets.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_append_widget">
<description>
Adds a widget to the end of the given toolbar.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget to add to the toolbar. 
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_line_wrap">
<description>
Toggles line wrapping within the #GtkLabel widget.  %TRUE makes it break
lines if text exceeds the widget&apos;s size.  %FALSE lets the text get cut off
by the edge of the widget if it exceeds the widget size.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="wrap">
<parameter_description> the setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_justify">
<description>
Returns the justification of the label. See gtk_label_set_justify ().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> #GtkJustification
</return>
</function>

<function name="gtk_accel_label_get_accel_widget">
<description>
Fetches the widget monitored by this accelerator label. See
gtk_accel_label_set_accel_widget().


</description>
<parameters>
<parameter name="accel_label">
<parameter_description> a #GtkAccelLabel
</parameter_description>
</parameter>
</parameters>
<return> the object monitored by the accelerator label,
or %NULL.
</return>
</function>

<function name="gtk_init_check">
<description>
This function does the same work as gtk_init() with only 
a single change: It does not terminate the program if the GUI can&apos;t be 
initialized. Instead it returns %FALSE on failure.

This way the application can fall back to some other means of communication 
with the user - for example a curses or command line interface.


</description>
<parameters>
<parameter name="argc">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argc&amp;lt;/parameter&amp;gt; parameter of your 
&amp;lt;function&amp;gt;main()&amp;lt;/function&amp;gt; function. Changed if any arguments were 
handled.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> Address of the &amp;lt;parameter&amp;gt;argv&amp;lt;/parameter&amp;gt; parameter of 
&amp;lt;function&amp;gt;main()&amp;lt;/function&amp;gt;. Any parameters understood by gtk_init() 
are stripped before return.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the GUI has been successfully initialized, 
%FALSE otherwise.
</return>
</function>

<function name="gtk_style_get_font">
<description>
Gets the #GdkFont to use for the given style. This is
meant only as a replacement for direct access to @style-&amp;gt;font
and should not be used in new code. New code should
use @style-&amp;gt;font_desc instead.


</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
</parameters>
<return> the #GdkFont for the style. This font is owned
by the style; if you want to keep around a copy, you must
call gdk_font_ref().
</return>
</function>

<function name="gtk_text_tag_new">
<description>
Creates a #GtkTextTag. Configure the tag using object arguments,
i.e. using g_object_set().


</description>
<parameters>
<parameter name="name">
<parameter_description> tag name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTextTag
</return>
</function>

<function name="gtk_handle_box_get_handle_position">
<description>
Gets the handle position of the handle box. See
gtk_handle_box_set_handle_position().


</description>
<parameters>
<parameter name="handle_box">
<parameter_description> a #GtkHandleBox
</parameter_description>
</parameter>
</parameters>
<return> the current handle position.
</return>
</function>

<function name="gtk_tree_view_column_get_spacing">
<description>
Returns the spacing of @tree_column.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> the spacing of @tree_column.
</return>
</function>

<function name="gtk_item_factory_create_menu_entries">
<description>
Creates the menu items from the @entries.

</description>
<parameters>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkMenuEntry&amp;lt;!-- --&amp;gt;s 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_collapse_all">
<description>
Recursively collapses all visible, expanded nodes in @tree_view.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_line">
<description>
Returns the line number containing the iterator. Lines in
a #GtkTextBuffer are numbered beginning with 0 for the first
line in the buffer.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> a line number
</return>
</function>

<function name="gtk_tree_view_get_reorderable">
<description>
Retrieves whether the user can reorder the tree via drag-and-drop. See
gtk_tree_view_set_reorderable().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the tree can be reordered.
</return>
</function>

<function name="gtk_notebook_get_show_border">
<description>
Returns whether a bevel will be drawn around the notebook pages. See
gtk_notebook_set_show_border().


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the bevel is drawn
</return>
</function>

<function name="gtk_selection_data_get_targets">
<description>
Gets the contents of @selection_data as an array of targets.
This can be used to interpret the results of getting
the standard TARGETS target that is always supplied for
any selection.


</description>
<parameters>
<parameter name="selection_data">
<parameter_description> a #GtkSelectionData object
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> location to store an array of targets. The result
stored here must be freed with g_free().
</parameter_description>
</parameter>
<parameter name="n_atoms">
<parameter_description> location to store number of items in @targets.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @selection_data contains a valid
array of targets, otherwise %FALSE.
</return>
</function>

<function name="gtk_icon_source_get_direction_wildcarded">
<description>
Gets the value set by gtk_icon_source_set_direction_wildcarded().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this icon source is a base for any text direction variant
</return>
</function>

<function name="gtk_list_store_set">
<description>
Sets the value of one or more cells in the row referenced by @iter.
The variable argument list should contain integer column numbers,
each column number followed by the value to be set.
The list is terminated by a -1. For example, to set column 0 with type
%G_TYPE_STRING to &quot;Foo&quot;, you would write &amp;lt;literal&amp;gt;gtk_list_store_set (store, iter,
0, &quot;Foo&quot;, -1)&amp;lt;/literal&amp;gt;.

</description>
<parameters>
<parameter name="list_store">
<parameter_description> a #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> row iterator
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> pairs of column number and value, terminated with -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_thaw">
<description>
This is a deprecated function, it doesn&apos;t do anything useful.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_adjustment">
<description>
Get the #GtkAdjustment which is the &quot;model&quot; object for #GtkRange.
See gtk_range_set_adjustment() for details.
The return value does not have a reference added, so should not
be unreferenced.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> a #GtkAdjustment
</return>
</function>

<function name="gtk_layout_put">
<description>
Adds @child_widget to @layout, at position (@x,@y).
@layout becomes the new parent container of @child_widget.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="child_widget">
<parameter_description> child widget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position of child widget
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position of child widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_popup_data">
<description>
Obtains the @popup_data which was passed to 
gtk_item_factory_popup_with_data(). This data is available until the menu
is popped down again.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> @popup_data associated with @ifactory
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_use_underline">
<description>
If true, an underline in the text indicates the next character should be
used for the mnemonic accelerator key.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_selectable">
<description>
Gets the value set by gtk_label_set_selectable().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user can copy text from the label
</return>
</function>

<function name="gtk_tree_view_column_get_sizing">
<description>
Returns the current type of @tree_column.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The type of @tree_column.
</return>
</function>

<function name="gtk_notebook_set_homogeneous_tabs">
<description>
Sets whether the tabs must have all the same size or not.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="homogeneous">
<parameter_description> %TRUE if all tabs should be the same size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_activate_default">
<description>
Activates the default widget for the window, unless the current 
focused widget has been configured to receive the default action 
(see #GTK_RECEIVES_DEFAULT in #GtkWidgetFlags), in which case the
focused widget is activated. 


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a widget got activated.
</return>
</function>

<function name="gtk_selection_owner_set_for_display">
<description>
Claim ownership of a given selection for a particular widget, or,
if @widget is %NULL, release ownership of the selection.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #Gdkdisplay where the selection is set 
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> new selection owner (a #GdkWidget), or %NULL.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an interned atom representing the selection to claim.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp with which to claim the selection
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation succeeded 

Since: 2.2
</return>
</function>

<function name="gtk_text_buffer_set_modified">
<description>
Used to keep track of whether the buffer has been modified since the
last time it was saved. Whenever the buffer is saved to disk, call
gtk_text_buffer_set_modified (@buffer, FALSE). When the buffer is modified,
it will automatically toggled on the modified bit again. When the modified
bit flips, the buffer emits a &quot;modified_changed&quot; signal.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> modification flag setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_copy_clipboard">
<description>
Copies the currently-selected text to a clipboard.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard object to copy to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_update_policy">
<description>
Sets the update behavior of a spin button. This determines whether the
spin button is always updated or only when a valid value is set.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="policy">
<parameter_description> a #GtkSpinButtonUpdatePolicy value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_copy_values">
<description>
Copies the values from @src to @dest so that @dest has the same values
as @src. Frees existing values in @dest.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GtkTextAttributes
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> another #GtkTextAttributes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_set_title">
<description>
Sets the title string for the menu.  The title is displayed when the menu
is shown as a tearoff menu.

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> a string containing the title for the menu.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_buffer">
<description>
Returns the #GtkTextBuffer this iterator is associated with.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> the buffer
</return>
</function>

<function name="gtk_text_view_set_right_margin">
<description>
Sets the default right margin for text in the text view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="right_margin">
<parameter_description> right margin in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_size_wildcarded">
<description>
Gets the value set by gtk_icon_source_set_size_wildcarded().


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this icon source is a base for any icon size variant
</return>
</function>

<function name="gtk_widget_set_redraw_on_allocate">
<description>
Sets whether a when a widgets size allocation changes, the entire
widget is queued for drawing. By default, this setting is %TRUE and
the entire widget is redrawn on every size change. If your widget
leaves the upper left are unchanged when made bigger, turning this
setting on will improve performance.

Note that for %NO_WINDOW widgets setting this flag to %FALSE turns
off all allocation on resizing: the widget will not even redraw if
its position changes; this is to allow containers that don&apos;t draw
anything to avoid excess invalidations. If you set this flag on a
%NO_WINDOW widget that &amp;lt;emphasis&amp;gt;does&amp;lt;/emphasis&amp;gt; draw on @widget-&amp;gt;window, 
you are responsible for invalidating both the old and new allocation 
of the widget when the widget is moved and responsible for invalidating
regions newly when the widget increases size.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="redraw_on_allocate">
<parameter_description> if %TRUE, the entire widget will be redrawn
when it is allocated to a new size. Otherwise, only the
new portion of the widget will be redrawn.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_shell_select_first">
<description>
Select the first visible or selectable child of the menu shell;
don&apos;t select tearoff items unless the only item is a tearoff
item.

Since: 2.2

</description>
<parameters>
<parameter name="menu_shell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
<parameter name="search_sensitive">
<parameter_description> if %TRUE, search for the first selectable
menu item, otherwise select nothing if
the first item isn&apos;t sensitive. This
should be %FALSE if the menu is being
popped up initially.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_tab_pos">
<description>
Gets the edge at which the tabs for switching pages in the
notebook are drawn.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the edge at which the tabs are drawn
</return>
</function>

<function name="gtk_tree_view_get_cursor">
<description>
Fills in @path and @focus_column with the current path and focus column.  If
the cursor isn&apos;t currently set, then *@path will be %NULL.  If no column
currently has focus, then *@focus_column will be %NULL.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A pointer to be filled with the current cursor path, or %NULL
</parameter_description>
</parameter>
<parameter name="focus_column">
<parameter_description> A pointer to be filled with the current focus column, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_iter_from_string">
<description>
Sets @iter to a valid iterator pointing to @path_string, if it
exists. Otherwise, @iter is left invalid and %FALSE is returned.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="path_string">
<parameter_description> A string representation of a #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter was set.
</return>
</function>

<function name="gtk_text_layout_validate">
<description>
Validate regions of a #GtkTextLayout. The ::changed signal will
be emitted for each region validated.

</description>
<parameters>
<parameter name="tree">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="max_pixels">
<parameter_description> the maximum number of pixels to validate. (No more
than one paragraph beyond this limit will be validated)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_slice">
<description>
Returns the text in the given range. A &quot;slice&quot; is an array of
characters encoded in UTF-8 format, including the Unicode &quot;unknown&quot;
character 0xFFFC for iterable non-character elements in the buffer,
such as images.  Because images are encoded in the slice, byte and
character offsets in the returned array will correspond to byte
offsets in the text buffer. Note that 0xFFFC can occur in normal
text as well, so it is not a reliable indicator that a pixbuf or
widget is in the buffer.


</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of a range
</parameter_description>
</parameter>
</parameters>
<return> slice of text from the buffer
</return>
</function>

<function name="gtk_toolbar_get_tooltips">
<description>
Retrieves whether tooltips are enabled. See
gtk_toolbar_set_tooltips().


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if tooltips are enabled
</return>
</function>

<function name="gtk_text_iter_get_bytes_in_line">
<description>
Returns the number of bytes in the line containing @iter,
including the paragraph delimiters.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> number of bytes in the line
</return>
</function>

<function name="gtk_widget_set_name">
<description>
Widgets can be named, which allows you to refer to them from a
gtkrc file. You can apply a style to widgets with a particular name
in the gtkrc file. See the documentation for gtkrc files (on the
same page as the docs for #GtkRcStyle).


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name for the widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_max_width">
<description>
Sets the maximum width of the @tree_column.  If @max_width is -1, then the
maximum width is unset.  Note, the column can actually be wider than max
width if it&apos;s the last column in a view.  In this case, the column expands to
fill any extra space.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> The maximum width of the column in pixels, or -1.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_resize_grip">
<description>
Draws a resize grip in the given rectangle on @window using the given
parameters. 

This function is deprecated, use gtk_paint_resize_grip() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle in which to draw the resize grip
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_response">
<description>
Emits the &quot;response&quot; signal with the given response ID. Used to
indicate that the user has responded to the dialog in some way;
typically either you or gtk_dialog_run() will be monitoring the
&quot;response&quot; signal and take appropriate action.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> response ID 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_backward_display_line_start">
<description>
Moves the given @iter backward to the next display line start.  A
display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph.  If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_settings_get_default">
<description>
Gets the #GtkSettings object for the default GDK screen, creating
it if necessary. See gtk_settings_get_for_screen().


</description>
<parameters>
</parameters>
<return> a #GtkSettings object. If there is no default
screen, then returns %NULL.
</return>
</function>

<function name="gtk_text_iter_get_chars_in_line">
<description>
Returns the number of characters in the line containing @iter,
including the paragraph delimiters.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> number of characters in the line
</return>
</function>

<function name="gtk_tree_model_get_path">
<description>
Returns a newly-created #GtkTreePath referenced by @iter.  This path should
be freed with gtk_tree_path_free().


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> a newly-created #GtkTreePath.
</return>
</function>

<function name="gtk_progress_bar_set_pulse_step">
<description>
Sets the fraction of total progress bar length to move the
bouncing block for each call to gtk_progress_bar_pulse().

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="fraction">
<parameter_description> fraction between 0.0 and 1.0
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_iter_next">
<description>
Sets @iter to point to the node following it at the current level.  If there
is no next @iter, %FALSE is returned and @iter is set to be invalid.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter has been changed to the next node.
</return>
</function>

<function name="gtk_range_set_inverted">
<description>
Ranges normally move from lower to higher values as the
slider moves from top to bottom or left to right. Inverted
ranges have higher values at the top or on the right rather than
on the bottom or left.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to invert the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_stock">
<description>
Sets the the icon for a given drag from a stock ID.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the ID of the stock icon to use for the drag.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within the icon of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within the icon of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_hide">
<description>
Reverses the effects of gtk_widget_show(), causing the widget to be
hidden (invisible to the user).

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_get_module_path">
<description>
Determines the search path for a particular type of module.


</description>
<parameters>
<parameter name="type">
<parameter_description> the type of the module, for instance &apos;modules&apos;, &apos;engines&apos;, immodules&apos;
</parameter_description>
</parameter>
</parameters>
<return> the search path for the module type. Free with g_strfreev().
</return>
</function>

<function name="gtk_item_factory_create_items">
<description>
Creates the menu items from the @entries.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkItemFactoryEntry&amp;lt;!-- --&amp;gt;s whose @callback members
must by of type #GtkItemFactoryCallback1
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> data passed to the callback functions of all entries
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_set_label_widget">
<description>
Set the label widget for the frame. This is the widget that
will appear embedded in the top edge of the frame as a
title.

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="label_widget">
<parameter_description> the new label widget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_has_screen">
<description>
Checks whether there is a #GdkScreen is associated with
this widget. All toplevel widgets have an associated
screen, and all widgets added into a heirarchy with a toplevel
window at the top.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there is a #GdkScreen associcated
with the widget.

Since: 2.2
</return>
</function>

<function name="gtk_window_iconify">
<description>
Asks to iconify (i.e. minimize) the specified @window. Note that
you shouldn&apos;t assume the window is definitely iconified afterward,
because other entities (e.g. the user or &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;) could deiconify it
again, or there may not be a window manager in which case
iconification isn&apos;t possible, etc. But normally the window will end
up iconified. Just don&apos;t write code that crashes if not.

It&apos;s permitted to call this function before showing a window,
in which case the window will be iconified before it ever appears
onscreen.

You can track iconification via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_foreach">
<description>
Invokes @callback on each non-internal child of @container.  See
gtk_container_forall() for details on what constitutes an
&quot;internal&quot; child.  Most applications should use
gtk_container_foreach(), rather than gtk_container_forall().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a callback
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> callback user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_set_get_sizes">
<description>
Obtains a list of icon sizes this icon set can render. The returned
array must be freed with g_free().


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="sizes">
<parameter_description> return location for array of sizes
</parameter_description>
</parameter>
<parameter name="n_sizes">
<parameter_description> location to store number of elements in returned array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_new_with_model">
<description>
Creates a new #GtkTreeModel, with @child_model as the child_model.


</description>
<parameters>
<parameter name="child_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkTreeModel.
</return>
</function>

<function name="gtk_tree_path_prepend_index">
<description>
Prepends a new index to a path.  As a result, the depth of the path is
increased.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_border_free">
<description>
Frees a #GtkBorder structure.

</description>
<parameters>
<parameter name="border_">
<parameter_description> a #GtkBorder.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_set_adjustment">
<description>
Sets the adjustment to be used as the &quot;model&quot; object for this range
widget. The adjustment indicates the current range value, the
minimum and maximum range values, the step/page increments used
for keybindings and scrolling, and the page size. The page size
is normally 0 for #GtkScale and nonzero for #GtkScrollbar, and
indicates the size of the visible area of the widget being scrolled.
The page size affects the size of the scrollbar slider.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> a #GtkAdjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_at_cursor">
<description>
Simply calls gtk_text_buffer_insert (), using the current
cursor position as the insertion point.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> some text in UTF-8 format
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text, in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_get_resize_mode">
<description>
Returns the resize mode for the container. See
gtk_container_set_resize_mode ().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the current resize mode
</return>
</function>

<function name="gtk_item_factory_get_item_by_action">
<description>
Obtains the menu item which was constructed from the first 
#GtkItemFactoryEntry with the given @action.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> an action as specified in the @callback_action field
of #GtkItemFactoryEntry
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the menu item which corresponds to the given action, or %NULL
if no menu item was found
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_get_focus_vadjustment">
<description>
Retrieves the vertical focus adjustment for the container. See
gtk_container_set_focus_vadjustment ().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the vertical focus adjustment, or %NULL if
none has been set.
</return>
</function>

<function name="gtk_image_menu_item_new">
<description>
Creates a new #GtkImageMenuItem with an empty label.

</description>
<parameters>
<parameter name="returns">
<parameter_description> a new #GtkImageMenuItem.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_menu_item_new_with_mnemonic">
<description>
Creates a new #GtkRadioMenuItem containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the menu item.

</description>
<parameters>
<parameter name="group">
<parameter_description> group the radio menu item is inside
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkRadioMenuItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_get_label_widget">
<description>
Retrieves the label widget for the frame. See
gtk_frame_set_label_widget().


</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
</parameters>
<return> the label widget, or %NULL if there is none.
</return>
</function>

<function name="gtk_accelerator_name">
<description>
Converts an accelerator keyval and modifier mask
into a string parseable by gtk_accelerator_parse().
For example, if you pass in #GDK_q and #GDK_CONTROL_MASK,
this function returns &quot;&amp;lt;Control&amp;gt;q&quot;. 

The caller of this function must free the returned string.

</description>
<parameters>
<parameter name="accelerator_key">
<parameter_description>  accelerator keyval
</parameter_description>
</parameter>
<parameter name="accelerator_mods">
<parameter_description> accelerator modifier mask
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>          a newly-allocated accelerator name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_remove">
<description>
Removes @widget from @container. @widget must be inside @container.
Note that @container will own a reference to @widget, and that this
may be the last reference held; so removing a widget from its
container can destroy that widget. If you want to use @widget
again, you need to add a reference to it while it&apos;s not inside
a container, using g_object_ref().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a current child of @container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_focus_in">
<description>
Notify the input method that the widget to which this
input context corresponds has lost gained. The input method
may, for example, change the displayed feedback to reflect
this change.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_stock_item_free">
<description>
Frees a stock item allocated on the heap, such as one returned by
gtk_stock_item_copy(). Also frees the fields inside the stock item,
if they are not %NULL.


</description>
<parameters>
<parameter name="item">
<parameter_description> a #GtkStockItem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_menu_label_text">
<description>
Creates a new label and sets it as the menu label of @child.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
<parameter name="menu_text">
<parameter_description> the label text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_insert_page_menu">
<description>
Insert a page into @notebook at the given position, specifying
the widget to use as the label in the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu, if that is enabled. If %NULL, and @tab_label
is a #GtkLabel or %NULL, then the menu label will be
a newly created label with the same text as @tab_label;
If @tab_label is not a #GtkLabel, @menu_label must be
specified if the page-switch menu is to be used.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page after all other pages.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_string_from_iter">
<description>
Generates a string representation of the iter. This string is a &apos;:&apos;
separated list of numbers. For example, &quot;4:10:0:3&quot; would be an
acceptable return value for this string.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string. Must be freed with g_free().

Since: 2.2
</return>
</function>

<function name="gtk_color_selection_get_previous_color">
<description>
Fills @color in with the original color value.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor to fill in with the original color value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_widget_propagate_screen_changed">
<description>
Propagates changes in the screen for a widget to all
children, emitting ::screen_changed.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="previous_screen">
<parameter_description> Previous screen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_factory_lookup">
<description>
Looks up @stock_id in the icon factory, returning an icon set
if found, otherwise %NULL. For display to the user, you should
use gtk_style_lookup_icon_set() on the #GtkStyle for the
widget that will display the icon, instead of using this
function directly, so that themes are taken into account.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return> icon set of @stock_id.
</return>
</function>

<function name="gtk_tree_view_column_get_clickable">
<description>
Returns %TRUE if the user can click on the header for the column.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if user can click the column header.
</return>
</function>

<function name="gtk_widget_intersect">
<description>
Computes the intersection of a @widget&apos;s area and @area, storing
the intersection in @intersection, and returns %TRUE if there was
an intersection.  @intersection may be %NULL if you&apos;re only
interested in whether there was an intersection.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> a rectangle
</parameter_description>
</parameter>
<parameter name="intersection">
<parameter_description> rectangle to store intersection of @widget and @area
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was an intersection
</return>
</function>

<function name="gtk_window_get_screen">
<description>
Returns the #GdkScreen associated with @window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkScreen.

Since: 2.2
</return>
</function>

<function name="gtk_text_buffer_insert_with_tags_by_name">
<description>
Same as gtk_text_buffer_insert_with_tags (), but allows you
to pass in tag names instead of tag objects.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> position in @buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 text
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text, or -1
</parameter_description>
</parameter>
<parameter name="first_tag_name">
<parameter_description> name of a tag to apply to @text
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> more tag names
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_set_background">
<description>
Sets the background of @window to the background color or pixmap
specified by @style for the given state.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_mnemonic_widget">
<description>
Retrieves the target of the mnemonic (keyboard shortcut) of this
label. See gtk_label_set_mnemonic_widget ().


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the target of the label&apos;s mnemonic, or %NULL if none
has been set and the default algorithm will be used.
</return>
</function>

<function name="gtk_image_get_pixmap">
<description>
Gets the pixmap and mask being displayed by the #GtkImage.
The storage type of the image must be %GTK_IMAGE_EMPTY or
%GTK_IMAGE_PIXMAP (see gtk_image_get_storage_type()).
The caller of this function does not own a reference to the
returned pixmap and mask.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> location to store the pixmap, or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store the mask, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_tree_selection_set_tree_view">
<description>
Sets the #GtkTreeView of @selection.  This function should not be invoked, as
it is used internally by #GtkTreeView.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="tree_view">
<parameter_description> The #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unrealize">
<description>
This function is only useful in widget implementations.
Causes a widget to be unrealized (frees all GDK resources
associated with the widget, such as @widget-&amp;gt;window).


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_sort_column_id">
<description>
Gets the logical @sort_column_id that the model sorts on when this
column is selected for sorting.
See gtk_tree_view_column_set_sort_column_id().


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> the current @sort_column_id for this column, or -1 if
this column can&apos;t be used for sorting.
</return>
</function>

<function name="gtk_widget_list_accel_closures">
<description>
Lists the closures used by @widget for accelerator group connections
with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
The closures can be used to monitor accelerator changes on @widget,
by connecting to the ::accel_changed signal of the #GtkAccelGroup of a 
closure which can be found out with gtk_accel_group_from_accel_closure().

</description>
<parameters>
<parameter name="widget">
<parameter_description>  widget to list accelerator closures for
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a newly allocated #GList of closures
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_widget_propagate_hierarchy_changed">
<description>
Propagates changes in the anchored state to a widget and all
children, unsetting or setting the %ANCHORED flag, and
emitting ::hierarchy_changed.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="previous_toplevel">
<parameter_description> Previous toplevel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_remove">
<description>
Remove a tag from the table. This will remove the table&apos;s
reference to the tag, so be careful - the tag will end
up destroyed if you don&apos;t have a reference to it.

</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTextTagTable
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_snap_to_ticks">
<description>
Sets the policy as to whether values are corrected to the nearest step 
increment when a spin button is activated after providing an invalid value.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="snap_to_ticks">
<parameter_description> a flag indicating if invalid values should be corrected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accelerator_parse">
<description>
Parses a string representing an accelerator. The
format looks like &quot;&amp;lt;Control&amp;gt;a&quot; or &quot;&amp;lt;Shift&amp;gt;&amp;lt;Alt&amp;gt;F1&quot; or
&quot;&amp;lt;Release&amp;gt;z&quot; (the last one is for key release).
The parser is fairly liberal and allows lower or upper case,
and also abbreviations such as &quot;&amp;lt;Ctl&amp;gt;&quot; and &quot;&amp;lt;Ctrl&amp;gt;&quot;.

If the parse fails, @accelerator_key and @accelerator_mods will
be set to 0 (zero).

</description>
<parameters>
<parameter name="accelerator">
<parameter_description>      string representing an accelerator
</parameter_description>
</parameter>
<parameter name="accelerator_key">
<parameter_description>  return location for accelerator keyval
</parameter_description>
</parameter>
<parameter name="accelerator_mods">
<parameter_description> return location for accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_type_hint">
<description>
By setting the type hint for the window, you allow the window
manager to decorate and handle the window in a way which is
suitable to the function of the window in your application.

This function should be called before the window becomes visible.

gtk_dialog_new_with_buttons() and other convenience functions in GTK+
will sometimes call gtk_window_set_type_hint() on your behalf.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> the window type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_request_contents">
<description>
Requests the contents of clipboard as the given target.
When the results of the result are later received the supplied callback
will be called.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description>    an atom representing the form into which the clipboard
owner should convert the selection.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  A function to call when the results are received
(or the retrieval fails). If the retrieval fails
the length field of @selection_data will be
negative.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_filter_keypress">
<description>
Allow an input method to internally handle a key press event.
If this function returns %TRUE, then no further processing
should be done for this keystroke.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the key event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the input method handled the keystroke.

</return>
</function>

<function name="gtk_tree_view_set_cursor">
<description>
Sets the current keyboard focus to be at @path, and selects it.  This is
useful when you want to focus the user&apos;s attention on a particular row.  If
@focus_column is not %NULL, then focus is given to the column specified by 
it. Additionally, if @focus_column is specified, and @start_editing is 
%TRUE, then editing should be started in the specified cell.  
This function is often followed by @gtk_widget_grab_focus (@tree_view) 
in order to give keyboard focus to the widget.  Please note that editing 
can only happen when the widget is realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath
</parameter_description>
</parameter>
<parameter name="focus_column">
<parameter_description> A #GtkTreeViewColumn, or %NULL
</parameter_description>
</parameter>
<parameter name="start_editing">
<parameter_description> %TRUE if the specified cell should start being edited.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_alignment">
<description>
Sets the alignment of the title or custom widget inside the column header.
The alignment determines its location inside the button -- 0.0 for left, 0.5
for center, 1.0 for right.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> The alignment, which is between [0.0 and 1.0] inclusive.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_layout_index_to_text_index">
<description>
Converts from a position in the entry contents (returned
by gtk_entry_get_text()) to a position in the
entry&apos;s #PangoLayout (returned by gtk_entry_get_layout(),
with text retrieved via pango_layout_get_text()).


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
<parameter name="layout_index">
<parameter_description> byte index into the entry layout text
</parameter_description>
</parameter>
</parameters>
<return> byte index into the entry contents
</return>
</function>

<function name="gtk_tree_store_set_value">
<description>
Sets the data in the cell specified by @iter and @column.
The type of @value must be convertible to the type of the
column.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> a #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> column number to modify
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value for the cell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_begin_resize_drag">
<description>
Starts resizing a window. This function is used if an application
has window resizing controls. When GDK can support it, the resize
will be done using the standard mechanism for the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt; or windowing
system. Otherwise, GDK will try to emulate window resizing,
potentially not all that well, depending on the windowing system.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> mouse button that initiated the drag
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> position of the resize control
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> X position where the user clicked to initiate the drag, in root window coordinates
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> Y position where the user clicked to initiate the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp from the click event that initiated the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_layout_get_buffer">
<description>
Gets the text buffer used by the layout. See
gtk_text_layout_set_buffer().


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
</parameters>
<return> the text buffer used by the layout.
</return>
</function>

<function name="gtk_tree_path_down">
<description>
Moves @path to point to the first child of the current path.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_uposition">
<description>

Sets the position of a widget. The funny &quot;u&quot; in the name comes from
the &quot;user position&quot; hint specified by the X Window System, and
exists for legacy reasons. This function doesn&apos;t work if a widget
is inside a container; it&apos;s only really useful on #GtkWindow.

Don&apos;t use this function to center dialogs over the main application
window; most window managers will do the centering on your behalf
if you call gtk_window_set_transient_for(), and it&apos;s really not
possible to get the centering to work correctly in all cases from
application code. But if you insist, use gtk_window_set_position()
to set #GTK_WIN_POS_CENTER_ON_PARENT, don&apos;t do the centering
manually.

Note that although @x and @y can be individually unset, the position
is not honoured unless both @x and @y are set.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x position; -1 to unset x; -2 to leave x unchanged
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y position; -1 to unset y; -2 to leave y unchanged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_apply_tag">
<description>
Emits the &quot;apply_tag&quot; signal on @buffer. The default
handler for the signal applies @tag to the given range.
@start and @end do not have to be in order.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be tagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be tagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_im_context_set_client_window">
<description>
Set the client window for the input context; this is the
#GdkWindow in which the input appears. This window is
used in order to correctly position status windows, and may
also be used for purposes internal to the input method.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description>  the client window. This may be %NULL to indicate
that the previous client window no longer exists.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_fixed_get_has_window">
<description>
Gets whether the #GtkFixed has it&apos;s own #GdkWindow.
See gdk_fixed_set_has_window().


</description>
<parameters>
<parameter name="fixed">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @fixed has its own window.
</return>
</function>

<function name="gtk_tree_store_set_valist">
<description>
See gtk_tree_store_set(); this version takes a &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; for
use by language bindings.


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; of column/value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_parent">
<description>
This function is useful only when implementing subclasses of #GtkContainer.
Sets the container as the parent of @widget, and takes care of
some details such as updating the state and style of the child
to reflect its new location. The opposite function is
gtk_widget_unparent().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> parent container
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_forall">
<description>
Invokes @callback on each child of @container, including children
that are considered &quot;internal&quot; (implementation details of the
container). &quot;Internal&quot; children generally weren&apos;t added by the user
of the container, but were added by the container implementation
itself.  Most applications should use gtk_container_foreach(),
rather than gtk_container_forall().

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a callback
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> callback user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_radio_button_new_with_mnemonic_from_widget">
<description>
Creates a new #GtkRadioButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.

</description>
<parameters>
<parameter name="group">
<parameter_description> widget to get radio group from
</parameter_description>
</parameter>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkRadioButton
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_get_active">
<description>
Returns whether the check menu item is active. See
gtk_check_menu_item_set_active ().


</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the menu item is checked.
</return>
</function>

<function name="gtk_widget_get_pango_context">
<description>
Gets a #PangoContext with the appropriate colormap, font description
and base direction for this widget. Unlike the context returned
by gtk_widget_create_pango_context(), this context is owned by
the widget (it can be used until the screen for the widget changes
or the widget is removed from its toplevel), and will be updated to
match any changes to the widget&apos;s attributes.

If you create and keep a #PangoLayout using this context, you must
deal with changes to the context by calling pango_layout_context_changed()
on the layout in response to the ::style_set and ::direction_set signals
for the widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the #PangoContext for the widget.
</return>
</function>

<function name="gtk_draw_focus">
<description>
Draws a focus indicator around the given rectangle on @window using the
given style.

This function is deprecated, use gtk_paint_focus() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x origin of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y origin of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle around which to draw a focus indicator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_get_event_widget">
<description>
If @event is %NULL or the event was not associated with any widget,
returns %NULL, otherwise returns the widget that received the event
originally.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the widget that originally received @event, or %NULL
</return>
</function>

<function name="gtk_container_child_set_valist">
<description>
Sets one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property to set
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> a %NULL-terminated list of property names and values, starting
with @first_prop_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_default_direction">
<description>
Obtains the current default reading direction. See
gtk_widget_set_default_direction().


</description>
<parameters>
</parameters>
<return> the current default direction. 
</return>
</function>

<function name="gtk_table_get_homogeneous">
<description>
Returns whether the table cells are all constrained to the same
width and height. (See gtk_table_set_homogenous ())


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cells are all constrained to the same size
</return>
</function>

<function name="gtk_tree_view_create_row_drag_icon">
<description>
Creates a #GdkPixmap representation of the row at @path.  This image is used
for a drag icon.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath in @tree_view
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated pixmap of the drag icon.
</return>
</function>

<function name="gtk_tree_view_scroll_to_cell">
<description>
Moves the alignments of @tree_view to the position specified by @column and
@path.  If @column is %NULL, then no horizontal scrolling occurs.  Likewise,
if @path is %NULL no vertical scrolling occurs.  At a minimum, one of @column
or @path need to be non-%NULL.  @row_align determines where the row is
placed, and @col_align determines where @column is placed.  Both are expected
to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means
right/bottom alignment, 0.5 means center.

If @use_align is %FALSE, then the alignment arguments are ignored, and the
tree does the minimum amount of work to scroll the cell onto the screen.
This means that the cell will be scrolled to the edge closest to it&apos;s current
position.  If the cell is currently visible on the screen, nothing is done.

This function only works if the model is set, and @path is a valid row on the
model.  If the model changes before the @tree_view is realized, the centered
path will be modified to reflect this change.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The path of the row to move to, or %NULL.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> The #GtkTreeViewColumn to move horizontally to, or %NULL.
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments, or %FALSE.
</parameter_description>
</parameter>
<parameter name="row_align">
<parameter_description> The vertical alignment of the row specified by @path.
</parameter_description>
</parameter>
<parameter name="col_align">
<parameter_description> The horizontal alignment of the column specified by @column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_stock_list_ids">
<description>
Retrieves a list of all known stock IDs added to a #GtkIconFactory
or registered with gtk_stock_add(). The list must be freed with g_slist_free(),
and each string in the list must be freed with g_free().


</description>
<parameters>
</parameters>
<return> a list of known stock IDs
</return>
</function>

<function name="gtk_tree_model_row_deleted">
<description>
Emits the &quot;row_deleted&quot; signal on @tree_model.  This should be called by
models after a row has been removed.  The location pointed to by @path should
be the location that the row previously was at.  It may not be a valid
location anymore.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath pointing to the previous location of the deleted row.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_get_state">
<description>
Obtains the widget state this icon source applies to. The return
value is only useful/meaningful if the widget state is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt;
wildcarded.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> widget state this source matches
</return>
</function>

<function name="gtk_text_view_get_pixels_below_lines">
<description>
Gets the value set by gtk_text_view_set_pixels_below_lines().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default number of blank pixels below paragraphs
</return>
</function>

<function name="_gtk_widget_peek_colormap">
<description>
Returns colormap currently pushed by gtk_widget_push_colormap, if any.


</description>
<parameters>
</parameters>
<return> the currently pushed colormap, or %NULL if there is none.
</return>
</function>

<function name="gtk_clipboard_request_text">
<description>
Requests the contents of the clipboard as text. When the text is
later received, it will be converted to UTF-8 if necessary, and
@callback will be called. 

The @text parameter to @callback will contain the resulting text if
the request succeeded, or %NULL if it failed. This could happen for
various reasons, in particular if the clipboard was empty or if the
contents of the clipboard could not be converted into text form.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description>  a function to call when the text is received,
or the retrieval fails. (It will always be called
one way or the other.)
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_set_model">
<description>
Sets the model of @tree_model_sort to be @model.  If @model is NULL, then the
old model is unset.  The sort function is unset as a result of this call.
The model will be in an unsorted state until a sort function is set.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> The #GtkTreeModelSort.
</parameter_description>
</parameter>
<parameter name="child_model">
<parameter_description> A #GtkTreeModel, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_style_ref">
<description>
Deprecated equivalent of g_object_ref().

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> @style.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_headers_clickable">
<description>
Allow the column title buttons to be clicked.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE if the columns are clickable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_copy">
<description>
Creates a new #GtkTreePath as a copy of @path.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> A new #GtkTreePath.
</return>
</function>

<function name="gtk_text_iter_in_range">
<description>
Checks whether @iter falls in the range [@start, @end).
@start and @end must be in ascending order.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start of range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> end of range
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is in the range
</return>
</function>

<function name="gtk_table_get_default_row_spacing">
<description>
Gets the default row spacing for the table. This is
the spacing that will be used for newly added rows.
(See gtk_table_set_row_spacings())


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
</parameters>
<return>value: the default row spacing
</return>
</function>

<function name="gtk_tree_view_column_set_widget">
<description>
Sets the widget in the header to be @widget.  If widget is %NULL, then the
header button is set with a #GtkLabel set to the title of @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> A child #GtkWidget, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_factory_lookup_default">
<description>
Looks for an icon in the list of default icon factories.  For
display to the user, you should use gtk_style_lookup_icon_set() on
the #GtkStyle for the widget that will display the icon, instead of
using this function directly, so that themes are taken into
account.



</description>
<parameters>
<parameter name="stock_id">
<parameter_description> an icon name
</parameter_description>
</parameter>
</parameters>
<return> a #GtkIconSet, or %NULL
</return>
</function>

<function name="gtk_tree_view_row_expanded">
<description>
Returns %TRUE if the node pointed to by @path is expanded in @tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A #GtkTreePath to test expansion state.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if #path is expanded.
</return>
</function>

<function name="gtk_window_unstick">
<description>
Asks to unstick @window, which means that it will appear on only
one of the user&apos;s desktops. Note that you shouldn&apos;t assume the
window is definitely unstuck afterward, because other entities
(e.g. the user or &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
manager&amp;lt;/link&amp;gt;) could stick it again. But normally the window will
end up stuck. Just don&apos;t write code that crashes if not.

You can track stickiness via the &quot;window_state_event&quot; signal
on #GtkWidget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_move">
<description>
Moves a current child of @layout to a new position.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="child_widget">
<parameter_description> a current child of @layout
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position to move to
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position to move to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_pop_composite_child">
<description>
Cancels the effect of a previous call to gtk_widget_push_composite_child().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_search_equal_func">
<description>
Returns the compare function currently in use.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> the currently used compare function for the search code.
</return>
</function>

<function name="_gtk_window_activate_key">
<description>
Activates mnemonics and accelerators for this #GtKWindow


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEventKey
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a mnemonic or accelerator was found and activated.
</return>
</function>

<function name="gtk_text_view_move_visually">
<description>
Move the iterator a given number of characters visually, treating
it as the strong cursor position. If @count is positive, then the
new strong cursor position will be @count positions to the right of
the old cursor position. If @count is negative then the new strong
cursor position will be @count positions to the left of the old
cursor position.

In the presence of bidirection text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description>   number of characters to move (negative moves left, positive moves right)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not on the end iterator
</return>
</function>

<function name="gtk_tree_selection_set_select_function">
<description>
Sets the selection function.  If set, this function is called before any node
is selected or unselected, giving some control over which nodes are selected.
The select function should return %TRUE if the state of the node may be toggled,
and %FALSE if the state of the node should be left unchanged.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The selection function.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The selection function&apos;s data.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> The destroy function for user data.  May be NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_forward_display_line_end">
<description>
Moves the given @iter forward to the next display line end.  A
display line is different from a paragraph. Paragraphs are
separated by newlines or other paragraph separator characters.
Display lines are created by line-wrapping a paragraph.  If
wrapping is turned off, display lines and paragraphs will be the
same. Display lines are divided differently for each view, since
they depend on the view&apos;s width; paragraphs are the same in all
views, since they depend on the contents of the #GtkTextBuffer.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter was moved and is not on the end iterator
</return>
</function>

<function name="gtk_widget_modify_bg">
<description>
Sets the background color for a widget in a particular state.  All
other style values are left untouched. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the background color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_bg().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_editable_editing_done">
<description>
Emits the &quot;editing_done&quot; signal.  This signal is a sign for the cell renderer
to update it&apos;s value from the cell.

</description>
<parameters>
<parameter name="cell_editable">
<parameter_description> A #GtkTreeEditable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_clipboard_get_display">
<description>
Gets the #GdkDisplay associated with @clipboard


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @clipboard

Since: 2.2
</return>
</function>

<function name="gtk_image_set_from_pixbuf">
<description>
See gtk_image_new_from_pixbuf() for details. 


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_set_target_list">
<description>
Sets the target types that this widget can accept from drag-and-drop.
The widget must first be made into a drag destination with
gtk_drag_dest_set().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s a drag destination
</parameter_description>
</parameter>
<parameter name="target_list">
<parameter_description> list of droppable targets, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_get_previous_alpha">
<description>
Returns the previous alpha value.


</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
</parameters>
<return> an integer between 0 and 65535.
</return>
</function>

<function name="gtk_widget_modify_fg">
<description>
Sets the foreground color for a widget in a particular state.  All
other style values are left untouched. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the foreground color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated),
or %NULL to undo the effect of previous calls to
of gtk_widget_modify_fg().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_get_item">
<description>
Obtains the menu item which corresponds to @path. 

If the widget corresponding to @path is a menu item which opens a 
submenu, then the item is returned. If you are interested in the submenu, 
use gtk_item_factory_get_widget() instead.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to the menu item
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the menu item for the given path, or %NULL if @path doesn&apos;t
lead to a menu item
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_menu_item_set_image">
<description>
Sets the image of @image_menu_item to the given widget.

</description>
<parameters>
<parameter name="image_menu_item">
<parameter_description> a #GtkImageMenuItem.
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> a widget to set as the image for the menu item.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_add_child_in_window">
<description>
Adds a child at fixed coordinates in one of the text widget&apos;s
windows.  The window must have nonzero size (see
gtk_text_view_set_border_window_size()).  Note that the child
coordinates are given relative to the #GdkWindow in question, and
that these coordinates have no sane relationship to scrolling. When
placing a child in #GTK_TEXT_WINDOW_WIDGET, scrolling is
irrelevant, the child floats above all scrollable areas. But when
placing a child in one of the scrollable windows (border windows or
text window), you&apos;ll need to compute the child&apos;s correct position
in buffer coordinates any time scrolling occurs or buffer changes
occur, and then call gtk_text_view_move_child() to update the
child&apos;s position. Unfortunately there&apos;s no good way to detect that
scrolling has occurred, using the current API; a possible hack
would be to update all child positions when the scroll adjustments
change or the text buffer changes. See bug 64518 on
bugzilla.gnome.org for status of fixing this issue.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="which_window">
<parameter_description> which window the child should appear in
</parameter_description>
</parameter>
<parameter name="xpos">
<parameter_description> X position of child in window coordinates
</parameter_description>
</parameter>
<parameter name="ypos">
<parameter_description> Y position of child in window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_attributes">
<description>
Sets the attributes in the list as the attributes of @tree_column.
The attributes should be in attribute/column order, as in
gtk_tree_view_column_add_attribute(). All existing attributes
are removed, and replaced with the new attributes.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> the #GtkCellRenderer we&apos;re setting the attributes of
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_create_items_ac">
<description>
Creates the menu items from the @entries.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> the length of @entries
</parameter_description>
</parameter>
<parameter name="entries">
<parameter_description> an array of #GtkItemFactoryEntry&amp;lt;!-- --&amp;gt;s 
</parameter_description>
</parameter>
<parameter name="callback_data">
<parameter_description> data passed to the callback functions of all entries
</parameter_description>
</parameter>
<parameter name="callback_type">
<parameter_description> 1 if the callback functions in @entries are of type
#GtkItemFactoryCallback1, 2 if they are of type #GtkItemFactoryCallback2 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_new_from_image">
<description>
Creates a #GtkImage widget displaying a @image with a @mask.
A #GdkImage is a client-side image buffer in the pixel format of the
current display.
The #GtkImage does not assume a reference to the
image or mask; you still need to unref them if you own references.
#GtkImage will add its own reference rather than adopting yours.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage, or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_accel_map_load">
<description>
Parses a file previously saved with gtk_accel_map_save() for
accelerator specifications, and propagates them accordingly.

</description>
<parameters>
<parameter name="file_name">
<parameter_description> a file containing accelerator specifications
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_lock">
<description>
Locks the given accelerator group.

Locking an acelerator group prevents the accelerators contained
within it to be changed during runtime. Refer to
gtk_accel_map_change_entry() about runtime accelerator changes.

If called more than once, @accel_group remains locked until
gtk_accel_group_unlock() has been called an equivalent number
of times.

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_new_from_string">
<description>
Creates a new #GtkTreePath initialized to @path.  @path is expected to be a
colon separated list of numbers.  For example, the string &quot;10:4:0&quot; would
create a path of depth 3 pointing to the 11th child of the root node, the 5th
child of that 11th child, and the 1st child of that 5th child.  If an invalid
path string is passed in, %NULL is returned.


</description>
<parameters>
<parameter name="path">
<parameter_description> The string representation of a path.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GtkTreePath, or %NULL
</return>
</function>

<function name="gtk_entry_get_invisible_char">
<description>
Retrieves the character displayed in place of the real characters
for entries with visisbility set to false. See gtk_entry_set_invisible_char().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> the current invisible char, or 0, if the entry does not
show invisible text at all. 
</return>
</function>

<function name="gtk_window_new">
<description>
Creates a new #GtkWindow, which is a toplevel window that can
contain other widgets. Nearly always, the type of the window should
be #GTK_WINDOW_TOPLEVEL. If you&apos;re implementing something like a
popup menu from scratch (which is a bad idea, just use #GtkMenu),
you might use #GTK_WINDOW_POPUP. #GTK_WINDOW_POPUP is not for
dialogs, though in some other toolkits dialogs are called &quot;popups&quot;.
In GTK+, #GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.
On X11, popup windows are not controlled by the &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window manager&amp;lt;/link&amp;gt;.

If you simply want an undecorated window (no window borders), use
gtk_window_set_decorated(), don&apos;t use #GTK_WINDOW_POPUP.


</description>
<parameters>
<parameter name="type">
<parameter_description> type of window
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkWindow.
</return>
</function>

<function name="gtk_tree_row_reference_new_proxy">
<description>
You do not need to use this function.  Creates a row reference based on
@path.  This reference will keep pointing to the node pointed to by @path, so
long as it exists.  If @path isn&apos;t a valid path in @model, then %NULL is
returned.  However, unlike references created with
gtk_tree_row_reference_new(), it does not listen to the model for changes.
The creator of the row reference must do this explicitly using
gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),
gtk_tree_row_reference_reordered().  This must be called once per signal per
proxy.

This type of row reference is primarily meant by structures that need to
carefully monitor exactly when a row_reference updates itself, and is not
generally needed by most applications.


</description>
<parameters>
<parameter name="proxy">
<parameter_description> A proxy #GObject
</parameter_description>
</parameter>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A valid #GtkTreePath to monitor
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreeRowReference, or %NULL
</return>
</function>

<function name="gtk_notebook_set_tab_label_text">
<description>
Creates a new label and sets it as the tab label for the page
containing @child.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
<parameter name="tab_text">
<parameter_description> the label text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_expander_column">
<description>
Sets the column to draw the expander arrow at. It must be in @tree_view.  If
@column is %NULL, then the expander arrow is always at the first visible
column.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> %NULL, or the column to draw the expander arrow at.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_get_pulse_step">
<description>
Retrieves the pulse step set with gtk_progress_bar_set_pulse_step()


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return> a fraction from 0.0 to 1.0
</return>
</function>

<function name="gtk_text_iter_ends_word">
<description>
Determines whether @iter ends a natural-language word.  Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the end of a word
</return>
</function>

<function name="gtk_accel_map_save_fd">
<description>
Filedescriptor variant of gtk_accel_map_save().

Note that the file descriptor will not be closed by this function.

</description>
<parameters>
<parameter name="fd">
<parameter_description> a valid writable file descriptor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_widget">
<description>
Returns the #GtkWidget in the button on the column header.  If a custom
widget has not been set then %NULL is returned.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The #GtkWidget in the column header, or %NULL
</return>
</function>

<function name="gtk_notebook_get_scrollable">
<description>
Returns whether the tab label area has arrows for scrolling. See
gtk_notebook_set_scrollable().


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if arrows for scrolling are present
</return>
</function>

<function name="gtk_image_set_from_animation">
<description>
Causes the #GtkImage to display the given animation (or display
nothing, if you set the animation to %NULL).

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="animation">
<parameter_description> the #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_convert_iter_to_child_iter">
<description>
Sets @child_iter to point to the row pointed to by @sorted_iter.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="child_iter">
<parameter_description> An uninitialized #GtkTreeIter
</parameter_description>
</parameter>
<parameter name="sorted_iter">
<parameter_description> A valid #GtkTreeIter pointing to a row on @tree_model_sort.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_composite_name">
<description>
Sets a widgets composite name. The widget must be
a composite child of its parent; see gtk_widget_push_composite_child().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_frame_get_label_align">
<description>
Retrieves the X and Y alignment of the frame&apos;s label. See
gtk_frame_set_label_align().

</description>
<parameters>
<parameter name="frame">
<parameter_description> a #GtkFrame
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> location to store X alignment of frame&apos;s label, or %NULL
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> location to store X alignment of frame&apos;s label, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_cut_clipboard">
<description>
Copies the currently-selected text to a clipboard, then deletes
said text if it&apos;s editable.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="clipboard">
<parameter_description> the #GtkClipboard object to cut to.
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of the buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_text">
<description>
Returns &amp;lt;emphasis&amp;gt;text&amp;lt;/emphasis&amp;gt; in the given range.  If the range
contains non-text elements such as images, the character and byte
offsets in the returned string will not correspond to character and
byte offsets in the buffer. If you want offsets to correspond, see
gtk_text_iter_get_slice ().


</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of a range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of a range
</parameter_description>
</parameter>
</parameters>
<return> array of characters from the buffer
</return>
</function>

<function name="gtk_window_set_position">
<description>
Sets a position constraint for this window. If the old or new
constraint is %GTK_WIN_POS_CENTER_ALWAYS, this will also cause
the window to be repositioned to satisfy the new constraint. 

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> a position constraint.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_palette_from_string">
<description>
Parses a color palette string; the string is a colon-separated
list of color names readable by gdk_color_parse().


</description>
<parameters>
<parameter name="str">
<parameter_description> a string encoding a color palette.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> return location for allocated array of #GdkColor.
</parameter_description>
</parameter>
<parameter name="n_colors">
<parameter_description> return location for length of array.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a palette was successfully parsed.
</return>
</function>

<function name="gtk_text_layout_move_iter_to_line_end">
<description>
Move to the beginning or end of a display line.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> if negative, move to beginning of line, otherwise
               move to end of line.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_increments">
<description>
Sets the step and page increments for spin_button.  This affects how 
quickly the value changes when the spin button&apos;s arrows are activated.

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> increment applied for a button 1 press.
</parameter_description>
</parameter>
<parameter name="page">
<parameter_description> increment applied for a button 2 press.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unmap">
<description>
This function is only for use in widget implementations. Causes
a widget to be unmapped if it&apos;s currently mapped.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_sentence_start">
<description>
Moves backward to the previous sentence start; if @iter is already at
the start of a sentence, moves backward to the next one.  Sentence
boundaries are determined by Pango and should be correct for nearly
any language (if not, the correct fix would be to the Pango text
boundary algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_container_add_with_properties">
<description>
Adds @widget to @container, setting child properties at the same time.
See gtk_container_add() and gtk_container_child_set() for more details.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer 
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a widget to be placed inside @container 
</parameter_description>
</parameter>
<parameter name="first_prop_name">
<parameter_description> the name of the first child property to set 
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of property names and values, starting
with @first_prop_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_new_with_mnemonic">
<description>
Creates a new #GtkToggleButton containing a label. The label
will be created using gtk_label_new_with_mnemonic(), so underscores
in @label indicate the mnemonic for the button.

</description>
<parameters>
<parameter name="label">
<parameter_description> the text of the button, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkToggleButton
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_map_change_entry">
<description>
Changes the @accel_key and @accel_mods currently associated with @accel_path.
Due to conflicts with other accelerators, a change may not always be possible,
@replace indicates whether other accelerators may be deleted to resolve such
conflicts. A change will only occur if all conflicts could be resolved (which
might not be the case if conflicting accelerators are locked). Successful
changes are indicated by a %TRUE return value.

</description>
<parameters>
<parameter name="accel_path">
<parameter_description>  a valid accelerator path
</parameter_description>
</parameter>
<parameter name="accel_key">
<parameter_description>   the new accelerator key
</parameter_description>
</parameter>
<parameter name="accel_mods">
<parameter_description>  the new accelerator modifiers
</parameter_description>
</parameter>
<parameter name="replace">
<parameter_description>     %TRUE if other accelerators may be deleted upon conflicts
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>     %TRUE if the accelerator could be changed, %FALSE otherwise
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_add_mnemonic">
<description>
Adds a mnemonic to this window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the mnemonic
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the widget that gets activated by the mnemonic
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_has_frame">
<description>
Accessor for whether the window has a frame window exterior to
@window-&amp;gt;window. Gets the value set by gtk_window_set_has_frame ().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a frame has been added to the window
via gtk_window_set_has_frame().
</return>
</function>

<function name="gtk_clipboard_set_text">
<description>
Sets the contents of the clipboard to the given UTF-8 string. GTK+ will
make a copy of the text and take responsibility for responding
for requests for the text, and for converting the text into
the requested format.

</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard object
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>      a UTF-8 string.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description>       length of @text, in bytes, or -1, in which case
the length will be determined with &amp;lt;function&amp;gt;strlen()&amp;lt;/function&amp;gt;.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set_valist">
<description>
See gtk_list_store_set(); this version takes a va_list for use by language
bindings.


</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter for the row being modified
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> va_list of column/value pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_popup_data_from_widget">
<description>
Obtains the @popup_data which was passed to 
gtk_item_factory_popup_with_data(). This data is available until the menu
is popped down again.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> @popup_data associated with the item factory from
which @widget was created, or %NULL if @widget wasn&apos;t created
by an item factory
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_pop_colormap">
<description>
Removes a colormap pushed with gtk_widget_push_colormap().


</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_new">
<description>
Creates a new #GtkTreePath.  This structure refers to a row.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreePath.
</return>
</function>

<function name="gtk_text_view_scroll_to_iter">
<description>
Scrolls @text_view so that @iter is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center. If @use_align
is %FALSE, the text scrolls the minimal distance to get the mark onscreen,
possibly not scrolling at all. The effective screen for purposes
of this function is reduced by a margin of size @within_margin.
NOTE: This function uses the currently-computed height of the
lines in the text buffer. Note that line heights are computed
in an idle handler; so this function may not have the desired effect
if it&apos;s called before the height computations. To avoid oddness,
consider using gtk_text_view_scroll_to_mark() which saves a point
to be scrolled to after line validation.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="within_margin">
<parameter_description> margin as a [0.0,0.5) fraction of screen size
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments (if %FALSE, just get the mark onscreen)
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> horizontal alignment of mark within visible area.
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> vertical alignment of mark within visible area
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if scrolling occurred
</return>
</function>

<function name="gtk_entry_new_with_max_length">
<description>
Creates a new #GtkEntry widget with the given maximum length.

Note: the existance of this function is inconsistent
with the rest of the GTK+ API. The normal setup would
be to just require the user to make an extra call
to gtk_entry_set_max_length() instead. It is not
expected that this function will be removed, but
it would be better practice not to use it.


</description>
<parameters>
<parameter name="max">
<parameter_description> the maximum length of the entry, or 0 for no maximum.
(other than the maximum length of entries.) The value passed in will
be clamped to the range 0-65536.
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkEntry.
</return>
</function>

<function name="gtk_plug_get_id">
<description>
Gets the window ID of a #GtkPlug widget, which can then
be used to embed this window inside another window, for
instance with gtk_socket_add_id().


</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug.
</parameter_description>
</parameter>
</parameters>
<return> the window ID for the plug
</return>
</function>

<function name="gtk_cell_renderer_toggle_get_active">
<description>
Returns whether the cell renderer is active. See
gtk_cell_renderer_toggle_set_active().


</description>
<parameters>
<parameter name="toggle">
<parameter_description> a #GtkCellRendererToggle
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the cell renderer is active.
</return>
</function>

<function name="gtk_notebook_set_tab_vborder">
<description>
Sets the width of the vertical border of tab labels.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="tab_vborder">
<parameter_description> width of the vertical border of tab labels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_mark_get_name">
<description>
Returns the mark name; returns NULL for anonymous marks.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> mark name
</return>
</function>

<function name="gtk_icon_set_copy">
<description>
Copies @icon_set by value. 


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkIconSet identical to the first.
</return>
</function>

<function name="gtk_toolbar_insert_stock">
<description>
Inserts a stock item at the specified position of the toolbar.  If
@stock_id is not a known stock item ID, it&apos;s inserted verbatim,
except that underscores used to mark mnemonics are removed.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> A #GtkToolbar
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> The id of the stock item you want to insert
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> The text in the tooltip of the toolbar button
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> The private text of the tooltip
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> The callback called when the toolbar button is clicked.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to callback
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position the button shall be inserted at.
-1 means at the end.
</parameter_description>
</parameter>
</parameters>
<return> the inserted widget
</return>
</function>

<function name="gtk_text_buffer_place_cursor">
<description>
This function moves the &quot;insert&quot; and &quot;selection_bound&quot; marks
simultaneously.  If you move them to the same place in two steps
with gtk_text_buffer_move_mark(), you will temporarily select a
region in between their old and new locations, which can be pretty
inefficient since the temporarily-selected region will force stuff
to be recalculated. This function moves them as a unit, which can
be optimized.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> where to put the cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accelerator_get_default_mod_mask">
<description>
Gets the value set by gtk_accelerator_set_default_mod_mask().

</description>
<parameters>
<parameter name="returns">
<parameter_description> the default accelerator modifier mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_cell_is_visible">
<description>
Returns #TRUE if any of the cells packed into the @tree_column are visible.
For this to be meaningful, you must first initialize the cells with
gtk_tree_view_column_cell_set_cell_data()


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> #TRUE, if any of the cells packed into the @tree_column are currently visible
</return>
</function>

<function name="gtk_spin_button_get_numeric">
<description>
Returns whether non-numeric text can be typed into the spin button.
See gtk_spin_button_set_numeric().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if only numeric text can be entered
</return>
</function>

<function name="gtk_item_factory_delete_item">
<description>
Deletes the menu item which was created for @path by the given
item factory.

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_title">
<description>
Sets the title of the @tree_column.  If a custom widget has been set, then
this value is ignored.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> The title of the @tree_column.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_ruler_get_metric">
<description>
Gets the units used for a #GtkRuler. See gtk_ruler_set_metric().


</description>
<parameters>
<parameter name="ruler">
<parameter_description> a #GtkRuler
</parameter_description>
</parameter>
</parameters>
<return> the units currently used for @ruler
</return>
</function>

<function name="gtk_draw_arrow">
<description>
Draws an arrow in the given rectangle on @window using the given 
parameters. @arrow_type determines the direction of the arrow.

This function is deprecated, use gtk_paint_arrow() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="arrow_type">
<parameter_description> the type of arrow to draw
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if the arrow tip should be filled
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the rectangle to draw the arrow in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the rectangle to draw the arrow in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_to_tag_toggle">
<description>
Moves backward to the next toggle (on or off) of the
#GtkTextTag @tag, or to the next toggle of any tag if
@tag is %NULL. If no matching tag toggles are found,
returns %FALSE, otherwise %TRUE. Does not return toggles
located at @iter, only toggles before @iter. Sets @iter
to the location of the toggle, or the start of the buffer
if no toggle is found.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether we found a tag toggle before @iter
</return>
</function>

<function name="gtk_tree_selection_get_tree_view">
<description>
Returns the tree view associated with @selection.


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeView
</return>
</function>

<function name="gtk_color_selection_set_previous_alpha">
<description>
Sets the &apos;previous&apos; alpha to be @alpha.  This function should be called with
some hesitations, as it might seem confusing to have that alpha change.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> an integer between 0 and 65535.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_draw">
<description>
DEPRECATED. In GTK+ 1.2, this function would immediately render the
region @area of a widget, by invoking the virtual draw method of a
widget. In GTK+ 2.0, the draw method is gone, and instead
gtk_widget_draw() simply invalidates the specified region of the
widget, then updates the invalid region of the widget immediately.
Usually you don&apos;t want to update the region immediately for
performance reasons, so in general gtk_widget_queue_draw_area() is
a better choice if you want to draw a region of a widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> area to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_popup">
<description>
Pops up the menu constructed from the item factory at (@x, @y).

The @mouse_button parameter should be the mouse button pressed to initiate
the menu popup. If the menu popup was initiated by something other than
a mouse button press, such as a mouse button release or a keypress,
@mouse_button should be 0.

The @time_ parameter should be the time stamp of the event that
initiated the popup. If such an event is not available, use
gtk_get_current_event_time() instead.

The operation of the @mouse_button and the @time_ parameter is the same
as the @button and @activation_time parameters for gtk_menu_popup().

</description>
<parameters>
<parameter name="ifactory">
<parameter_description> a #GtkItemFactory of type #GTK_TYPE_MENU (see gtk_item_factory_new())
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x position 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y position
</parameter_description>
</parameter>
<parameter name="mouse_button">
<parameter_description> the mouse button which was pressed to initiate the popup
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the time at which the activation event occurred
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_current_color">
<description>
Sets the current color to be @color.  The first time this is called, it will
also set the original color to be @color too.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> A #GdkColor to set the current color with.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_scrollable">
<description>
Sets whether the tab label area will have arrows for scrolling if
there are too many tabs to fit in the area.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="scrollable">
<parameter_description> %TRUE if scroll arrows should be added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_key_hash_lookup_keyval">
<description>
Looks up the best matching entry or entries in the hash table for a
given keyval/modifiers pair. It&apos;s better to use
_gtk_key_hash_lookup() if you have the original #GdkEventKey
available.  The results are sorted so that entries with less
modifiers come before entries with more modifiers.


</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GtkEvent
</parameter_description>
</parameter>
</parameters>
<return> A #GSList of all matching entries.
</return>
</function>

<function name="gtk_image_set_from_pixmap">
<description>
See gtk_image_new_from_pixmap() for details.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GtkImage
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_draw_option">
<description>
Draws a radio button indicator in the given rectangle on @window with 
the given parameters.

This function is deprecated, use gtk_paint_option() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle to draw the option in
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle to draw the option in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_headers_visible">
<description>
Sets the the visibility state of the headers.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="headers_visible">
<parameter_description> %TRUE if the headers are visible
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_freeze_child_notify">
<description>
Stops emission of &quot;child-notify&quot; signals on @widget. The signals are
queued until gtk_widget_thaw_child_notify() is called on @widget. 

This is the analogue of g_object_freeze_notify() for child properties.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_source_set_icon_stock">
<description>
Sets the icon that will be used for drags from a particular source
to a stock icon. 

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="stock_id">
<parameter_description> the ID of the stock icon to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_cell_renderer_toggle_new">
<description>
Creates a new #GtkCellRendererToggle. Adjust rendering
parameters using object properties. Object properties can be set
globally (with g_object_set()). Also, with #GtkTreeViewColumn, you
can bind a property to a value in a #GtkTreeModel. For example, you
can bind the &quot;active&quot; property on the cell renderer to a boolean value
in the model, thus causing the check button to reflect the state of
the model.


</description>
<parameters>
</parameters>
<return> the new cell renderer
</return>
</function>

<function name="gtk_text_buffer_insert_pixbuf">
<description>
Inserts an image into the text buffer at @iter. The image will be
counted as one character in character counts, and when obtaining
the buffer contents as a string, will be represented by the Unicode
&quot;object replacement character&quot; 0xFFFC. Note that the &quot;slice&quot;
variants for obtaining portions of the buffer as a string include
this character for pixbufs, but the &quot;text&quot; variants do
not. e.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location to insert the pixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_set_screen">
<description>
Sets the #GdkScreen on which the menu will be displayed.

Since: 2.2

</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen, or %NULL if the screen should be
determined by the widget the menu is attached to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_scrolled_window_get_placement">
<description>
Gets the placement of the scrollbars for the scrolled window. See 
gtk_scrolled_window_set_placement().


</description>
<parameters>
<parameter name="scrolled_window">
<parameter_description> a #GtkScrolledWindow
</parameter_description>
</parameter>
</parameters>
<return> the current placement value.
</return>
</function>

<function name="gtk_stock_add_static">
<description>
Same as gtk_stock_add(), but doesn&apos;t copy @items, so
@items must persist until application exit.


</description>
<parameters>
<parameter name="items">
<parameter_description> a #GtkStockItem or array of #GtkStockItem
</parameter_description>
</parameter>
<parameter name="n_items">
<parameter_description> number of items
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toolbar_set_icon_size">
<description>
This function sets the size of stock icons in the toolbar. You
can call it both before you add the icons and after they&apos;ve been
added. The size you set will override user preferences for the default
icon size.

</description>
<parameters>
<parameter name="toolbar">
<parameter_description> A #GtkToolbar
</parameter_description>
</parameter>
<parameter name="icon_size">
<parameter_description> The #GtkIconSize that stock icons in the toolbar shall have.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_paint_vline">
<description>
Draws a vertical line from (@x, @y1_) to (@x, @y2_) in @window
using the given style and state.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> rectangle to which the output is clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> 
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> the starting y coordinate
</parameter_description>
</parameter>
<parameter name="y2_">
<parameter_description> the ending y coordinate
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_range">
<description>
Gets the range allowed for @spin_button. See
gtk_spin_button_set_range().

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> location to store minimum allowed value, or %NULL
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> location to store maximum allowed value, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_mark_get_buffer">
<description>
Gets the buffer this mark is located inside,
or NULL if the mark is deleted.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> the mark&apos;s #GtkTextBuffer
</return>
</function>

<function name="gtk_text_view_get_iter_at_location">
<description>
Retrieves the iterator at buffer coordinates @x and @y. Buffer
coordinates are coordinates for the entire buffer, not just the
currently-displayed portion.  If you have coordinates from an
event, you have to convert those to buffer coordinates with
gtk_text_view_window_to_buffer_coords().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x position, in buffer coordinates
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y position, in buffer coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_sortable_has_default_sort_func">
<description>
Returns %TRUE if the model has a default sort function.  This is used
primarily by GtkTreeViewColumns in order to determine if a model can go back
to the default state, or not.


</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if the model has a default sort function
</return>
</function>

<function name="gtk_text_view_set_pixels_below_lines">
<description>
Sets the default number of pixels of blank space
to put below paragraphs in @text_view. May be overridden
by tags applied to @text_view&apos;s buffer. 


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="pixels_below_lines">
<parameter_description> pixels below paragraphs 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_digits">
<description>
Fetches the precision of @spin_button. See gtk_spin_button_set_digits().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> the current precision
</return>
</function>

<function name="gtk_icon_source_set_filename">
<description>
Sets the name of an image file to use as a base image when creating
icon variants for #GtkIconSet. The filename must be absolute. 

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> image file to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_reparse_all">
<description>
If the modification time on any previously read file for the
default #GtkSettings has changed, discard all style information
and then reread all previously read RC files.


</description>
<parameters>
</parameters>
<return>  %TRUE if the files were reread.
</return>
</function>

<function name="gtk_widget_set_size_request">
<description>
Sets the minimum size of a widget; that is, the widget&apos;s size
request will be @width by @height. You can use this function to
force a widget to be either larger or smaller than it normally
would be.

In most cases, gtk_window_set_default_size() is a better choice for
toplevel windows than this function; setting the default size will
still allow users to shrink the window. Setting the size request
will force them to leave the window at least as large as the size
request. When dealing with window sizes,
gtk_window_set_geometry_hints() can be a useful function as well.

Note the inherent danger of setting any fixed size - themes,
translations into other languages, different fonts, and user action
can all change the appropriate size for a given widget. So, it&apos;s
basically impossible to hardcode a size that will always be
correct.

The size request of a widget is the smallest size a widget can
accept while still functioning well and drawing itself correctly.
However in some strange cases a widget may be allocated less than
its requested size, and in many cases a widget may be allocated more
space than it requested.

If the size request in a given direction is -1 (unset), then
the &quot;natural&quot; size request of the widget will be used instead.

Widgets can&apos;t actually be allocated a size less than 1 by 1, but
you can pass 0,0 to this function to mean &quot;as small as possible.&quot;

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width @widget should request, or -1 to unset
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height @widget should request, or -1 to unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_end_user_action">
<description>
Should be paired with a call to gtk_text_buffer_begin_user_action().
See that function for a full explanation.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_move_child">
<description>
Updates the position of a child, as for gtk_text_view_add_child_in_window().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> child widget already added to the text view
</parameter_description>
</parameter>
<parameter name="xpos">
<parameter_description> new X position in window coordinates
</parameter_description>
</parameter>
<parameter name="ypos">
<parameter_description> new Y position in window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_spin">
<description>
Increment or decrement a spin button&apos;s value in a specified direction
by a specified amount. 

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> a #GtkSpinType indicating the direction to spin.
</parameter_description>
</parameter>
<parameter name="increment">
<parameter_description> step increment to apply in the specified direction.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_scroll_to_mark">
<description>
Scrolls @text_view so that @mark is on the screen in the position
indicated by @xalign and @yalign. An alignment of 0.0 indicates
left or top, 1.0 indicates right or bottom, 0.5 means center. If @use_align
is %FALSE, the text scrolls the minimal distance to get the mark onscreen,
possibly not scrolling at all. The effective screen for purposes
of this function is reduced by a margin of size @within_margin.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
<parameter name="within_margin">
<parameter_description> margin as a [0.0,0.5) fraction of screen size
</parameter_description>
</parameter>
<parameter name="use_align">
<parameter_description> whether to use alignment arguments (if %FALSE, just get the mark onscreen)
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> horizontal alignment of mark within visible area.
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> vertical alignment of mark within visible area
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_insert_child_anchor">
<description>
Inserts a child widget anchor into the text buffer at @iter. The
anchor will be counted as one character in character counts, and
when obtaining the buffer contents as a string, will be represented
by the Unicode &quot;object replacement character&quot; 0xFFFC. Note that the
&quot;slice&quot; variants for obtaining portions of the buffer as a string
include this character for child anchors, but the &quot;text&quot; variants do
not. e.g. see gtk_text_buffer_get_slice() and
gtk_text_buffer_get_text(). Consider
gtk_text_buffer_create_child_anchor() as a more convenient
alternative to this function. The buffer will add a reference to
the anchor, so you can unref it after insertion.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location to insert the anchor
</parameter_description>
</parameter>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_grab_default">
<description>
Causes @widget to become the default widget. @widget must have the
%GTK_CAN_DEFAULT flag set; typically you have to set this flag
yourself by calling &amp;lt;literal&amp;gt;GTK_WIDGET_SET_FLAGS (@widget,
GTK_CAN_DEFAULT)&amp;lt;/literal&amp;gt;.  The default widget is activated when the user
presses Enter in a window.  Default widgets must be activatable,
that is, gtk_widget_activate() should affect them.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_plug_construct">
<description>
Finish the initialization of @plug for a given #GtkSocket identified by
@socket_id. This function will generally only be used by classes deriving from #GtkPlug.

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug.
</parameter_description>
</parameter>
<parameter name="socket_id">
<parameter_description> the XID of the socket&apos;s window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_set_accel_path">
<description>
Sets an accelerator path for this menu from which accelerator paths
for its immediate children, its menu items, can be constructed.
The main purpose of this function is to spare the programmer the
inconvenience of having to call gtk_menu_item_set_accel_path() on
each menu item that should support runtime user changable accelerators.
Instead, by just calling gtk_menu_set_accel_path() on their parent,
each menu item of this menu, that contains a label describing its purpose,
automatically gets an accel path assigned. For example, a menu containing
menu items &quot;New&quot; and &quot;Exit&quot;, will, after 
&amp;lt;literal&amp;gt;gtk_menu_set_accel_path (menu, &quot;&amp;lt;Gnumeric-Sheet&amp;gt;/File&quot;);&amp;lt;/literal&amp;gt;
has been called, assign its items the accel paths:
&amp;lt;literal&amp;gt;&quot;&amp;lt;Gnumeric-Sheet&amp;gt;/File/New&quot;&amp;lt;/literal&amp;gt; and &amp;lt;literal&amp;gt;&quot;&amp;lt;Gnumeric-Sheet&amp;gt;/File/Exit&quot;&amp;lt;/literal&amp;gt;.
Assigning accel paths to menu items then enables the user to change
their accelerators at runtime. More details about accelerator paths
and their default setups can be found at gtk_accel_map_add_entry().

</description>
<parameters>
<parameter name="menu">
<parameter_description>       a valid #GtkMenu
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> a valid accelerator path
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_pulse">
<description>
Indicates that some progress is made, but you don&apos;t know how much.
Causes the progress bar to enter &quot;activity mode,&quot; where a block
bounces back and forth. Each call to gtk_progress_bar_pulse()
causes the block to move by a little bit (the amount of movement
per pulse is determined by gtk_progress_bar_set_pulse_step()).

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default">
<description>
The default widget is the widget that&apos;s activated when the user
presses Enter in a dialog (for example). This function sets or
unsets the default widget for a #GtkWindow about. When setting
(rather than unsetting) the default widget it&apos;s generally easier to
call gtk_widget_grab_focus() on the widget. Before making a widget
the default widget, you must set the #GTK_CAN_DEFAULT flag on the
widget you&apos;d like to make the default using GTK_WIDGET_SET_FLAGS().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="default_widget">
<parameter_description> widget to be the default, or %NULL to unset the
default widget for the toplevel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_factory_remove_default">
<description>
Removes an icon factory from the list of default icon
factories. Not normally used; you might use it for a library that
can be unloaded or shut down.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory previously added with gtk_icon_factory_add_default()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_get_depth">
<description>
Returns the current depth of @path.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> The depth of @path
</return>
</function>

<function name="gtk_label_new_with_mnemonic">
<description>
Creates a new #GtkLabel, containing the text in @str.

If characters in @str are preceded by an underscore, they are
underlined. If you need a literal underscore character in a label, use
&apos;__&apos; (two underscores). The first underlined character represents a 
keyboard accelerator called a mnemonic. The mnemonic key can be used 
to activate another widget, chosen automatically, or explicitly using
gtk_label_set_mnemonic_widget().

If gtk_label_set_mnemonic_widget()
is not called, then the first activatable ancestor of the #GtkLabel
will be chosen as the mnemonic widget. For instance, if the
label is inside a button or menu item, the button or menu item will
automatically become the mnemonic widget and be activated by
the mnemonic.


</description>
<parameters>
<parameter name="str">
<parameter_description> The text of the label, with an underscore in front of the
mnemonic character
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkLabel
</return>
</function>

<function name="gtk_tree_drag_source_drag_data_delete">
<description>
Asks the #GtkTreeDragSource to delete the row at @path, because
it was moved somewhere else via drag-and-drop. Returns %FALSE
if the deletion fails because @path no longer exists, or for
some model-specific reason. Should robustly handle a @path no
longer found in the model!


</description>
<parameters>
<parameter name="drag_source">
<parameter_description> a #GtkTreeDragSource
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> row that was being dragged
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the row was successfully deleted
</return>
</function>

<function name="gtk_toolbar_get_icon_size">
<description>
Retrieves the icon size fo the toolbar. See gtk_toolbar_set_icon_size().


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar
</parameter_description>
</parameter>
</parameters>
<return> the current icon size for the icons on the toolbar.
</return>
</function>

<function name="gtk_im_multicontext_append_menuitems">
<description>
Add menuitems for various available input methods to a menu;
the menuitems, when selected, will switch the input method
for the context and the global default input method.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMMultiContext
</parameter_description>
</parameter>
<parameter name="menushell">
<parameter_description> a #GtkMenuShell
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_table_get_default_col_spacing">
<description>
Gets the default column spacing for the table. This is
the spacing that will be used for newly added columns.
(See gtk_table_set_col_spacings())


</description>
<parameters>
<parameter name="table">
<parameter_description> a #GtkTable
</parameter_description>
</parameter>
</parameters>
<return>value: the default column spacing
</return>
</function>

<function name="gtk_window_get_gravity">
<description>
Gets the value set by gtk_window_set_gravity().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> window gravity
</return>
</function>

<function name="gtk_window_set_has_frame">
<description>
(Note: this is a special-purpose function for the framebuffer port,
that causes GTK+ to draw its own window border. For most applications,
you want gtk_window_set_decorated() instead, which tells the window
manager whether to draw the window border.)

If this function is called on a window with setting of %TRUE, before
it is realized or showed, it will have a &quot;frame&quot; window around
@window-&amp;gt;window, accessible in @window-&amp;gt;frame. Using the signal 
frame_event you can recieve all events targeted at the frame.

This function is used by the linux-fb port to implement managed
windows, but it could concievably be used by X-programs that
want to do their own window decorations.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_reset_default_sort_func">
<description>
This resets the default sort function to be in the &apos;unsorted&apos; state.  That
is, it is in the same order as the child model. It will re-sort the model
to be in the same order as the child model only if the #GtkTreeModelSort
is in &apos;unsorted&apos; state.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_size_request">
<description>
Gets the size request that was explicitly set for the widget using
gtk_widget_set_size_request().  A value of -1 stored in @width or
@height indicates that that dimension has not been set explicitly
and the natural requisition of the widget will be used intead. See
gtk_widget_set_size_request(). To get the size a widget will
actually use, call gtk_widget_size_request() instead of
this function.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factory_from_path">
<description>
Finds an item factory which has been constructed using the 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt; prefix of @path as the @path argument 
for gtk_item_factory_new().

</description>
<parameters>
<parameter name="path">
<parameter_description> a string starting with a factory path of the form 
&amp;lt;literal&amp;gt;&quot;&amp;lt;name&amp;gt;&quot;&amp;lt;/literal&amp;gt;
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the #GtkItemFactory created for the given factory path, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_label_packing">
<description>
Sets the packing parameters for the tab label of the page
containing @child. See gtk_box_pack_start() for the exact meaning
of the parameters.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> whether to expand the bookmark or not
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> whether the bookmark should fill the allocated area or not
</parameter_description>
</parameter>
<parameter name="pack_type">
<parameter_description> the position of the bookmark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_extension_events">
<description>
Retrieves the extension events the widget will receive; see
gdk_input_set_extension_events().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> extension events for @widget
</return>
</function>

<function name="gtk_stock_item_copy">
<description>
Copies a stock item, mostly useful for language bindings and not in applications.


</description>
<parameters>
<parameter name="item">
<parameter_description> a #GtkStockItem
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkStockItem
</return>
</function>

<function name="gtk_text_view_get_window">
<description>
Retrieves the #GdkWindow corresponding to an area of the text view;
possible windows include the overall widget window, child windows
on the left, right, top, bottom, and the window that displays the
text buffer. Windows are %NULL and nonexistent if their width or
height is 0, and are nonexistent before the widget has been
realized.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="win">
<parameter_description> window to get
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow, or %NULL
</return>
</function>

<function name="gtk_tree_view_column_get_fixed_width">
<description>
Gets the fixed width of the column.  This value is only meaning may not be
the actual width of the column on the screen, just what is requested.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> the fixed width of the column
</return>
</function>

<function name="gtk_rc_set_default_files">
<description>
Sets the list of files that GTK+ will read at the
end of gtk_init().

</description>
<parameters>
<parameter name="filenames">
<parameter_description> A %NULL-terminated list of filenames.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_range_get_value">
<description>
Gets the current value of the range.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
</parameters>
<return> current value of the range.
</return>
</function>

<function name="gtk_tree_path_next">
<description>
Moves the @path to point to the next node at the current depth.

</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_set_response_sensitive">
<description>
Calls &amp;lt;literal&amp;gt;gtk_widget_set_sensitive (widget, @setting)&amp;lt;/literal&amp;gt; 
for each widget in the dialog&apos;s action area with the given @response_id.
A convenient way to sensitize/desensitize dialog buttons.

</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
<parameter name="response_id">
<parameter_description> a response ID
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE for sensitive
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_get_use_stock">
<description>
Returns whether the button label is a stock item.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the button label is used to
select a stock item instead of being
used directly as the label text.
</return>
</function>

<function name="gtk_hsv_new">
<description>
Creates a new HSV color selector.


</description>
<parameters>
<parameter name="void">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> A newly-created HSV color selector.
</return>
</function>

<function name="gtk_accel_map_save">
<description>
Saves current accelerator specifications (accelerator path, key
and modifiers) to @file_name.
The file is written in a format suitable to be read back in by
gtk_accel_map_load().

</description>
<parameters>
<parameter name="file_name">
<parameter_description> the file to contain accelerator specifications
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_bounds">
<description>
Retrieves the first and last iterators in the buffer, i.e. the
entire buffer lies within the range [@start,@end).


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> iterator to initialize with first position in the buffer
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator to initialize with the end iterator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_set_icon_pixbuf">
<description>
Sets @pixbuf as the icon for a given drag.

</description>
<parameters>
<parameter name="context">
<parameter_description> the context for a drag. (This must be called 
with a  context for the source side of a drag)
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the #GdkPixbuf to use as the drag icon.
</parameter_description>
</parameter>
<parameter name="hot_x">
<parameter_description> the X offset within @widget of the hotspot.
</parameter_description>
</parameter>
<parameter name="hot_y">
<parameter_description> the Y offset within @widget of the hotspot.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_cell_data_func">
<description>
Sets the #GtkTreeViewColumnFunc to use for the column.  This
function is used instead of the standard attributes mapping for
setting the column value, and should set the value of @tree_column&apos;s
cell renderer as appropriate.  @func may be %NULL to remove an
older one.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="cell_renderer">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The #GtkTreeViewColumnFunc to use. 
</parameter_description>
</parameter>
<parameter name="func_data">
<parameter_description> The user data for @func.
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> The destroy notification for @func_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_prev">
<description>
Moves the @path to point to the previous node at the current depth, if it exists.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @path has a previous node, and the move was made.
</return>
</function>

<function name="_gtk_tree_selection_new_with_tree_view">
<description>
Creates a new #GtkTreeSelection object.  This function should not be invoked,
as each #GtkTreeView will create it&apos;s own #GtkTreeSelection.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> The #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GtkTreeSelection object.
</return>
</function>

<function name="gtk_icon_factory_add_default">
<description>
Adds an icon factory to the list of icon factories searched by
gtk_style_lookup_icon_set(). This means that, for example,
gtk_image_new_from_stock() will be able to find icons in @factory.
There will normally be an icon factory added for each library or
application that comes with icons. The default icon factories
can be overridden by themes.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GtkIconFactory
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_get_label">
<description>
Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup. (See
gtk_label_get_text ()).


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the text of the label widget. This string is
owned by the widget and must not be modified or freed.
</return>
</function>

<function name="gtk_toolbar_insert_element">
<description>
Inserts a new element in the toolbar at the given position. 

If @type == %GTK_TOOLBAR_CHILD_WIDGET, @widget is used as the new element.
If @type == %GTK_TOOLBAR_CHILD_RADIOBUTTON, @widget is used to determine
the radio group for the new element. In all other cases, @widget must
be %NULL.


</description>
<parameters>
<parameter name="toolbar">
<parameter_description> a #GtkToolbar.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a value of type #GtkToolbarChildType that determines what @widget
will be.
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> a #GtkWidget, or %NULL. 
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the element&apos;s label.
</parameter_description>
</parameter>
<parameter name="tooltip_text">
<parameter_description> the element&apos;s tooltip.
</parameter_description>
</parameter>
<parameter name="tooltip_private_text">
<parameter_description> used for context-sensitive help about this toolbar element.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GtkWidget that provides pictorial representation of the element&apos;s function.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the function to be executed when the button is pressed.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> any data you wish to pass to the callback.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the number of widgets to insert this element after.
</parameter_description>
</parameter>
</parameters>
<return> the new toolbar element as a #GtkWidget.
</return>
</function>

<function name="gtk_notebook_get_show_tabs">
<description>
Returns whether the tabs of the notebook are shown. See
gtk_notebook_set_show_tabs().


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the tabs are shown
</return>
</function>

<function name="gtk_notebook_get_nth_page">
<description>
Returns the child widget contained in page number @page_num.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="page_num">
<parameter_description> the index of a page in the noteobok, or -1
to get the last page.
</parameter_description>
</parameter>
</parameters>
<return> the child widget, or %NULL if @page_num is
out of bounds.
</return>
</function>

<function name="gtk_text_view_get_right_margin">
<description>
Gets the default right margin for text in @text_view. Tags
in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> right margin in pixels
</return>
</function>

<function name="gtk_tree_selection_unselect_path">
<description>
Unselects the row at @path.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The #GtkTreePath to be unselected.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_style">
<description>
Modifies style values on the widget. Modifications made using this
technique take precedence over style values set via an RC file,
however, they will be overriden if a style is explicitely set on
the widget using gtk_widget_set_style(). The #GtkRcStyle structure
is designed so each field can either be set or unset, so it is
possible, using this function, to modify some style values and
leave the others unchanged.

Note that modifications made with this function are not cumulative
with previous calls to gtk_widget_modify_style() or with such
functions as gtk_widget_modify_fg(). If you wish to retain
previous values, you must first call gtk_widget_get_modifier_style(),
make your modifications to the returned style, then call
gtk_widget_modify_style() with that style. On the other hand,
if you first call gtk_widget_modify_style(), subsequent calls
to such functions gtk_widget_modify_fg() will have a cumulative
effect with the initial modifications.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> the #GtkRcStyle holding the style modifications
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_get_color">
<description>
Queries the current color in an HSV color selector.  Returned values will be
in the [0.0, 1.0] range.

</description>
<parameters>
<parameter name="hsv">
<parameter_description> An HSV color selector.
</parameter_description>
</parameter>
<parameter name="h">
<parameter_description> Return value for the hue.
</parameter_description>
</parameter>
<parameter name="s">
<parameter_description> Return value for the saturation.
</parameter_description>
</parameter>
<parameter name="v">
<parameter_description> Return value for the value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_new">
<description>
Creates a new #GtkNotebook widget with no pages.


</description>
<parameters>
</parameters>
<return> the newly created #GtkNotebook
</return>
</function>

<function name="_gtk_tree_selection_new">
<description>
Creates a new #GtkTreeSelection object.  This function should not be invoked,
as each #GtkTreeView will create it&apos;s own #GtkTreeSelection.


</description>
<parameters>
</parameters>
<return> A newly created #GtkTreeSelection object.
</return>
</function>

<function name="gtk_text_layout_get_cursor_visible">
<description>
Returns whether the insertion cursor will be shown.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
</parameters>
<return> if %FALSE, the insertion cursor will not be
    shown, even if the text is editable.
</return>
</function>

<function name="gtk_tree_view_insert_column_with_data_func">
<description>
Convenience function that inserts a new column into the #GtkTreeView
with the given cell renderer and a #GtkCellDataFunc to set cell renderer
attributes (normally using data from the model). See also
gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> Position to insert, -1 for append
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> column title
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> cell renderer for column
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to set attributes of cell renderer
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data for @func
</parameter_description>
</parameter>
<parameter name="dnotify">
<parameter_description> destroy notifier for @data
</parameter_description>
</parameter>
</parameters>
<return> number of columns in the tree view post-insert
</return>
</function>

<function name="gtk_window_set_decorated">
<description>
By default, windows are decorated with a title bar, resize
controls, etc.  Some &amp;lt;link linkend=&quot;gtk-X11-arch&quot;&amp;gt;window
managers&amp;lt;/link&amp;gt; allow GTK+ to disable these decorations, creating a
borderless window. If you set the decorated property to %FALSE
using this function, GTK+ will do its best to convince the window
manager not to decorate the window. Depending on the system, this
function may not have any effect when called on a window that is
already visible, so you should call it before calling gtk_window_show().

On Windows, this function always works, since there&apos;s no window manager
policy involved.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to decorate the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_icon_factory_list_ids">
<description>
Gets all known IDs stored in an existing icon factory.
The strings in the returned list aren&apos;t copied.
The list itself should be freed.


</description>
<parameters>
</parameters>
<return> List of ids in icon factories
</return>
</function>

<function name="gtk_tree_store_insert_after">
<description>
Inserts a new row after @sibling.  If @sibling is %NULL, then the row will be
prepended to @parent &apos;s children.  If @parent and @sibling are %NULL, then
the row will be prepended to the toplevel.  If both @sibling and @parent are
set, then @parent must be the parent of @sibling.  When @sibling is set,
@parent is optional.

@iter will be changed to point to this new row.  The row will be empty after
this function is called.  To fill in values, you need to call
gtk_tree_store_set() or gtk_tree_store_set_value().


</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the new row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_indent">
<description>
Sets the default indentation for paragraphs in @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> indentation in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_invisible_set_screen">
<description>
Sets the #GdkScreen where the #GtkInvisible object will be displayed.

Since: 2.2

</description>
<parameters>
<parameter name="invisible">
<parameter_description> a #GtkInvisible.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_spacing">
<description>
Sets the spacing field of @tree_column, which is the number of pixels to
place between cell renderers packed into it.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="spacing">
<parameter_description> distance between cell renderers in pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_parse_geometry">
<description>
Parses a standard X Window System geometry string - see the
manual page for X (type &apos;man X&apos;) for details on this.
gtk_window_parse_geometry() does work on all GTK+ ports
including Win32 but is primarily intended for an X environment.

If either a size or a position can be extracted from the
geometry string, gtk_window_parse_geometry() returns %TRUE
and calls gtk_window_set_default_size() and/or gtk_window_move()
to resize/move the window.

If gtk_window_parse_geometry() returns %TRUE, it will also
set the #GDK_HINT_USER_POS and/or #GDK_HINT_USER_SIZE hints
indicating to the window manager that the size/position of
the window was user-specified. This causes most window
managers to honor the geometry.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> geometry string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if string was parsed successfully
</return>
</function>

<function name="_gtk_binding_reset_parsed">
<description>
Removing all binding sets that were added by
gtk_binding_parse_binding()

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gtk_widget_activate">
<description>
For widgets that can be &quot;activated&quot; (buttons, menu items, etc.)
this function activates them. Activation is what happens when you
press Enter on a widget during key navigation; clicking a button,
selecting a menu item, etc. If @widget isn&apos;t activatable,
the function returns %FALSE.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget that&apos;s activatable
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the widget was activatable
</return>
</function>

<function name="gtk_window_get_focus">
<description>
Retrieves the current focused widget within the window.
Note that this is the widget that would have the focus
if the toplevel window focused; if the toplevel window
is not focused then  &amp;lt;literal&amp;gt;GTK_WIDGET_HAS_FOCUS (widget)&amp;lt;/literal&amp;gt; will
not be %TRUE for the widget. 


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the currently focused widget.
</return>
</function>

<function name="gtk_text_iter_forward_word_end">
<description>
Moves forward to the next word end. (If @iter is currently on a
word end, moves forward to the next one after that.) Word breaks
are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator 
</return>
</function>

<function name="gtk_text_layout_get_line_at_y">
<description>
Get the iter at the beginning of the line which is displayed
at the given y.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="target_iter">
<parameter_description> the iterator in which the result is stored
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y positition
</parameter_description>
</parameter>
<parameter name="line_top">
<parameter_description> location to store the y coordinate of the
top of the line. (Can by %NULL.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_line_count">
<description>
Obtains the number of lines in the buffer. This value is cached, so
the function is very fast.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> number of lines in the buffer
</return>
</function>

<function name="gtk_label_get_layout_offsets">
<description>
Obtains the coordinates where the label will draw the #PangoLayout
representing the text in the label; useful to convert mouse events
into coordinates inside the #PangoLayout, e.g. to take some action
if some part of the label is clicked. Of course you will need to
create a #GtkEventBox to receive the events, and pack the label
inside it, since labels are a #GTK_NO_WINDOW widget. Remember
when using the #PangoLayout functions you need to convert to
and from pixels using PANGO_PIXELS() or #PANGO_SCALE.


</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store X offset of layout, or %NULL
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store Y offset of layout, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_create_pango_context">
<description>
Creates a new #PangoContext with the appropriate colormap,
font description, and base direction for drawing text for
this widget. See also gtk_widget_get_pango_context().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the new #PangoContext
</return>
</function>

<function name="gtk_text_iter_forward_lines">
<description>
Moves @count lines forward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE. If @count is negative,
moves backward by 0 - @count lines.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of lines to move forward
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_progress_bar_set_fraction">
<description>
Causes the progress bar to &quot;fill in&quot; the given fraction
of the bar. The fraction should be between 0.0 and 1.0,
inclusive.


</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="fraction">
<parameter_description> fraction of the task that&apos;s been completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_forward_chars">
<description>
Moves @count characters if possible (if @count would move past the
start or end of the buffer, moves to the start or end of the
buffer). The return value indicates whether the new position of
@iter is different from its original position, and dereferenceable
(the last iterator in the buffer is not dereferenceable). If @count
is 0, the function does nothing and returns %FALSE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of characters to move, may be negative
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable
</return>
</function>

<function name="gtk_icon_source_get_direction">
<description>
Obtains the text direction this icon source applies to. The return
value is only useful/meaningful if the text direction is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; 
wildcarded.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return> text direction this source matches
</return>
</function>

<function name="_gtk_size_group_get_child_requisition">
<description>
Retrieve the &quot;child requisition&quot; of the widget, taking account grouping
of the widget&apos;s requisition with other widgets.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="requisition">
<parameter_description> location to store computed requisition.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_child_get">
<description>
Gets the values of one or more child properties for @child and @container.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget which is a child of @container
</parameter_description>
</parameter>
<parameter name="first_prop_name">
<parameter_description> the name of the first property to get
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a %NULL-terminated list of property names and #GValue*, 
starting with @first_prop_name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_new">
<description>
Create a new empty #GtkSocket.


</description>
<parameters>
</parameters>
<return>  the new #GtkSocket.
</return>
</function>

<function name="gtk_handle_box_get_snap_edge">
<description>
Gets the edge used for determining reattachment of the handle box. See
gtk_handle_box_set_snap_edge().


</description>
<parameters>
<parameter name="handle_box">
<parameter_description> a #GtkHandleBox
</parameter_description>
</parameter>
</parameters>
<return> the edge used for determining reattachment, or (GtkPositionType)-1 if this
is determined (as per default) from the handle position. 
</return>
</function>

<function name="gtk_tree_view_set_destroy_count_func">
<description>
This function should almost never be used.  It is meant for private use by
ATK for determining the number of visible children that are removed when the
user collapses a row, or a row is deleted.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> Function to be called when a view row is destroyed, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to be passed to @func, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> Destroy notifier for @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_justify">
<description>
Sets the alignment of the lines in the text of the label relative to
each other.  %GTK_JUSTIFY_LEFT is the default value when the
widget is first created with gtk_label_new(). If you instead want
to set the alignment of the label as a whole, use
gtk_misc_set_alignment() instead. gtk_label_set_justify() has no
effect on labels containing only a single line.

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="jtype">
<parameter_description> a #GtkJustification
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_prepend">
<description>
Prepends a new row to @tree_store.  If @parent is non-%NULL, then it will prepend
the new row before the first child of @parent, otherwise it will prepend a row
to the top level.  @iter will be changed to point to this new row.  The row
will be empty after this function is called.  To fill in values, you need to
call gtk_tree_store_set() or gtk_tree_store_set_value().

</description>
<parameters>
<parameter name="tree_store">
<parameter_description> A #GtkTreeStore
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> An unset #GtkTreeIter to set to the prepended row
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> A valid #GtkTreeIter, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_container_get_focus_hadjustment">
<description>
Retrieves the horizontal focus adjustment for the container. See
gtk_container_set_focus_hadjustment ().


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
</parameters>
<return> the horizontal focus adjustment, or %NULL if
none has been set.
</return>
</function>

<function name="gtk_plug_construct_for_display">
<description>
Finish the initialization of @plug for a given #GtkSocket identified by
@socket_id which is currently displayed on @display.
This function will generally only be used by classes deriving from #GtkPlug.

Since: 2.2

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug.
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> the #GdkDisplay associated with @socket_id&apos;s 
#GtkSocket.
</parameter_description>
</parameter>
<parameter name="socket_id">
<parameter_description> the XID of the socket&apos;s window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_icon">
<description>
Gets the value set by gtk_window_set_icon() (or if you&apos;ve
called gtk_window_set_icon_list(), gets the first icon in
the icon list).


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> icon for window
</return>
</function>

<function name="gtk_cell_renderer_set_fixed_size">
<description>
Sets the renderer size to be explicit, independent of the properties set.

</description>
<parameters>
<parameter name="cell">
<parameter_description> A #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the cell renderer, or -1
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the cell renderer, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_wrap_mode">
<description>
Sets the line wrapping for the view.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="wrap_mode">
<parameter_description> a #GtkWrapMode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_color_selection_set_current_alpha">
<description>
Sets the current opacity to be @alpha.  The first time this is called, it will
also set the original opacity to be @alpha too.

</description>
<parameters>
<parameter name="colorsel">
<parameter_description> a #GtkColorSelection.
</parameter_description>
</parameter>
<parameter name="alpha">
<parameter_description> an integer between 0 and 65535.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_text">
<description>
Like gtk_text_iter_get_text (), but invisible text is not included.
Invisible text is usually invisible because a #GtkTextTag with the
&quot;invisible&quot; attribute turned on has been applied to it.


</description>
<parameters>
<parameter name="start">
<parameter_description> iterator at start of range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> iterator at end of range
</parameter_description>
</parameter>
</parameters>
<return> string containing visible text in the range
</return>
</function>

<function name="gtk_widget_set">
<description>
Like g_object_set() - there&apos;s no reason to use this instead of
g_object_set().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value of first property, followed by more properties, %NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_mark">
<description>
Returns the mark named @name in buffer @buffer, or NULL if no such
mark exists in the buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a mark name
</parameter_description>
</parameter>
</parameters>
<return> a #GtkTextMark, or NULL
</return>
</function>

<function name="gtk_text_iter_forward_search">
<description>
Searches forward for @str. Any match is returned by setting 
@match_start to the first character of the match and @match_end to the 
first character after the match. The search will not continue past
@limit. Note that a search is a linear or O(n) operation, so you
may wish to use @limit to avoid locking up your UI on large
buffers.

If the #GTK_TEXT_SEARCH_VISIBLE_ONLY flag is present, the match may
have invisible text interspersed in @str. i.e. @str will be a
possibly-noncontiguous subsequence of the matched range. similarly,
if you specify #GTK_TEXT_SEARCH_TEXT_ONLY, the match may have
pixbufs or child widgets mixed inside the matched range. If these
flags are not given, the match must be exact; the special 0xFFFC
character in @str will match embedded pixbufs or child widgets.


</description>
<parameters>
<parameter name="iter">
<parameter_description> start of search
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a search string
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting how the search is done
</parameter_description>
</parameter>
<parameter name="match_start">
<parameter_description> return location for start of match, or %NULL
</parameter_description>
</parameter>
<parameter name="match_end">
<parameter_description> return location for end of match, or %NULL
</parameter_description>
</parameter>
<parameter name="limit">
<parameter_description> bound for the search, or %NULL for the end of the buffer
</parameter_description>
</parameter>
</parameters>
<return> whether a match was found
</return>
</function>

<function name="gtk_widget_set_style">
<description>
Sets the #GtkStyle for a widget (@widget-&amp;gt;style). You probably don&apos;t
want to use this function; it interacts badly with themes, because
themes work by replacing the #GtkStyle. Instead, use
gtk_widget_modify_style().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> a #GtkStyle, or %NULL to remove the effect of a previous
gtk_widget_set_style() and go back to the default style
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_tab_label">
<description>
Returns the tab label widget for the page @child. %NULL is returned
if @child is not in @notebook or if no tab label has specifically
been set for @child.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the page
</parameter_description>
</parameter>
</parameters>
<return> the tab label
</return>
</function>

<function name="gtk_tree_view_insert_column_with_attributes">
<description>
Creates a new #GtkTreeViewColumn and inserts it into the @tree_view at
@position.  If @position is -1, then the newly created column is inserted at
the end.  The column is initialized with the attributes given.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position to insert the new column in.
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> The title to set the header to.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A %NULL-terminated list of attributes.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns in @tree_view after insertion.
</return>
</function>

<function name="gtk_text_view_get_left_margin">
<description>
Gets the default left margin size of paragraphs in the @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> left margin in pixels
</return>
</function>

<function name="gtk_widget_get_visual">
<description>
Gets the visual that will be used to render @widget.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the visual for @widget
</return>
</function>

<function name="gtk_draw_flat_box">
<description>
Draws a flat box on @window with the given parameters.

This function is deprecated, use gtk_paint_flat_box() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> the type of shadow to draw
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin of the box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin of the box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the box
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_table_new">
<description>
Creates a new #GtkTextTagTable. The table contains no tags by
default.


</description>
<parameters>
</parameters>
<return> a new #GtkTextTagTable
</return>
</function>

<function name="gtk_text_view_get_line_yrange">
<description>
Gets the y coordinate of the top of the line containing @iter,
and the height of the line. The coordinate is a buffer coordinate;
convert to window coordinates with gtk_text_view_buffer_to_window_coords().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for a y coordinate
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for a height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_group_disconnect">
<description>
Removes an accelerator previously installed through
gtk_accel_group_connect().

</description>
<parameters>
<parameter name="accel_group">
<parameter_description> the accelerator group to remove an accelerator from
</parameter_description>
</parameter>
<parameter name="closure">
<parameter_description>     the closure to remove from this accelerator group
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description>     %TRUE if the closure was found and got disconnected
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_visible_rect">
<description>
Fills @visible_rect with the currently-visible region of the
buffer, in tree coordinates. Convert to widget coordinates with
gtk_tree_view_tree_to_widget_coords(). Tree coordinates start at
0,0 for row 0 of the tree, and cover the entire scrollable area of
the tree.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="visible_rect">
<parameter_description> rectangle to fill
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_dialog_new_with_buttons">
<description>
Creates a new #GtkDialog with title @title (or %NULL for the default
title; see gtk_window_set_title()) and transient parent @parent (or
%NULL for none; see gtk_window_set_transient_for()). The @flags
argument can be used to make the dialog modal (#GTK_DIALOG_MODAL)
and/or to have it destroyed along with its transient parent
(#GTK_DIALOG_DESTROY_WITH_PARENT). After @flags, button
text/response ID pairs should be listed, with a %NULL pointer ending
the list. Button text can be either a stock ID such as
#GTK_STOCK_OK, or some arbitrary text.  A response ID can be
any positive number, or one of the values in the #GtkResponseType
enumeration. If the user clicks one of these dialog buttons,
#GtkDialog will emit the &quot;response&quot; signal with the corresponding
response ID. If a #GtkDialog receives the &quot;delete_event&quot; signal, it
will emit &quot;response&quot; with a response ID of #GTK_RESPONSE_DELETE_EVENT.
However, destroying a dialog does not emit the &quot;response&quot; signal;
so be careful relying on &quot;response&quot; when using
the #GTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to right,
so the first button in the list will be the leftmost button in the dialog.

Here&apos;s a simple example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
GtkWidget *dialog = gtk_dialog_new_with_buttons (&quot;My dialog&quot;,
main_app_window,
GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
GTK_STOCK_OK,
GTK_RESPONSE_ACCEPT,
GTK_STOCK_CANCEL,
GTK_RESPONSE_REJECT,
NULL);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="title">
<parameter_description> Title of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> Transient parent of the dialog, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> from #GtkDialogFlags
</parameter_description>
</parameter>
<parameter name="first_button_text">
<parameter_description> stock ID or text to go in first button, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> response ID for first button, then additional buttons, ending with %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkDialog
</return>
</function>

<function name="gtk_paint_hline">
<description>
Draws a horizontal line from (@x1, @y) to (@x2, @y) in @window
using the given style and state.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="area">
<parameter_description> rectangle to which the output is clipped
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> 
</parameter_description>
</parameter>
<parameter name="x1">
<parameter_description> the starting x coordinate
</parameter_description>
</parameter>
<parameter name="x2">
<parameter_description> the ending x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_child_anchor_get_deleted">
<description>
Determines whether a child anchor has been deleted from
the buffer. Keep in mind that the child anchor will be
unreferenced when removed from the buffer, so you need to
hold your own reference (with g_object_ref()) if you plan
to use this function &amp;mdash; otherwise all deleted child anchors
will also be finalized.


</description>
<parameters>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the child anchor has been deleted from its buffer
</return>
</function>

<function name="gtk_tree_path_compare">
<description>
Compares two paths.  If @a appears before @b in a tree, then -1 is returned.
If @b appears before @a, then 1 is returned.  If the two nodes are equal,
then 0 is returned.


</description>
<parameters>
<parameter name="a">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> A #GtkTreePath to compare with.
</parameter_description>
</parameter>
</parameters>
<return> The relative positions of @a and @b
</return>
</function>

<function name="gtk_text_iter_forward_sentence_ends">
<description>
Calls gtk_text_iter_forward_sentence_end() @count times (or until
gtk_text_iter_forward_sentence_end() returns %FALSE). If @count is
negative, moves backward instead of forward.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of sentences to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter moved and is not the end iterator
</return>
</function>

<function name="gtk_set_locale">
<description>
Initializes internationalization support for GTK+. gtk_init()
automatically does this, so there is typically no point
in calling this function.

If you are calling this function because you changed the locale
after GTK+ is was initialized, then calling this function
may help a bit. (Note, however, that changing the locale
after GTK+ is initialized may produce inconsistent results and
is not really supported.)

In detail - sets the current locale according to the
program environment. This is the same as calling the C library function
&amp;lt;literal&amp;gt;setlocale (LC_ALL, &quot;&quot;)&amp;lt;/literal&amp;gt; but also takes care of the 
locale specific setup of the windowing system used by GDK.


</description>
<parameters>
</parameters>
<return> a string corresponding to the locale set, as with the
C library function &amp;lt;function&amp;gt;setlocale()&amp;lt;/function&amp;gt;.
</return>
</function>

<function name="gtk_accel_group_find">
<description>
Finds the first entry in an accelerator group for which 
@find_func returns %TRUE and returns its #GtkAccelKey.


</description>
<parameters>
<parameter name="accel_group">
<parameter_description> a #GtkAccelGroup
</parameter_description>
</parameter>
<parameter name="find_func">
<parameter_description> a function to filter the entries of @accel_group with
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to @find_func
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the key of the first entry passing @find_func. The key is 
owned by GTK+ and must not be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_region_intersect">
<description>
Computes the intersection of a @widget&apos;s area and @region, returning
the intersection. The result may be empty, use gdk_region_empty() to
check.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion, in the same coordinate system as 
@widget-&amp;gt;allocation. That is, relative to @widget-&amp;gt;window
for %NO_WINDOW widgets; relative to the parent window
of @widget-&amp;gt;window for widgets with their own window.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> A newly allocated region holding the intersection of @widget
and @region. The coordinates of the return value are
relative to @widget-&amp;gt;window for %NO_WINDOW widgets, and
relative to the parent window of @widget-&amp;gt;window for
widgets with their own window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_name">
<description>
Retrieves the name of a widget. See gtk_widget_set_name() for the
significance of widget names.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> name of the widget. This string is owned by GTK+ and
should not be modified or freed
</return>
</function>

<function name="gtk_image_new_from_pixmap">
<description>
Creates a #GtkImage widget displaying @pixmap with a @mask.
A #GdkImage is a server-side image buffer in the pixel format of the
current display. The #GtkImage does not assume a reference to the
pixmap or mask; you still need to unref them if you own references.
#GtkImage will add its own reference rather than adopting yours.


</description>
<parameters>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap, or %NULL
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GdkBitmap, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkImage
</return>
</function>

<function name="gtk_widget_queue_draw_area">
<description>
Invalidates the rectangular area of @widget defined by @x, @y,
@width and @height by calling gdk_window_invalidate_rect() on the
widget&apos;s window and all its child windows.  Once the main loop
becomes idle (after the current batch of events has been processed,
roughly), the window will receive expose events for the union of
all regions that have been invalidated.

Normally you would only use this function in widget
implementations. You might also use it, or
gdk_window_invalidate_rect() directly, to schedule a redraw of a
#GtkDrawingArea or some portion thereof.

Frequently you can just call gdk_window_invalidate_rect() or
gdk_window_invalidate_region() instead of this function. Those
functions will invalidate only a single window, instead of the
widget and all its children.

The advantage of adding to the invalidated region compared to
simply drawing immediately is efficiency; using an invalid region
ensures that you only have to redraw one time.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of upper-left corner of rectangle to redraw
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_sort_convert_child_iter_to_iter">
<description>
Sets @sort_iter to point to the row in @tree_model_sort that corresponds to
the row pointed at by @child_iter.

</description>
<parameters>
<parameter name="tree_model_sort">
<parameter_description> A #GtkTreeModelSort
</parameter_description>
</parameter>
<parameter name="sort_iter">
<parameter_description> An uninitialized #GtkTreeIter.
</parameter_description>
</parameter>
<parameter name="child_iter">
<parameter_description> A valid #GtkTreeIter pointing to a row on the child model
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_unref">
<description>
Inverse of gtk_widget_ref(). Equivalent to g_object_unref().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_reorderable">
<description>
Returns #TRUE if the @tree_column can be reordered by the user.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the @tree_column can be reordered by the user.
</return>
</function>

<function name="gtk_accel_map_load_scanner">
<description>
#GScanner variant of gtk_accel_map_load().

</description>
<parameters>
<parameter name="scanner">
<parameter_description> a #GScanner which has already been provided with an input file
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_composite_name">
<description>
Obtains the composite name of a widget. 

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the composite name of @widget, or %NULL if @widget is not
a composite child. The string should not be freed when it is no 
longer needed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_hsv_get_type">
<description>
Registers the &amp;GtkHSV class if necessary, and returns the type ID associated
to it.


</description>
<parameters>
<parameter name="void">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> The type ID of the &amp;GtkHSV class.
</return>
</function>

<function name="gtk_tree_iter_free">
<description>
Frees an iterator that has been allocated on the heap.  This function is
mainly used for language bindings.

</description>
<parameters>
<parameter name="iter">
<parameter_description> A dynamically allocated tree iterator.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_modal">
<description>
Returns whether the window is modal. See gtk_window_set_modal().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is set to be modal and
establishes a grab when shown
</return>
</function>

<function name="gtk_icon_size_lookup_for_settings">
<description>
Obtains the pixel size of a semantic icon size, possibly
modified by user preferences for a particular 
#GtkSettings. Normally @size would be
#GTK_ICON_SIZE_MENU, #GTK_ICON_SIZE_BUTTON, etc.  This function
isn&apos;t normally needed, gtk_widget_render_icon() is the usual
way to get an icon for rendering, then just look at the size of
the rendered pixbuf. The rendered pixbuf may not even correspond to
the width/height returned by gtk_icon_size_lookup(), because themes
are free to render the pixbuf however they like, including changing
the usual size.


</description>
<parameters>
<parameter name="settings">
<parameter_description> a #GtkSettings object, used to determine
which set of user preferences to used.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an icon size
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store icon width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store icon height
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @size was a valid size

Since: 2.2
</return>
</function>

<function name="gtk_text_iter_forward_cursor_positions">
<description>
Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of positions to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable
</return>
</function>

<function name="gtk_tree_selection_iter_is_selected">
<description>
Returns %TRUE if the row at @iter is currently selected.


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> A valid #GtkTreeIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, if @iter is selected
</return>
</function>

<function name="gtk_tree_view_column_set_resizable">
<description>
If @resizable is %TRUE, then the user can explicitly resize the column by
grabbing the outer edge of the column button.  If resizable is TRUE and
sizing mode of the column is #GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
mode is changed to #GTK_TREE_VIEW_COLUMN_GROW_ONLY.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
<parameter name="resizable">
<parameter_description> %TRUE, if the column can be resized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_icon_list">
<description>
Sets up the icon representing a #GtkWindow. The icon is used when
the window is minimized (also known as iconified).  Some window
managers or desktop environments may also place it in the window
frame, or display it in other contexts.

gtk_window_set_icon_list() allows you to pass in the same icon in
several hand-drawn sizes. The list should contain the natural sizes
your icon is available in; that is, don&apos;t scale the image before
passing it to GTK+. Scaling is postponed until the last minute,
when the desired final size is known, to allow best quality.

By passing several sizes, you may improve the final image quality
of the icon, by reducing or eliminating automatic image scaling.

Recommended sizes to provide: 16x16, 32x32, 48x48 at minimum, and
larger images (64x64, 128x128) if you have them.

See also gtk_window_set_default_icon_list() to set the icon
for all windows in your application in one go.

Note that transient windows (those who have been set transient for another
window using gtk_window_set_transient_for()) will inherit their
icon from their transient parent. So there&apos;s no need to explicitly
set the icon on transient windows.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> list of #GdkPixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_hadjustment">
<description>
Gets the #GtkAdjustment currently being used for the horizontal aspect.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkAdjustment object, or %NULL if none is currently being
used.
</return>
</function>

<function name="gtk_spin_button_new_with_range">
<description>
This is a convenience constructor that allows creation of a numeric 
#GtkSpinButton without manually creating an adjustment. The value is 
initially set to the minimum value and a page increment of 10 * @step
is the default. The precision of the spin button is equivalent to the 
precision of @step.


</description>
<parameters>
<parameter name="min">
<parameter_description> Minimum allowable value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> Maximum allowable value
</parameter_description>
</parameter>
<parameter name="step">
<parameter_description> Increment added or subtracted by spinning the widget
</parameter_description>
</parameter>
</parameters>
<return> The new spin button as a #GtkWidget.
</return>
</function>

<function name="gtk_widget_get_events">
<description>
Returns the event mask for the widget (a bitfield containing flags
from the #GdkEventMask enumeration). These are the events that the widget
will receive.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> event mask for @widget
</return>
</function>

<function name="gtk_container_set_border_width">
<description>
Sets the border width of the container.

The border width of a container is the amount of space to leave
around the outside of the container. The only exception to this is
#GtkWindow; because toplevel windows can&apos;t leave space outside,
they leave the space inside. The border is added on all sides of
the container. To add space to only one side, one approach is to
create a #GtkAlignment widget, call gtk_widget_set_usize() to give
it a size, and place it on the side of the container as a spacer.

</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer
</parameter_description>
</parameter>
<parameter name="border_width">
<parameter_description> amount of blank space to leave &amp;lt;emphasis&amp;gt;outside&amp;lt;/emphasis&amp;gt; the container.
Valid values are in the range 0-65535 pixels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_attributes_copy">
<description>
Copies @src and returns a new #GtkTextAttributes.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GtkTextAttributes to be copied
</parameter_description>
</parameter>
</parameters>
<return> a copy of @src
</return>
</function>

<function name="gtk_tree_path_new_from_indices">
<description>
Creates a new path with @first_index and @varargs as indices.


</description>
<parameters>
<parameter name="first_index">
<parameter_description> first integer
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> list of integers terminated by -1
</parameter_description>
</parameter>
</parameters>
<return> A newly created GtkTreePath.

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_column_set_min_width">
<description>
Sets the minimum width of the @tree_column.  If @min_width is -1, then the
minimum width is unset.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> The minimum width of the column in pixels, or -1.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_set_size">
<description>
Sets the size of the scrollable area of the layout.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of entire scrollable area
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of entire scrollable area
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_append_page_menu">
<description>
Appends a page to @notebook, specifying the widget to use as the
label in the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page,
or %NULL to use the default label, &apos;page N&apos;.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu, if that is enabled. If %NULL, and @tab_label
is a #GtkLabel or %NULL, then the menu label will be
a newly created label with the same text as @tab_label;
If @tab_label is not a #GtkLabel, @menu_label must be
specified if the page-switch menu is to be used.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_tag_event">
<description>
Emits the &quot;event&quot; signal on the #GtkTextTag.


</description>
<parameters>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
<parameter name="event_object">
<parameter_description> object that received the event, such as a widget
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the event
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> location where the event was received
</parameter_description>
</parameter>
</parameters>
<return> result of signal emission (whether the event was handled)
</return>
</function>

<function name="gtk_style_unref">
<description>
Deprecated equivalent of g_object_unref().

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_new">
<description>
Creates a row reference based on @path.  This reference will keep pointing to
the node pointed to by @path, so long as it exists.  It listens to all
signals emitted by @model, and updates it&apos;s path appropriately.  If @path
isn&apos;t a valid path in @model, then %NULL is returned.


</description>
<parameters>
<parameter name="model">
<parameter_description> A #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> A valid #GtkTreePath to monitor
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GtkTreeRowReference, or %NULL
</return>
</function>

<function name="gdk_parse_args">
<description>
Parses command line arguments, and initializes global
attributes of GTK+, but does not actually open a connection
to a display. (See gdk_display_open(), gdk_get_display_arg_name())

Any arguments used by GTK or GDK are removed from the array and
@argc and @argv are updated accordingly.

You shouldn&apos;t call this function explicitely if you are using
gtk_init(), or gtk_init_check().


</description>
<parameters>
<parameter name="argc">
<parameter_description> the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if initialization succeeded, otherwise %FALSE.
</return>
</function>

<function name="spin_button_get_shadow_type">
<description>
Convenience function to Get the shadow type from the underlying widget&apos;s
style.


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton 
</parameter_description>
</parameter>
</parameters>
<return> the #GtkShadowType
</return>
</function>

<function name="gtk_notebook_set_show_border">
<description>
Sets whether a bevel will be drawn around the notebook pages.
This only has a visual effect when the tabs are not shown.
See gtk_notebook_set_show_tabs().

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="show_border">
<parameter_description> %TRUE if a bevel should be drawn around the notebook.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_inside_sentence">
<description>
Determines whether @iter is inside a sentence (as opposed to in
between two sentences, e.g. after a period and before the first
letter of the next sentence).  Sentence boundaries are determined
by Pango and should be correct for nearly any language (if not, the
correct fix would be to the Pango text boundary algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is inside a sentence.
</return>
</function>

<function name="gtk_text_view_set_editable">
<description>
Sets the default editability of the #GtkTextView. You can override
this default setting with tags in the buffer, using the &quot;editable&quot;
attribute of tags.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether it&apos;s editable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_min_width">
<description>
Returns the minimum width in pixels of the @tree_column, or -1 if no minimum
width is set.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The minimum width of the @tree_column.
</return>
</function>

<function name="gtk_clipboard_get_owner">
<description>
If the clipboard contents callbacks were set with 
gtk_clipboard_set_with_owner(), and the gtk_clipboard_set_with_data() or 
gtk_clipboard_clear() has not subsequently called, returns the owner set 
by gtk_clipboard_set_with_owner().


</description>
<parameters>
<parameter name="clipboard">
<parameter_description> a #GtkClipboard
</parameter_description>
</parameter>
</parameters>
<return> the owner of the clipboard, if any; otherwise %NULL.
</return>
</function>

<function name="_gtk_key_hash_remove_entry">
<description>
Removes a value previously added to the key hash with
_gtk_key_hash_add_entry().

</description>
<parameters>
<parameter name="key_hash">
<parameter_description> a #GtkKeyHash
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value previously added with _gtk_key_hash_add_entry()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_list_store_set_column_types">
<description>
This function is meant primarily for #GObjects that inherit from #GtkListStore,
and should only be used when constructing a new #GtkListStore.  It will not
function after a row has been added, or a method on the #GtkTreeModel
interface is called.

</description>
<parameters>
<parameter name="list_store">
<parameter_description> A #GtkListStore
</parameter_description>
</parameter>
<parameter name="n_columns">
<parameter_description> Number of columns for the list store
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> An array length n of #GTypes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_misc_get_alignment">
<description>
Gets the X and Y alignment of the widget within its allocation. See
gtk_misc_set_alignment().

</description>
<parameters>
<parameter name="misc">
<parameter_description> a #GtkMisc
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> location to store X alignment of @misc, or %NULL
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> location to store Y alignment of @misc, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_toggles_tag">
<description>
This is equivalent to (gtk_text_iter_begins_tag () ||
gtk_text_iter_ends_tag ()), i.e. it tells you whether a range with
@tag applied to it begins &amp;lt;emphasis&amp;gt;or&amp;lt;/emphasis&amp;gt; ends at @iter.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether @tag is toggled on or off at @iter
</return>
</function>

<function name="gtk_text_layout_set_preedit_string">
<description>
Set the preedit string and attributes. The preedit string is a
string showing text that is currently being edited and not
yet committed into the buffer.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout
</parameter_description>
</parameter>
<parameter name="preedit_string">
<parameter_description> a string to display at the insertion point
</parameter_description>
</parameter>
<parameter name="preedit_attrs">
<parameter_description> a #PangoAttrList of attributes that apply to @preedit_string
</parameter_description>
</parameter>
<parameter name="cursor_pos">
<parameter_description> position of cursor within preedit string in chars
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_headers_visible">
<description>
Returns %TRUE if the headers on the @tree_view are visible.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return> Whether the headers are visible or not.
</return>
</function>

<function name="gtk_draw_string">
<description>
Draws a text string on @window with the given parameters.

This function is deprecated, use gtk_paint_layout() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y origin
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the string to draw
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_column">
<description>
Gets the #GtkTreeViewColumn at the given position in the #tree_view.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> The position of the column, counting from 0.
</parameter_description>
</parameter>
</parameters>
<return> The #GtkTreeViewColumn, or %NULL if the position is outside the
range of columns.
</return>
</function>

<function name="gtk_accel_group_get_type">
<description>

</description>
<parameters>
<parameter name="returns">
<parameter_description> the type ID for accelerator groups.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_viewport_get_shadow_type">
<description>
Gets the shadow type of the #GtkViewport. See
gtk_viewport_set_shadow_type().
 

</description>
<parameters>
<parameter name="viewport">
<parameter_description> a #GtkViewport
</parameter_description>
</parameter>
</parameters>
<return> the shadow type 
</return>
</function>

<function name="gtk_icon_set_add_source">
<description>
Icon sets have a list of #GtkIconSource, which they use as base
icons for rendering icons in different states and sizes. Icons are
scaled, made to look insensitive, etc. in
gtk_icon_set_render_icon(), but #GtkIconSet needs base images to
work with. The base images and when to use them are described by
a #GtkIconSource.

This function copies @source, so you can reuse the same source immediately
without affecting the icon set.

An example of when you&apos;d use this function: a web browser&apos;s &quot;Back
to Previous Page&quot; icon might point in a different direction in
Hebrew and in English; it might look different when insensitive;
and it might change size depending on toolbar mode (small/large
icons). So a single icon set would contain all those variants of
the icon, and you might add a separate source for each one.

You should nearly always add a &quot;default&quot; icon source with all
fields wildcarded, which will be used as a fallback if no more
specific source matches. #GtkIconSet always prefers more specific
icon sources to more generic icon sources. The order in which you
add the sources to the icon set does not matter.

gtk_icon_set_new_from_pixbuf() creates a new icon set with a
default icon source based on the given pixbuf.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_get_alignment">
<description>
Returns the current x alignment of @tree_column.  This value can range
between 0.0 and 1.0.


</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
</parameters>
<return> The current alignent of @tree_column.
</return>
</function>

<function name="gtk_window_get_resizable">
<description>
Gets the value set by gtk_window_set_resizable().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the user can resize the window
</return>
</function>

<function name="gtk_cell_renderer_activate">
<description>
Passes an activate event to the cell renderer for possible processing.  Some
cell renderers may use events; for example, #GtkCellRendererToggle toggles
when it gets a mouse click.


</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> widget that received the event
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> widget-dependent string representation of the event location; e.g. for #GtkTreeView, a string representation of #GtkTreePath
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> background area as passed to @gtk_cell_renderer_render
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> cell area as passed to @gtk_cell_renderer_render
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> render flags
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was consumed/handled
</return>
</function>

<function name="gtk_text_layout_move_iter_visually">
<description>
Move the iterator a given number of characters visually, treating
it as the strong cursor position. If @count is positive, then the
new strong cursor position will be @count positions to the right of
the old cursor position. If @count is negative then the new strong
cursor position will be @count positions to the left of the old
cursor position.

In the presence of bidirection text, the correspondence
between logical and visual order will depend on the direction
of the current run, and there may be jumps when the cursor
is moved off of the end of a run.

</description>
<parameters>
<parameter name="layout">
<parameter_description>  a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>    a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description>   number of characters to move (negative moves left, positive moves right)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_toggle_button_get_mode">
<description>
Retrieves whether the button is displayed as a separate indicator
and label. See gtk_toggle_button_set_mode().


</description>
<parameters>
<parameter name="toggle_button">
<parameter_description> a #GtkToggleButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the togglebutton is drawn as a separate indicator
and label.
</return>
</function>

<function name="gtk_viewport_new">
<description>
Creates a new #GtkViewport with the given adjustments.


</description>
<parameters>
<parameter name="hadjustment">
<parameter_description> horizontal adjustment.
</parameter_description>
</parameter>
<parameter name="vadjustment">
<parameter_description> vertical adjustment.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a new #GtkViewport.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_get_user_data">
<description>
Returns the user data for the selection function.


</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
</parameters>
<return> The user data.
</return>
</function>

<function name="gtk_container_child_type">
<description>
Returns the type of the children supported by the container.

Note that this may return %G_TYPE_NONE to indicate that no more
children can be added, e.g. for a #GtkPaned which already has two 
children.


</description>
<parameters>
<parameter name="container">
<parameter_description> a #GtkContainer.
</parameter_description>
</parameter>
</parameters>
<return> a #GType.
</return>
</function>

<function name="gtk_widget_ref">
<description>
Adds a reference to a widget. This function is exactly the same
as calling g_object_ref(), and exists mostly for historical
reasons. It can still be convenient to avoid casting a widget
to a #GObject, it saves a small amount of typing.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the widget that was referenced
</return>
</function>

<function name="gtk_bin_get_child">
<description>
Gets the child of the #GtkBin, or %NULL if the bin contains
no child widget. The returned widget does not have a reference
added, so you do not need to unref it.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GtkBin
</parameter_description>
</parameter>
</parameters>
<return> pointer to child of the #GtkBin
</return>
</function>

<function name="gtk_window_list_toplevels">
<description>
Returns a list of all existing toplevel windows. The widgets
in the list are not individually referenced. If you want
to iterate through the list and perform actions involving
callbacks that might destroy the widgets, you &amp;lt;emphasis&amp;gt;must&amp;lt;/emphasis&amp;gt; call
&amp;lt;literal&amp;gt;g_list_foreach (result, (GFunc)g_object_ref, NULL)&amp;lt;/literal&amp;gt; first, and
then unref all the widgets afterwards.


</description>
<parameters>
</parameters>
<return> list of toplevel widgets
</return>
</function>

<function name="gtk_widget_grab_focus">
<description>
Causes @widget to have the keyboard focus for the #GtkWindow it&apos;s
inside. @widget must be a focusable widget, such as a #GtkEntry;
something like #GtkFrame won&apos;t work. (More precisely, it must have the
%GTK_CAN_FOCUS flag set.)


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_plug_new_for_display">
<description>
Create a new plug widget inside the #GtkSocket identified by socket_id.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay on which @socket_id is displayed
</parameter_description>
</parameter>
<parameter name="socket_id">
<parameter_description> the XID of the socket&apos;s window.
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkPlug widget.

Since: 2.2
</return>
</function>

<function name="gtk_tree_view_column_clicked">
<description>
Emits the &quot;clicked&quot; signal on the column.  This function will only work if
@tree_column is clickable.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> a #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_item_set_right_justified">
<description>
Sets whether the menu item appears justified at the right
side of a menu bar. This was traditionally done for &quot;Help&quot; menu
items, but is now considered a bad idea. (If the widget
layout is reversed for a right-to-left language like Hebrew
or Arabic, right-justified-menu-items appear at the left.)

</description>
<parameters>
<parameter name="menu_item">
<parameter_description> a #GtkMenuItem.
</parameter_description>
</parameter>
<parameter name="right_justified">
<parameter_description> if %TRUE the menu item will appear at the 
far right if added to a menu bar.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_tabs">
<description>
Sets the default tab stops for paragraphs in @text_view.
Tags in the buffer may override the default.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="tabs">
<parameter_description> tabs as a #PangoTabArray
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_clear">
<description>
Unsets all the mappings on all renderers on the @tree_column.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_get_n_pages">
<description>
Gets the number of pages in a notebook.


</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
</parameters>
<return> the number of pages in the notebook.

Since: 2.2
</return>
</function>

<function name="gtk_notebook_reorder_child">
<description>
Reorders the page containing @child, so that it appears in position
@position. If @position is greater than or equal to the number of
children in the list or negative, @child will be moved to the end
of the list.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child to move
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the new position, or -1 to move to the end
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_valid">
<description>
Returns TRUE if the %reference is non-NULL and refers to a current valid
path.


</description>
<parameters>
<parameter name="reference">
<parameter_description> A #GtkTreeRowReference, or NULL
</parameter_description>
</parameter>
</parameters>
<return> TRUE if %reference points to a valid path.
</return>
</function>

<function name="gtk_text_mark_get_left_gravity">
<description>
Determines whether the mark has left gravity.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mark has left gravity, %FALSE otherwise
</return>
</function>

<function name="gtk_range_set_range">
<description>
Sets the allowable values in the #GtkRange, and clamps the range
value to be between @min and @max. (If the range has a non-zero
page size, it is clamped between @min and @max - page-size.)

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GtkRange
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> minimum range value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum range value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_get_default_size">
<description>
Gets the default size of the window. A value of -1 for the width or
height indicates that a default size has not been explicitly set
for that dimension, so the &quot;natural&quot; size of the window will be
used.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store the default width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store the default height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_tabs">
<description>
Gets the default tabs for @text_view. Tags in the buffer may
override the defaults. The returned array will be %NULL if
&quot;standard&quot; (8-space) tabs are used. Free the return value
with pango_tab_array_free().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> copy of default tab array, or %NULL if &quot;standard&quot; tabs are used; must be freed with pango_tab_array_free().
</return>
</function>

<function name="gtk_text_iter_forward_to_end">
<description>
Moves @iter forward to the &quot;end iterator,&quot; which points one past the last
valid character in the buffer. gtk_text_iter_get_char() called on the
end iterator returns 0, which is convenient for writing loops.

</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_set_tab_hborder">
<description>
Sets the width of the horizontal border of tab labels.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="tab_hborder">
<parameter_description> width of the horizontal border of tab labels.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_column_set_sizing">
<description>
Sets the growth behavior of @tree_column to @type.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The #GtkTreeViewColumnSizing.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_rc_get_style">
<description>
Finds all matching RC styles for a given widget,
composites them together, and then creates a 
#GtkStyle representing the composite appearance.
(GTK+ actually keeps a cache of previously 
created styles, so a new style may not be
created.)


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the resulting style. No refcount is added
to the returned style, so if you want to save this
style around, you should add a reference yourself.
</return>
</function>

<function name="gtk_draw_polygon">
<description>
Draws a polygon on @window with the given parameters.

This function is deprecated, use gtk_paint_polygon() instead.

</description>
<parameters>
<parameter name="style">
<parameter_description> a #GtkStyle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="state_type">
<parameter_description> a state
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> type of shadow to draw
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint&amp;lt;!-- --&amp;gt;s
</parameter_description>
</parameter>
<parameter name="npoints">
<parameter_description> length of @points
</parameter_description>
</parameter>
<parameter name="fill">
<parameter_description> %TRUE if the polygon should be filled
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_entry_get_text">
<description>
Retrieves the contents of the entry widget.
See also gtk_editable_get_chars().


</description>
<parameters>
<parameter name="entry">
<parameter_description> a #GtkEntry
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the contents of the widget as a
string.  This string points to internally allocated
storage in the widget and must not be freed, modified or
stored.
</return>
</function>

<function name="gtk_text_view_starts_display_line">
<description>
Determines whether @iter is at the start of a display line.
See gtk_text_view_forward_display_line() for an explanation of
display lines vs. paragraphs.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter begins a wrapped line
</return>
</function>

<function name="gtk_file_selection_get_selections">
<description>
Retrieves the list of file selections the user has made in the dialog box.
This function is intended for use when the user can select multiple files
in the file list. The first file in the list is equivalent to what
gtk_file_selection_get_filename() would return.

The filenames are in the encoding of g_filename_from_utf8(), which may or 
may not be the same as that used by GTK+ (UTF-8). To convert to UTF-8, call
g_filename_to_utf8() on each string.


</description>
<parameters>
<parameter name="filesel">
<parameter_description> a #GtkFileSelection
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated %NULL-terminated array of strings. Use
g_strfreev() to free it.
</return>
</function>

<function name="gtk_text_buffer_remove_all_tags">
<description>
Removes all tags in the range between @start and @end.  Be careful
with this function; it could remove tags added in code unrelated to
the code you&apos;re currently writing. That is, using this function is
probably a bad idea if you have two or more unrelated code sections
that add tags.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> one bound of range to be untagged
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> other bound of range to be untagged
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_button_get_label">
<description>
Fetches the text from the label of the button, as set by
gtk_button_set_label(). If the label text has not 
been set the return value will be %NULL. This will be the 
case if you create an empty button with gtk_button_new() to 
use as a container.


</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
</parameters>
<return> The text of the label widget. This string is owned
by the widget and must not be modified or freed.
</return>
</function>

<function name="gtk_text_buffer_create_tag">
<description>

Creates a tag and adds it to the tag table for @buffer.
Equivalent to calling gtk_text_tag_new () and then adding the
tag to the buffer&apos;s tag table. The returned tag is owned by
the buffer&apos;s tag table, so the ref count will be equal to one.

If @tag_name is %NULL, the tag is anonymous.

If @tag_name is non-%NULL, a tag called @tag_name must not already
exist in the tag table for this buffer.

The @first_property_name argument and subsequent arguments are a list
of properties to set on the tag, as with g_object_set().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="tag_name">
<parameter_description> name of the new tag, or %NULL
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of first property to set, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL-terminated list of property names and values
</parameter_description>
</parameter>
</parameters>
<return> a new tag
</return>
</function>

<function name="gtk_tree_sortable_sort_column_changed">
<description>
Emits a GtkTreeSortable::sort_column_changed signal on 

</description>
<parameters>
<parameter name="sortable">
<parameter_description> A #GtkTreeSortable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_im_module_get_default_context_id">
<description>
Return the context_id of the best IM context type
for the given locale ID.


</description>
<parameters>
<parameter name="locale">
<parameter_description> a locale id in the form &apos;en_US&apos;
</parameter_description>
</parameter>
</parameters>
<return> the context ID (will never be %NULL)
the value is newly allocated and must be freed
with g_free().
</return>
</function>

<function name="gtk_drag_check_threshold">
<description>
Checks to see if a mouse drag starting at (@start_x, @start_y) and ending
at (@current_x, @current_y) has passed the GTK+ drag threshhold, and thus
should trigger the beginning of a drag-and-drop operation.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="start_x">
<parameter_description> X coordinate of start of drag
</parameter_description>
</parameter>
<parameter name="start_y">
<parameter_description> Y coordinate of start of drag
</parameter_description>
</parameter>
<parameter name="current_x">
<parameter_description> current X coordinate
</parameter_description>
</parameter>
<parameter name="current_y">
<parameter_description> current Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drag threshold has been passed.
</return>
</function>

<function name="gtk_menu_get_title">
<description>
Returns the title of the menu. See gtk_menu_set_title().


</description>
<parameters>
<parameter name="menu">
<parameter_description> a #GtkMenu
</parameter_description>
</parameter>
</parameters>
<return> the title of the menu, or %NULL if the menu has no
title set on it. This string is owned by the widget and should
not be modified or freed.
</return>
</function>

<function name="gtk_text_iter_starts_word">
<description>
Determines whether @iter begins a natural-language word.  Word
breaks are determined by Pango and should be correct for nearly any
language (if not, the correct fix would be to the Pango word break
algorithms).


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @iter is at the start of a word
</return>
</function>

<function name="gtk_icon_source_set_direction">
<description>
Sets the text direction this icon source is intended to be used
with.

Setting the text direction on an icon source makes no difference
if the text direction is wildcarded. Therefore, you should usually
call gtk_icon_source_set_direction_wildcarded() to un-wildcard it
in addition to calling this function.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> text direction this source applies to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_enable_search">
<description>
If @enable_search is set, then the user can type in text to search through
the tree interactively.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="enable_search">
<parameter_description> %TRUE, if the user can search interactively
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_set_hadjustment">
<description>
Sets the horizontal scroll adjustment for the layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> new scroll adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_store_new">
<description>
Creates a new tree store as with @n_columns columns each of the types passed
in.  As an example, &amp;lt;literal&amp;gt;gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING,
GDK_TYPE_PIXBUF);&amp;lt;/literal&amp;gt; will create a new #GtkTreeStore with three columns, of type
&amp;lt;type&amp;gt;int&amp;lt;/type&amp;gt;, &amp;lt;type&amp;gt;string&amp;lt;/type&amp;gt; and #GdkPixbuf respectively.


</description>
<parameters>
<parameter name="n_columns">
<parameter_description> number of columns in the tree store
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> all #GType types for the columns, from first to last
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkTreeStore
</return>
</function>

<function name="gtk_tree_view_column_pack_end">
<description>
Adds the @cell to end of the column. If @expand is FALSE, then the @cell
is allocated no more space than it needs. Any unused space is divided
evenly between cells for which @expand is TRUE.

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn.
</parameter_description>
</parameter>
<parameter name="cell">
<parameter_description> The #GtkCellRenderer. 
</parameter_description>
</parameter>
<parameter name="expand">
<parameter_description> %TRUE if @cell is to be given extra space allocated to box.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_get_start_iter">
<description>
Initialized @iter with the first position in the text buffer. This
is the same as using gtk_text_buffer_get_iter_at_offset() to get
the iter at character offset 0.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> iterator to initialize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_get_cursor_visible">
<description>
Find out whether the cursor is being displayed.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> whether the insertion mark is visible
</return>
</function>

<function name="gtk_cell_renderer_render">
<description>
Invokes the virtual render function of the #GtkCellRenderer. The three
passed-in rectangles are areas of @window. Most renderers will draw within
@cell_area; the xalign, yalign, xpad, and ypad fields of the #GtkCellRenderer
should be honored with respect to @cell_area. @background_area includes the
blank space around the cell, and also the area containing the tree expander;
so the @background_area rectangles for all cells tile to cover the entire
@window.  @expose_area is a clip rectangle.


</description>
<parameters>
<parameter name="cell">
<parameter_description> a #GtkCellRenderer
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkDrawable to draw to
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> the widget owning @window
</parameter_description>
</parameter>
<parameter name="background_area">
<parameter_description> entire cell area (including tree expanders and maybe padding on the sides)
</parameter_description>
</parameter>
<parameter name="cell_area">
<parameter_description> area normally rendered by a cell renderer
</parameter_description>
</parameter>
<parameter name="expose_area">
<parameter_description> area that actually needs updating
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that affect rendering
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_columns_autosize">
<description>
Resizes all columns to their optimal width. Only works after the
treeview has been realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_move_mark">
<description>
Moves @mark to the new location @where. Emits the &quot;mark_set&quot; signal
as notification of the move.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> new location for @mark in @buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_chars">
<description>
Moves @count characters backward, if possible (if @count would move
past the start or end of the buffer, moves to the start or end of
the buffer).  The return value indicates whether the iterator moved
onto a dereferenceable position; if the iterator didn&apos;t move, or
moved onto the end iterator, then %FALSE is returned. If @count is 0,
the function does nothing and returns %FALSE.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of characters to move
</parameter_description>
</parameter>
</parameters>
<return> whether @iter moved and is dereferenceable

</return>
</function>

<function name="gtk_text_iter_forward_line">
<description>
Moves @iter to the start of the next line. Returns %TRUE if there
was a next line to move to, and %FALSE if @iter was simply moved to
the end of the buffer and is now not dereferenceable, or if @iter was
already at the end of the buffer.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
</parameters>
<return> whether @iter can be dereferenced
</return>
</function>

<function name="gtk_text_mark_set_visible">
<description>
Sets the visibility of @mark; the insertion point is normally
visible, i.e. you can see it as a vertical bar. Also, the text
widget uses a visible mark to indicate where a drop will occur when
dragging-and-dropping text. Most other marks are not visible.
Marks are not visible by default.


</description>
<parameters>
<parameter name="mark">
<parameter_description> a #GtkTextMark
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> visibility of mark
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_model_get_valist">
<description>
See gtk_tree_model_get(), this version takes a &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; 
for language bindings to use.

</description>
<parameters>
<parameter name="tree_model">
<parameter_description> a #GtkTreeModel
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a row in @tree_model
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> &amp;lt;type&amp;gt;va_list&amp;lt;/type&amp;gt; of column/return location pairs
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_parent_window">
<description>
Sets a non default parent window for @widget.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="parent_window">
<parameter_description> the new parent window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_label_set_markup_with_mnemonic">
<description>
Parses @str which is marked up with the &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango text markup language&amp;lt;/link&amp;gt;,
setting the label&apos;s text and attribute list based on the parse results.
If characters in @str are preceded by an underscore, they are underlined
indicating that they represent a keyboard accelerator called a mnemonic.

The mnemonic key can be used to activate another widget, chosen automatically,
or explicitly using gtk_label_set_mnemonic_widget().

</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a markup string (see &amp;lt;link linkend=&quot;PangoMarkupFormat&quot;&amp;gt;Pango markup format&amp;lt;/link&amp;gt;)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_unselect_range">
<description>
Unselects a range of nodes, determined by @start_path and @end_path
inclusive.

Since: 2.2

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="start_path">
<parameter_description> The initial node of the range.
</parameter_description>
</parameter>
<parameter name="end_path">
<parameter_description> The initial node of the range.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gtk_plug_remove_from_socket">
<description>
Removes a plug from a socket within the same application.

</description>
<parameters>
<parameter name="plug">
<parameter_description> a #GtkPlug
</parameter_description>
</parameter>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_image_menu_item_get_image">
<description>
Gets the widget that is currently set as the image of @image_menu_item.
See gtk_image_menu_item_set_image().

</description>
<parameters>
<parameter name="image_menu_item">
<parameter_description> a #GtkImageMenuItem.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the widget set as image of @image_menu_item.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_progress_bar_set_text">
<description>
Causes the given @text to appear superimposed on the progress bar.

</description>
<parameters>
<parameter name="pbar">
<parameter_description> a #GtkProgressBar
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_layout_get_hadjustment">
<description>
This function should only be called after the layout has been
placed in a #GtkScrolledWindow or otherwise configured for
scrolling. It returns the #GtkAdjustment used for communication
between the horizontal scrollbar and @layout.

See #GtkScrolledWindow, #GtkScrollbar, #GtkAdjustment for details.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkLayout
</parameter_description>
</parameter>
</parameters>
<return> horizontal scroll adjustment
</return>
</function>

<function name="gtk_tree_view_get_model">
<description>
Returns the model the the #GtkTreeView is based on.  Returns %NULL if the
model is unset.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A #GtkTreeModel, or %NULL if none is currently being used.
</return>
</function>

<function name="gtk_text_buffer_insert_interactive">
<description>
Like gtk_text_buffer_insert (), but the insertion will not occur if
@iter is at a non-editable location in the buffer.  Usually you
want to prevent insertions at ineditable locations if the insertion
results from a user action (is interactive).

@default_editable indicates the editability of text that doesn&apos;t
have a tag affecting editability applied to it. Typically the
result of gtk_text_view_get_editable() is appropriate here.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> a position in @buffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> some UTF-8 text
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of text in bytes, or -1
</parameter_description>
</parameter>
<parameter name="default_editable">
<parameter_description> default editability of buffer
</parameter_description>
</parameter>
</parameters>
<return> whether text was actually inserted
</return>
</function>

<function name="gtk_window_set_transient_for">
<description>
Dialog windows should be set transient for the main application
window they were spawned from. This allows &amp;lt;link
linkend=&quot;gtk-X11-arch&quot;&amp;gt;window managers&amp;lt;/link&amp;gt; to e.g. keep the
dialog on top of the main window, or center the dialog over the
main window. gtk_dialog_new_with_buttons() and other convenience
functions in GTK+ will sometimes call
gtk_window_set_transient_for() on your behalf.

On Windows, this function will and put the child window
on top of the parent, much as the window manager would have
done on X.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> parent window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_set_range">
<description>
Sets the minimum and maximum allowable values for @spin_button

</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> minimum allowable value
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> maximum allowable value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_visible_line_offset">
<description>
Returns the offset in characters from the start of the
line to the given @iter, not counting characters that
are invisible due to tags with the &quot;invisible&quot; flag
toggled on.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
</parameters>
<return> offset in visible characters from the start of the line 
</return>
</function>

<function name="gtk_text_iter_has_tag">
<description>
Returns %TRUE if @iter is within a range tagged with @tag.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an iterator
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a #GtkTextTag
</parameter_description>
</parameter>
</parameters>
<return> whether @iter is tagged with @tag
</return>
</function>

<function name="gtk_button_set_use_underline">
<description>
If true, an underline in the text of the button label indicates
the next character should be used for the mnemonic accelerator key.

</description>
<parameters>
<parameter name="button">
<parameter_description> a #GtkButton
</parameter_description>
</parameter>
<parameter name="use_underline">
<parameter_description> %TRUE if underlines in the text indicate mnemonics
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_pixbuf">
<description>
Sets a pixbuf to use as a base image when creating icon variants
for #GtkIconSet. If an icon source has both a filename and a pixbuf
set, the pixbuf will take priority.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> pixbuf to use as a source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_selection_set_mode">
<description>
Sets the selection mode of the @selection.  If the previous type was
#GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
previously selected.

</description>
<parameters>
<parameter name="selection">
<parameter_description> A #GtkTreeSelection.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The selection mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_buffer_set_text">
<description>
Deletes current contents of @buffer, and inserts @text instead. If
@len is -1, @text must be nul-terminated. @text must be valid UTF-8.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> UTF-8 text to insert
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of @text in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_socket_add_id">
<description>
Adds an XEMBED client, such as a #GtkPlug, to the #GtkSocket.  The
client may be in the same process or in a different process. 

To embed a #GtkPlug in a #GtkSocket, you can either create the
#GtkPlug with &amp;lt;literal&amp;gt;gtk_plug_new (0)&amp;lt;/literal&amp;gt;, call 
gtk_plug_get_id() to get the window ID of the plug, and then pass that to the
gtk_socket_add_id(), or you can call gtk_socket_get_id() to get the
window ID for the socket, and call gtk_plug_new() passing in that
ID.

The #GtkSocket must have already be added into a toplevel window
before you can make this call.

</description>
<parameters>
<parameter name="socket_">
<parameter_description> a #GtkSocket
</parameter_description>
</parameter>
<parameter name="window_id">
<parameter_description> the window ID of a client participating in the XEMBED protocol.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_set_vadjustment">
<description>
Sets the #GtkAdjustment for the current vertical aspect.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
<parameter name="adjustment">
<parameter_description> The #GtkAdjustment to set, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_get_modifier_style">
<description>
Returns the current modifier style for the widget. (As set by
gtk_widget_modify_style().) If no style has previously set, a new
#GtkRcStyle will be created with all values unset, and set as the
modifier style for the widget. If you make changes to this rc
style, you must call gtk_widget_modify_style(), passing in the
returned rc style, to make sure that your changes take effect.

Caution: passing the style back to gtk_widget_modify_style() will
normally end up destroying it, because gtk_widget_modify_style() copies
the passed-in style and sets the copy as the new modifier style,
thus dropping any reference to the old modifier style. Add a reference
to the modifier style if you want to keep it alive.


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
</parameters>
<return> the modifier style for the widget. This rc style is
owned by the widget. If you want to keep a pointer to value this
around, you must add a refcount using gtk_rc_style_ref().
</return>
</function>

<function name="gtk_im_context_focus_out">
<description>
Notify the input method that the widget to which this
input context corresponds has lost focus. The input method
may, for example, change the displayed feedback or reset the contexts
state to reflect this change.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkIMContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_item_factories_path_delete">
<description>
Deletes all widgets constructed from the specified path.

</description>
<parameters>
<parameter name="ifactory_path">
<parameter_description> a factory path to prepend to @path. May be %NULL if @path
starts with a factory path
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a path 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_backward_cursor_positions">
<description>
Moves up to @count cursor positions. See
gtk_text_iter_forward_cursor_position() for details.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> number of positions to move
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if we moved and the new position is dereferenceable
</return>
</function>

<function name="gtk_text_buffer_create_mark">
<description>
Creates a mark at position @where. If @mark_name is %NULL, the mark
is anonymous; otherwise, the mark can be retrieved by name using
gtk_text_buffer_get_mark (). If a mark has left gravity, and text is
inserted at the mark&apos;s current location, the mark will be moved to
the left of the newly-inserted text. If the mark has right gravity
(@left_gravity = %FALSE), the mark will end up on the right of
newly-inserted text. The standard left-to-right cursor is a mark
with right gravity (when you type, the cursor stays on the right
side of the text you&apos;re typing).

The caller of this function does &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; own a reference
to the returned #GtkTextMark, so you can ignore the return value
if you like. Marks are owned by the buffer and go away when the
buffer does.

Emits the &quot;mark_set&quot; signal as notification of the mark&apos;s initial
placement.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
<parameter name="mark_name">
<parameter_description> name for mark, or %NULL
</parameter_description>
</parameter>
<parameter name="where">
<parameter_description> location to place mark
</parameter_description>
</parameter>
<parameter name="left_gravity">
<parameter_description> whether the mark has left gravity
</parameter_description>
</parameter>
</parameters>
<return> the new #GtkTextMark object
</return>
</function>

<function name="gtk_text_view_get_pixels_inside_wrap">
<description>
Gets the value set by gtk_text_view_set_pixels_inside_wrap().


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
</parameters>
<return> default number of pixels of blank space between wrapped lines
</return>
</function>

<function name="gtk_tree_model_get_n_columns">
<description>
Returns the number of columns supported by @tree_model.


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
</parameters>
<return> The number of columns.
</return>
</function>

<function name="gtk_accel_map_foreach">
<description>
Loops over the entries in the accelerator map whose accel path 
doesn&apos;t match any of the filters added with gtk_accel_map_add_filter(), 
and execute @foreach_func on each. The signature of @foreach_func is 
that of #GtkAccelMapForeach, the @changed parameter indicates whether
this accelerator was changed during runtime (thus, would need
saving during an accelerator map dump).

</description>
<parameters>
<parameter name="data">
<parameter_description>         data to be passed into @foreach_func
</parameter_description>
</parameter>
<parameter name="foreach_func">
<parameter_description> function to be executed for each accel map entry which
is not filtered out
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_source_set_size_wildcarded">
<description>
If the icon size is wildcarded, this source can be used as the base
image for an icon of any size.  If the size is not wildcarded, then
the size the source applies to should be set with
gtk_icon_source_set_size() and the icon source will only be used
with that specific size.

#GtkIconSet prefers non-wildcarded sources (exact matches) over
wildcarded sources, and will use an exact match when possible.

#GtkIconSet will normally scale wildcarded source images to produce
an appropriate icon at a given size, but will not change the size
of source images that match exactly.

</description>
<parameters>
<parameter name="source">
<parameter_description> a #GtkIconSource
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> %TRUE to wildcard the widget state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_check_menu_item_get_inconsistent">
<description>
Retrieves the value set by gtk_check_menu_item_set_inconsistent().


</description>
<parameters>
<parameter name="check_menu_item">
<parameter_description> a #GtkCheckMenuItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if inconsistent
</return>
</function>

<function name="gtk_window_get_mnemonic_modifier">
<description>
Returns the mnemonic modifier for this window. See
gtk_window_set_mnemonic_modifier().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
</parameters>
<return> the modifier mask used to activate
mnemonics on this window.
</return>
</function>

<function name="gtk_item_factory_from_widget">
<description>
Obtains the item factory from which a widget was created.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a widget
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the item factory from which @widget was created, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_path_get_indices">
<description>
Returns the current indices of @path.  This is an array of integers, each
representing a node in a tree.  This value should not be freed.


</description>
<parameters>
<parameter name="path">
<parameter_description> A #GtkTreePath.
</parameter_description>
</parameter>
</parameters>
<return> The current indices, or %NULL.
</return>
</function>

<function name="gtk_container_class_find_child_property">
<description>
Finds a child property of a container class by name.

</description>
<parameters>
<parameter name="cclass">
<parameter_description> a #GtkContainerClass
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the child property to find
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the #GParamSpec of the child property or %NULL if @class has no
child property with that name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_snap_to_ticks">
<description>
Returns whether the values are corrected to the nearest step. See
gtk_spin_button_set_snap_to_ticks().


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> a #GtkSpinButton
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if values are snapped to the nearest step.
</return>
</function>

<function name="gtk_widget_new">
<description>
This is a convenience function for creating a widget and setting
its properties in one go. For example you might write:
&amp;lt;literal&amp;gt;gtk_widget_new (GTK_TYPE_LABEL, &quot;label&quot;, &quot;Hello World&quot;, &quot;xalign&quot;,
0.0, NULL)&amp;lt;/literal&amp;gt; to create a left-aligned label. Equivalent to
g_object_new(), but returns a widget so you don&apos;t have to
cast the object yourself.


</description>
<parameters>
<parameter name="type">
<parameter_description> type ID of the widget to create
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value of first property, followed by more properties, %NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return> a new #GtkWidget of type @widget_type
</return>
</function>

<function name="gtk_window_set_focus">
<description>
If @focus is not the current focus widget, and is focusable, sets
it as the focus widget for the window. If @focus is %NULL, unsets
the focus widget for this window. To set the focus to a particular
widget in the toplevel, it is usually more convenient to use
gtk_widget_grab_focus() instead of this function.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="focus">
<parameter_description> widget to be the new focus widget, or %NULL to unset
any focus widget for the toplevel window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_icon_set_render_icon">
<description>
Renders an icon using gtk_style_render_icon(). In most cases,
gtk_widget_render_icon() is better, since it automatically provides
most of the arguments from the current widget settings.  This
function never returns %NULL; if the icon can&apos;t be rendered
(perhaps because an image file fails to load), a default &quot;missing
image&quot; icon will be returned instead.


</description>
<parameters>
<parameter name="icon_set">
<parameter_description> a #GtkIconSet
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> a #GtkStyle associated with @widget, or %NULL
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> text direction
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> widget state
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> icon size
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> widget that will display the icon, or %NULL
</parameter_description>
</parameter>
<parameter name="detail">
<parameter_description> detail to pass to the theme engine, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbuf to be displayed
</return>
</function>

<function name="gtk_text_layout_get_line_yrange">
<description>
Find the range of y coordinates for the paragraph containing
the given iter.

</description>
<parameters>
<parameter name="layout">
<parameter_description> a #GtkTextLayout
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description>   a #GtkTextIter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>      location to store the top of the paragraph in pixels,
or %NULL.
@height  location to store the height of the paragraph in pixels,
or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_row_reference_reordered">
<description>
Lets a set of row reference created by gtk_tree_row_reference_new_proxy()
know that the model emitted the &quot;rows_reordered&quot; signal.

</description>
<parameters>
<parameter name="proxy">
<parameter_description> A #GObject
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> The parent path of the reordered signal
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The iter pointing to the parent of the reordered
</parameter_description>
</parameter>
<parameter name="new_order">
<parameter_description> The new order of rows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_view_set_buffer">
<description>
Sets @buffer as the buffer being displayed by @text_view. The previous
buffer displayed by the text view is unreferenced, and a reference is
added to @buffer. If you owned a reference to @buffer before passing it
to this function, you must remove that reference yourself; #GtkTextView
will not &quot;adopt&quot; it.


</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_spin_button_get_adjustment">
<description>
Get the adjustment associated with a #GtkSpinButton


</description>
<parameters>
<parameter name="spin_button">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> the #GtkAdjustment of @spin_button
</return>
</function>

<function name="gtk_text_buffer_get_char_count">
<description>
Gets the number of characters in the buffer; note that characters
and bytes are not the same, you can&apos;t e.g. expect the contents of
the buffer in string form to be this many bytes long. The character
count is cached, so this function is very fast.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer 
</parameter_description>
</parameter>
</parameters>
<return> number of characters in the buffer
</return>
</function>

</root>
