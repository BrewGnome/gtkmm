// -*- c++ -*-
/* $Id$ */

/* 
 *
 * Copyright 2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkaboutdialog.h>
#include <gtk/gtklabel.h>



namespace //anonymous
{

// This Signal Proxy allows the C++ coder to specify
// a sigc::slot instead of a static function.
class SignalProxy_ActivateLink
{
public:
  typedef Gtk::AboutDialog::SlotActivateLink SlotType;

  SignalProxy_ActivateLink(const SlotType& slot)
  : slot_(slot) {}

  ~SignalProxy_ActivateLink();

  static void gtk_callback(GtkAboutDialog* about, const gchar* link, gpointer data);
  static void gtk_callback_destroy(void* data);

private:
  SlotType slot_;
};

SignalProxy_ActivateLink::~SignalProxy_ActivateLink()
{}

void SignalProxy_ActivateLink::gtk_callback(GtkAboutDialog* about, const gchar* link, gpointer data)
{
  SignalProxy_ActivateLink *const self = static_cast<SignalProxy_ActivateLink*>(data);

  try
  {
    Gtk::AboutDialog* pCppAbout = Glib::wrap(about);
    (self->slot_)( *pCppAbout, Glib::convert_const_gchar_ptr_to_ustring(link) );
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

}

void SignalProxy_ActivateLink::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_ActivateLink*>(data);
}

} // anonymous namespace


namespace Gtk
{

//static:
void AboutDialog::set_email_hook(const SlotActivateLink& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_ActivateLink::gtk_callback_destroy() is called.
  SignalProxy_ActivateLink *const pSignalProxy = new SignalProxy_ActivateLink(slot);

  gtk_about_dialog_set_email_hook(
      &SignalProxy_ActivateLink::gtk_callback, pSignalProxy,
      &SignalProxy_ActivateLink::gtk_callback_destroy);
}
  
//static:
void AboutDialog::set_url_hook(const SlotActivateLink& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_ActivateLink::gtk_callback_destroy() is called.
  SignalProxy_ActivateLink *const pSignalProxy = new SignalProxy_ActivateLink(slot);

  gtk_about_dialog_set_url_hook(
      &SignalProxy_ActivateLink::gtk_callback, pSignalProxy,
      &SignalProxy_ActivateLink::gtk_callback_destroy);
} 

} // namespace Gtk

