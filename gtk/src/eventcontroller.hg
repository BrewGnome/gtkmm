/* Copyright (C) 2014 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/object.h>
#include <gtkmm/widget.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{
_WRAP_ENUM(PropagationPhase, GtkPropagationPhase)

/** Self-contained handler of series of events.
 *
 * This is an abstract base class, low-level implementation for event
 * controllers. Those react to a series of GdkEvent%s, and possibly trigger
 * actions as a consequence of those.
 *
 * @newin{3,14}
 */
class EventController : public Glib::Object
{
  _CLASS_GOBJECT(EventController, GtkEventController, GTK_EVENT_CONTROLLER, Glib::Object, GObject)

protected:
  /** There is no create() method that corresponds to this constructor,
   * because only derived classes shall be created.
   */
  _CTOR_DEFAULT

public:
  // No create() because only derived classes shall be instantiated.
  _IGNORE(gtk_event_controller_get_event_mask, gtk_event_controller_set_event_mask) dnl// private

  _WRAP_METHOD(Widget* get_widget(), gtk_event_controller_get_widget)
  _WRAP_METHOD(const Widget* get_widget() const, gtk_event_controller_get_widget, constversion)
  _WRAP_METHOD(bool handle_event(const GdkEvent* event), gtk_event_controller_handle_event)
  _WRAP_METHOD(void reset(), gtk_event_controller_reset)
  _WRAP_METHOD(PropagationPhase get_propagation_phase() const, gtk_event_controller_get_propagation_phase)
  _WRAP_METHOD(void set_propagation_phase(PropagationPhase phase), gtk_event_controller_set_propagation_phase)

  _WRAP_PROPERTY("widget", Widget*)
  _WRAP_PROPERTY("propagation-phase", PropagationPhase)

  // EventController has no signals
};

} // namespace Gtk
