// -*- c++ -*-
/* $Id$ */

/* Copyright 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkcelllayout.h>


namespace //anonymous
{

// This Signal Proxy allows the C++ coder to specify
// a sigc::slot instead of a static function.
class SignalProxy_CellData
{
public:
  typedef Gtk::CellLayout::SlotCellData SlotType;

  SignalProxy_CellData(const SlotType& slot)
  : slot_(slot) {}

  ~SignalProxy_CellData();

  static void gtk_callback(GtkCellLayout* cell_layout, GtkCellRenderer* cell, GtkTreeModel* tree_model, GtkTreeIter* iter, gpointer data);
  static void gtk_callback_destroy(void* data);

private:
  SlotType slot_;
};

SignalProxy_CellData::~SignalProxy_CellData()
{}

void SignalProxy_CellData::gtk_callback(GtkCellLayout* /* cell_layout */, GtkCellRenderer* /* cell */, GtkTreeModel* tree_model, GtkTreeIter* iter, gpointer data)
{
  SignalProxy_CellData *const self = static_cast<SignalProxy_CellData*>(data);

  try
  {
    //We ignore the cell, because that was given as an argument to the connecting method, so the caller should know which one it is already.
    //And we ignore the tree_model because that can be obtained from the iter or from the CellLayout itself.
    (self->slot_)(Gtk::TreeModel::const_iterator(tree_model, iter));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

}

void SignalProxy_CellData::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_CellData*>(data);
}

} // anonymous namespace


namespace Gtk
{

void CellLayout::add_attribute(const Glib::PropertyProxy_Base& property, const TreeModelColumnBase& column)
{
  gtk_cell_layout_add_attribute(gobj(),
      (GtkCellRenderer*) property.get_object()->gobj(), property.get_name(), column.index());
}

void CellLayout::set_cell_data_func(CellRenderer& cell, const SlotCellData& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_CellData::gtk_callback_destroy() is called.
  SignalProxy_CellData *const pSignalProxy = new SignalProxy_CellData(slot);

  gtk_cell_layout_set_cell_data_func(gobj(), cell.gobj(),
      &SignalProxy_CellData::gtk_callback, pSignalProxy,
      &SignalProxy_CellData::gtk_callback_destroy);
}
  

} //namespace Gtk


