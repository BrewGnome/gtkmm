/* $Id: buildable.hg,v 1.3 2006/05/18 17:53:15 murrayc Exp $ */

/* Copyright (C) 2009 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/interface.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/interface_p.h)


#ifndef DOXYGEN_SHOULD_SKIP_THIS
extern "C"
{
typedef struct _GtkBuildableIface GtkBuildableIface;
}
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gtk
{

/** TODO.
 *
 * @newin3p0
 */
class Buildable : public Glib::Interface
{
  _CLASS_INTERFACE(Buildable, GtkBuildable, GTK_BUILDABLE, GtkBuildableIface)

public:
  _WRAP_METHOD(void set_name(const Glib::ustring& name), gtk_buildable_set_name)
  _WRAP_METHOD(Glib::ustring get_name() const, gtk_buildable_get_name)
  
//TODO: #m4 _CONVERSION(`(const Glib::RefPtr<Builder>&',`GtkBuilder*',`($3).gobj()') 
//TODO:  _WRAP_METHOD(void add_child(const Glib::RefPtr<Builder>& builder, const Glib::RefPtr<Glib::Object>& child, const Glib::ustring& type), gtk_buildable_add_child)
  
/* TODO: 
  _WRAP_METHOD(void      gtk_buildable_set_buildable_property (
						GtkBuilder          *builder,
						const Glib::ustring& name,
						const GValue        *value);
  _WRAP_METHOD(GObject * gtk_buildable_construct_child        (
						GtkBuilder          *builder,
						const Glib::ustring& name);
  _WRAP_METHOD(gboolean  gtk_buildable_custom_tag_start       (
						GtkBuilder          *builder,
						GObject             *child,
						const Glib::ustring& tagname,
						GMarkupParser       *parser,
						gpointer            *data);
  _WRAP_METHOD(void      gtk_buildable_custom_tag_end         (
						GtkBuilder          *builder,
						GObject             *child,
						const Glib::ustring& tagname,
						gpointer            *data);
  _WRAP_METHOD(void      gtk_buildable_custom_finished        (
						GtkBuilder          *builder,
						GObject             *child,
						const Glib::ustring& tagname,
						gpointer             data);
  _WRAP_METHOD(void      gtk_buildable_parser_finished        (
						GtkBuilder          *builder);
  _WRAP_METHOD(GObject * gtk_buildable_get_internal_child     (
						GtkBuilder          *builder,
						const Glib::ustring& childname);
*/
						
  //TODO: Properties, signals, vfuncs.
};

} // namespace Gtk

