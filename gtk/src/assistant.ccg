// -*- c++ -*-
/* $Id$ */

/* 
 *
 * Copyright 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkassistant.h>
#include <gtk/gtklabel.h>



namespace //anonymous
{

// This Signal Proxy allows the C++ coder to specify
// a sigc::slot instead of a static function.
class SignalProxy_SlotForwardPage
{
public:
  typedef Gtk::Assistant::SlotForwardPage SlotType;

  SignalProxy_SlotForwardPage(const SlotType& slot)
  : slot_(slot) {}

  ~SignalProxy_SlotForwardPage();

  static gint gtk_callback(gint current_page, gpointer data);
  static void gtk_callback_destroy(void* data);

private:
  SlotType slot_;
};

SignalProxy_SlotForwardPage::~SignalProxy_SlotForwardPage()
{}

gint SignalProxy_SlotForwardPage::gtk_callback(gint current_page, gpointer data)
{
  SignalProxy_SlotForwardPage *const self = static_cast<SignalProxy_SlotForwardPage*>(data);

  try
  {
    return (self->slot_)(current_page);
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
    return gint();
  }

}

void SignalProxy_SlotForwardPage::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_SlotForwardPage*>(data);
}

} // anonymous namespace


namespace Gtk
{

void Assistant::set_forward_page_func(const SlotForwardPage& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_SlotForwardPage::gtk_callback_destroy() is called.
  SignalProxy_SlotForwardPage *const pSignalProxy = new SignalProxy_SlotForwardPage(slot);

  gtk_assistant_set_forward_page_func(gobj(), 
      &SignalProxy_SlotForwardPage::gtk_callback, pSignalProxy,
      &SignalProxy_SlotForwardPage::gtk_callback_destroy);
}
  

} // namespace Gtk

