// -*- c++ -*-
/* $Id$ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/treeview.h>
#include <gtk/gtktreeselection.h>


namespace
{

void proxy_foreach_selection_iter_callback(GtkTreeModel* model, GtkTreePath*, GtkTreeIter* iter, void* data)
{
  typedef Gtk::TreeSelection::SlotForeachIter SlotType;
  SlotType& slot = *static_cast<SlotType*>(data);

  try
  {
    slot(Gtk::TreeModel::iterator(model, iter));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

void proxy_foreach_selection_path_callback(GtkTreeModel*, GtkTreePath* path, GtkTreeIter*, void* data)
{
  typedef Gtk::TreeSelection::SlotForeachPath SlotType;
  SlotType& slot = *static_cast<SlotType*>(data);

  try
  {
    slot(Gtk::TreeModel::Path(path, true));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

void proxy_foreach_selection_path_and_iter_callback(GtkTreeModel* model, GtkTreePath* path,
                                                    GtkTreeIter* iter, void* data)
{
  typedef Gtk::TreeSelection::SlotForeachPathAndIter SlotType;
  SlotType& slot = *static_cast<SlotType*>(data);

  try
  {
    slot(Gtk::TreeModel::Path(path, true), Gtk::TreeModel::iterator(model, iter));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}


// This Signal Proxy allows the C++ coder to specify
// a sigc::Slot instead of a static function.
class SignalProxy_Select
{
public:
  typedef Gtk::TreeSelection::SlotSelect SlotType;

  SignalProxy_Select(const SlotType& slot) : slot_(slot) {}
  ~SignalProxy_Select();

  static gboolean gtk_callback(GtkTreeSelection*, GtkTreeModel* model, GtkTreePath* path,
                               gboolean path_currently_selected, void* data);

  static void gtk_callback_destroy(void* data);

private:
  SlotType slot_;
};

SignalProxy_Select::~SignalProxy_Select()
{}

gboolean SignalProxy_Select::gtk_callback(GtkTreeSelection*, GtkTreeModel* model, GtkTreePath* path,
                                          gboolean path_currently_selected, void* data)
{
  SignalProxy_Select *const self = static_cast<SignalProxy_Select*>(data);

  try
  {
    return (self->slot_)(Glib::wrap(model, true),   // take copy
                         Gtk::TreePath(path, true), // take copy
                         path_currently_selected);
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return 0;
}

void SignalProxy_Select::gtk_callback_destroy(void* data)
{
  delete static_cast<SignalProxy_Select*>(data);
}

} // anonymous namespace


namespace Gtk
{

void TreeSelection::set_select_function(const SlotSelect& slot)
{
  // Create a signal proxy.  A pointer to this will be passed
  // through the callback's data parameter.  It will be deleted
  // when SignalProxy_Select::gtk_callback_destroy() is called.
  SignalProxy_Select *const pSignalProxy = new SignalProxy_Select(slot);

  gtk_tree_selection_set_select_function(gobj(),
      &SignalProxy_Select::gtk_callback, pSignalProxy,
      &SignalProxy_Select::gtk_callback_destroy);
}

Glib::RefPtr<TreeModel> TreeSelection::get_model()
{
  GtkTreeView *const tree_view = gtk_tree_selection_get_tree_view(gobj());
  return Glib::wrap(gtk_tree_view_get_model(tree_view), true);
}

Glib::RefPtr<const TreeModel> TreeSelection::get_model() const
{
  GtkTreeView *const tree_view = gtk_tree_selection_get_tree_view(const_cast<GtkTreeSelection*>(gobj()));
  return Glib::wrap(gtk_tree_view_get_model(tree_view), true);
}

TreeModel::iterator TreeSelection::get_selected()
{
  TreeModel::iterator iter;
  GtkTreeModel* model_gobject = 0;

  gtk_tree_selection_get_selected(gobj(), &model_gobject, iter.gobj());

  iter.set_model_gobject(model_gobject);
  return iter;
}

TreeModel::iterator TreeSelection::get_selected(Glib::RefPtr<TreeModel>& model)
{
  TreeModel::iterator iter;
  GtkTreeModel* model_gobject = 0;

  gtk_tree_selection_get_selected(gobj(), &model_gobject, iter.gobj());

  model = Glib::wrap(model_gobject, true);

  iter.set_model_refptr(model);
  return iter;
}

void TreeSelection::selected_foreach(const SlotForeachIter& slot)
{
  SlotForeachIter slot_copy (slot);
  gtk_tree_selection_selected_foreach(gobj(), &proxy_foreach_selection_iter_callback, &slot_copy);
}

void TreeSelection::selected_foreach(const SlotForeachPath& slot)
{
  SlotForeachPath slot_copy (slot);
  gtk_tree_selection_selected_foreach(gobj(), &proxy_foreach_selection_path_callback, &slot_copy);
}

void TreeSelection::selected_foreach(const SlotForeachPathAndIter& slot)
{
  SlotForeachPathAndIter slot_copy (slot);
  gtk_tree_selection_selected_foreach(gobj(), &proxy_foreach_selection_path_and_iter_callback, &slot_copy);
}

TreeSelection::ListHandle_Path TreeSelection::get_selected_rows() const
{
  return ListHandle_Path(gtk_tree_selection_get_selected_rows(
      const_cast<GtkTreeSelection*>(gobj()), 0), Glib::OWNERSHIP_DEEP);
}

TreeSelection::ListHandle_Path TreeSelection::get_selected_rows(Glib::RefPtr<TreeModel>& model)
{
  GtkTreeModel* model_gobject = 0;

  const ListHandle_Path result (gtk_tree_selection_get_selected_rows(
      const_cast<GtkTreeSelection*>(gobj()), &model_gobject), Glib::OWNERSHIP_DEEP);

  model = Glib::wrap(model_gobject, true);
  return result;
}

} // namespace Gtk

