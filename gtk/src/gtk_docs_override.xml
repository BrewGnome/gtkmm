<root>
<function name="gtk_box_pack_start">
<description>
Left side insert a widget to a box.
The expand argument to {pack_start()} or {pack_end()}
controls whether the widgets are laid out in the box to {fill} in all
the extra space in the box so the box is expanded to fill the area
alloted to it ({\key true}). Or the box is shrunk to just fit the widgets
({\key false}).  Setting {expand} to {\key false} will allow you
to do right and left
justifying of your widgets.  Otherwise, they will all expand to fit in
the box, and the same effect could be achieved by using only one of
{pack_start()} or {pack_end()} functions.

The fill argument to the {pack_start()}/{pack_end()} functions control whether the
extra space is allocated to the objects themselves ({\key true}), or as extra
padding in the box around these objects ({\key false}). It only has an effect
if the {expand} argument is also {\key true}.

The difference between spacing (set when the box is created)
and {padding} (set when elements are packed), spacing is added between
objects, and {padding} is added on either side of an object.
</description>
</function>

<function name="gtk_text_view_get_default_attributes">
<description>
Obtains a copy of the default text attributes. These are the
attributes used for text unless a tag overrides them.
You&apos;d typically pass the default attributes in to
Gtk::TextIter::get_attributes() in order to get the
attributes in effect at a given text position.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
 
</parameter_description>
</parameter>
</parameters>
<return> a new #Gtk::TextAttributes
</return>
</function>

<function name="gtk_label_get_label">
<description>
Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup. (See
get_text ()).
</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel

</parameter_description>
</parameter>
</parameters>
<return> the text of the label widget..
</return>
</function>

<function name="gtk_label_get_text">
<description>
Fetches the text from a label widget, as displayed on the
screen. This does not include any embedded underlines
indicating mnemonics or Pango markup. (See get_label())
</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the text in the label widget.
</return>
</function>

<function name="gtk_label_get_layout">
<description>
Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_label_get_layout_offsets().
</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel

</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this label
</return>
</function>

<function name="gtk_notebook_get_tab_label_text">
<description>
Retrieves the text of the tab label for the page containing
@child.
</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook

</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget contained in a page of @notebook

</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label.
</return>
</function>

<function name="gtk_notebook_get_menu_label_text">
<description>
Retrieves the text of the menu label for the page containing
@child.
</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook

</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget of a page of the notebook.

</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label.
</return>
</function>

<function name="gtk_text_buffer_delete_mark">
<description>
Deletes @mark, so that it&apos;s no longer located anywhere in the
buffer. Removes the reference the buffer holds to the mark, so if
you don't keep a Glib::RefPtr to the mark, it will be freed. Even
if the mark isn&apos;t freed, most operations on @mark become
invalid. There is no way to undelete a
mark. gtk_text_mark_get_deleted () will return TRUE after this
function has been called on a mark; gtk_text_mark_get_deleted ()
indicates that a mark no longer belongs to a buffer. The &quot;mark_deleted&quot;
signal will be emitted as notification after the mark is deleted.
</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer

</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark in @buffer

</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_tags">
<description>
Returns a list of tags that apply to @iter, in ascending order of
priority (highest-priority tags are last).
</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter

</parameter_description>
</parameter>
</parameters>
<return> list of #GtkTextTag
</return>
</function>

<function name="gtk_text_view_get_tabs">
<description>
Gets the default tabs for @text_view. Tags in the buffer may
override the defaults. The returned array will be %NULL if
&quot;standard&quot; (8-space) tabs are used.
</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView

</parameter_description>
</parameter>
</parameters>
<return> copy of default tab array, or %NULL if &quot;standard&quot; tabs are used.
</return>
</function>



<function name="gtk_dialog_run">
<description>
Blocks in a recursive main loop until the @dialog emits the
response signal. It returns the response ID from the &quot;response&quot; signal emission.
Before entering the recursive main loop, gtk_dialog_run() calls
Gtk::Widget::show() on the dialog for you. Note that you still
need to show any children of the dialog yourself.

If the dialog receives &quot;delete_event&quot;,  Gtk::Dialog::run() will return
#GTK_RESPONSE_DELETE_EVENT. Also, during Gtk::Dialog::run() the dialog will be
modal. You can force Gtk::Dialog::run() to return at any time by
calling Gtk::Dialog::response() to emit the &quot;response&quot;
signal.

After Gtk::Dialog::run() returns, you are responsible for hiding or
destroying the dialog if you wish to do so.

Typical usage of this function might be:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gint result = dialog.run();
switch (result)
{
case GTK_RESPONSE_ACCEPT:
do_application_specific_something (&amp;lt;!-- --&amp;gt;);
break;
default:
do_nothing_since_dialog_was_cancelled (&amp;lt;!-- --&amp;gt;);
break;
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
</parameters>
<return> response ID
</return>
</function>

<function name="gtk_accel_label_set_accel_width">
<description>
Sets the widget to be monitored by this accelerator label.
</description>
<parameters>
<parameter name="accel_label">
<parameter_description> Ignored :)
</parameter_description>
</parameter>
<parameter name="widget">
<parameter_description> The Widget to be monitored.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_accel_label_get_accel_width">
<description>
Gets the width needed to display this accelerator label. This is used by menus to align all of the Gtk::MenuItem widgets, and shouldn't be needed by applications.
</description>
<parameters>
</parameters>
<return> width of this accelerator label.
</return>
</function>

<function name="gtk_accel_label_refetch">
<description>
Recreates the string representing the accelerator keys.
</description>
<parameters>
</parameters>
<return> always returns %FALSE.
</return>
</function>

<function name="gtk_adjustment_changed">
<description>
Emits a "changed" signal from the Adjustment.  This is typically called by the owner of the Adjustment after it has changed any of the Adjustment fields other than the value.
</description>
<parameters>
</parameters>
<return>
</return>
</function>

<function name="gtk_adjustment_value_changed">
<description>
Emits a "value_changed" signal from the Adjustment.  This is typically called by the owner of the Adjustment after it has changed the Adjustment value field.
</description>
<parameters>
</parameters>
<return>
</return>
</function>

<function name="gtk_adjustment_clamp_page">
<description>
Updates the Adjustment value to ensure that the range between the parameters @lower and @upper is in the current page (i.e. between @value and @value + @page_size).  If this range is larger than the page size, then only the start of it will be in the current page.  A "changed" signal will be emitted if the value is changed.
</description>
<parameters>
<parameter name="adjustment">
<parameter_description> Ignored :)
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> The upper value.
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> The lower value.
</parameter_description>
</parameter>
</parameters>
<return>
</return>
</function>

<function name="gtk_adjustment_set_value">
<description>
Sets the current value of the Adjustment
</description>
<parameters>
<parameter name="adjustment">
<parameter_description> Ignored :)
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value of the Adjustment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_alignment_set">
<description>
Sets the Alignment values.
</description>
<parameters>
<parameter name="alignment">
<parameter_description> Ignored :)
</parameter_description>
</parameter>
<parameter name="xalign">
<parameter_description> The horizontal alignment of the child of this Alignment, from 0 (left) to 1 (right).
</parameter_description>
</parameter>
<parameter name="yalign">
<parameter_description> The vertical alignment of the child of this Alignment, from 0 (top) to 1 (bottom).
</parameter_description>
</parameter>
<parameter name="xscale">
<parameter_description> The amount that the child expands horizontally to fill up unused space, from 0 to 1.  A value of 0 indicates that the child widget should never expand.  A value of 1 indicates that the child widget will expand to fill all the space allocated for the Alignment.
</parameter_description>
</parameter>
<parameter name="yscale">
<parameter_description> The amount that the child widget expands vertically to fill up unused space from 0 to 1.  The values are similar to @xscale.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_arrow_set">
<description>
Sets the direction and shadow of this Arrow.
</description>
<parameters>
<parameter name="arrow">
<parameter_description> Ignored :)
</parameter_description>
</parameter>
<parameter name="arrow_type">
<parameter_description> A Gtk::ArrowType enum describing what arrow type to set this Arrow to.
</parameter_description>
</parameter>
<parameter name="shadow_type">
<parameter_description> A Gtk::ShadowType enum describing what shadow type to set this Arrow to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>


<function name="gtk_text_child_anchor_get_widgets">
<description>
Gets a list of all widgets anchored at this child anchor.

</description>
<parameters>
<parameter name="anchor">
<parameter_description> a #GtkTextChildAnchor
</parameter_description>
</parameter>
</parameters>
<return> list of widgets anchored at @anchor
</return>
</function>


<function name="gtk_tree_model_get_path">
<description>
Returns a #GtkTreePath referenced by @iter. 


</description>
<parameters>
<parameter name="tree_model">
<parameter_description> A #GtkTreeModel.
</parameter_description>
</parameter>
<parameter name="iter">
<parameter_description> The #GtkTreeIter.
</parameter_description>
</parameter>
</parameters>
<return> a #GtkTreePath.
</return>
</function>


<function name="gtk_tree_view_column_get_cell_renderers">
<description>
Returns a list of all the cell renderers in the column,
in no particular order. 

</description>
<parameters>
<parameter name="tree_column">
<parameter_description> A #GtkTreeViewColumn
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkCellRenderers
</return>
</function>


<function name="gtk_tree_view_get_columns">
<description>
Returns a list of all the #GtkTreeViewColumn s currently in @tree_view.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> A #GtkTreeView
</parameter_description>
</parameter>
</parameters>
<return> A list of #GtkTreeViewColumn s
</return>
</function>


<function name="gtk_window_get_default_icon_list">
<description>
Gets the value set by Gtk::Window::set_default_icon_list().

</description>
<parameters>
</parameters>
<return> copy of default icon list
</return>
</function>


<function name="gtk_window_set_default">
<description>
The default widget is the widget that&apos;s activated when the user
presses Enter in a dialog (for example). This function sets or
unsets the default widget for a #GtkWindow. When setting
(rather than unsetting) the default widget it&apos;s generally easier to
call gtk_widget_grab_focus() on the widget. Before making a widget
the default widget, you must set the #GTK_CAN_DEFAULT flag on the
widget you&apos;d like to make the default using Gtk::Widget::set_flags().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="default_widget">
<parameter_description> widget to be the default.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_menu_item_set_accel_path">
<description>
Set the accelerator path on @menu_item, through which runtime changes of the
menu item&apos;s accelerator caused by the user can be identified and saved to
persistant storage (see gtk_accel_map_save() on this).
To setup a default accelerator for this menu item, call
gtk_accel_map_add_entry() with the same @accel_path.
See also gtk_accel_map_add_entry() on the specifics of accelerator paths,
and gtk_menu_set_accel_path() for a more convenient variant of this function.

This function is basically a convenience wrapper that handles calling
gtk_widget_set_accel_path() with the appropriate accelerator group for
the menu item.

Note that you do need to set an accelerator on the parent menu with
gtk_menu_set_accel_group() for this to work.

</description>
<parameters>
<parameter name="menu_item">
<parameter_description>  a valid #GtkMenuItem
</parameter_description>
</parameter>
<parameter name="accel_path">
<parameter_description> accelerator path, corresponding to this menu item&apos;s
functionality.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_append_page">
<description>
Appends a page to @notebook.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_append_page_menu">
<description>
Appends a page to @notebook, specifying the widget to use as the
label in the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_insert_page">
<description>
Insert a page into @notebook at the given position

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page after all other pages.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_insert_page_menu">
<description>
Insert a page into @notebook at the given position, specifying
the widget to use as the label in the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page..
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the index (starting at 0) at which to insert the page,
or -1 to append the page after all other pages.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_prepend_page">
<description>
Prepends a page to @notebook.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_notebook_prepend_page_menu">
<description>
Prepends a page to @notebook, specifying the widget to use as the
label in the popup menu.

</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the #GtkWidget to use as the contents of the page.
</parameter_description>
</parameter>
<parameter name="tab_label">
<parameter_description> the #GtkWidget to be used as the label for the page.
</parameter_description>
</parameter>
<parameter name="menu_label">
<parameter_description> the widget to use as a label for the page-switch
menu.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_background_area">
<description>
Fills the bounding rectangle in tree window coordinates for the cell at the
row specified by @path and the column specified by @column.  The returned rectangle is equivalent to the
@background_area passed to gtk_cell_renderer_render().  These background
areas tile to cover the entire tree window (except for the area used for
header buttons). Contrast with the @cell_area, returned by
gtk_tree_view_get_cell_area(), which returns only the cell itself, excluding
surrounding borders and the tree expander area.


</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath for the row.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn for the column.
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with cell background rect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_tree_view_get_cell_area">
<description>
Fills the bounding rectangle in tree window coordinates for the cell at the
row specified by @path and the column specified by @column.  If @path points to a path not currently displayed, the @y and @height fields
of the rectangle will be filled with 0.  The sum of all cell rects does not cover the
entire tree; there are extra pixels in between rows, for example. The
returned rectangle is equivalent to the @cell_area passed to
gtk_cell_renderer_render().  This function is only valid if #tree_view is
realized.

</description>
<parameters>
<parameter name="tree_view">
<parameter_description> a #GtkTreeView
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a #GtkTreePath for the row.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #GtkTreeViewColumn for the column.
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with cell rect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_base">
<description>
Sets the base color for a widget in a particular state.
All other style values are left untouched. The base color
is the background color used along with the text color
(see gtk_widget_modify_text()) for widgets such as #GtkEntry
and #GtkTextView. See also gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the base color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_bg">
<description>
Sets the background color for a widget in a particular state.  All
other style values are left untouched. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the background color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_fg">
<description>
Sets the foreground color for a widget in a particular state.  All
other style values are left untouched. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the foreground color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_font">
<description>
Sets the font to use for a widget.  All other style values are left
untouched. See also gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> the font description to use.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_modify_text">
<description>
Sets the text color for a widget in a particular state.  All other
style values are left untouched. The text color is the foreground
color used along with the base color (see gtk_widget_modify_base())
for widgets such as #GtkEntry and #GtkTextView. See also
gtk_widget_modify_style().

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the state for which to set the text color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to assign (does not need to be allocated).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_set_style">
<description>
Sets the #GtkStyle for a widget (@widget-&amp;gt;style). You probably don&apos;t
want to use this function; it interacts badly with themes, because
themes work by replacing the #GtkStyle. Instead, use
gtk_widget_modify_style().


</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget
</parameter_description>
</parameter>
<parameter name="style">
<parameter_description> a #GtkStyle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_widget_shape_combine_mask">
<description>
Sets a shape for this widget&apos;s GDK window. This allows for
transparent windows etc., see gdk_window_shape_combine_mask()
for more information.

</description>
<parameters>
<parameter name="widget">
<parameter_description> a #GtkWidget.
</parameter_description>
</parameter>
<parameter name="shape_mask">
<parameter_description> shape to be added.
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of shape mask with respect to @window.
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of shape mask with respect to @window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_default">
<description>
The default widget is the widget that&apos;s activated when the user
presses Enter in a dialog (for example). This function sets the default widget for a #GtkWindow. When setting
(rather than unsetting) the default widget it&apos;s generally easier to
call gtk_widget_grab_focus() on the widget. Before making a widget
the default widget, you must set the #GTK_CAN_DEFAULT flag on the
widget you&apos;d like to make the default using GTK_WIDGET_SET_FLAGS().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="default_widget">
<parameter_description> widget to be the default.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_window_set_focus">
<description>
If @focus is not the current focus widget, and is focusable, sets
it as the focus widget for the window. To set the focus to a particular
widget in the toplevel, it is usually more convenient to use
gtk_widget_grab_focus() instead of this function.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GtkWindow
</parameter_description>
</parameter>
<parameter name="focus">
<parameter_description> widget to be the new focus widget.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_drag_dest_find_target">
<description>
Looks for a match between @context-&amp;gt;targets and the
@dest_target_list, returning the first matching target, otherwise
returning %GDK_NONE. @dest_target_list should usually be the return
value from gtk_drag_dest_get_target_list(), but some widgets may
have different valid targets for different parts of the widget; in
that case, they will have to implement a drag_motion handler that
passes the correct target list to this function.


</description>
<parameters>
<parameter name="widget">
<parameter_description> drag destination widget
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> drag context
</parameter_description>
</parameter>
<parameter name="target_list">
<parameter_description> list of droppable targets.
</parameter_description>
</parameter>
</parameters>
<return> first target that the source offers and the dest can accept, or %GDK_NONE
</return>
</function>

<function name="gdk_drawable_get_image">
<description>
A #GdkImage stores client-side image data (pixels). In contrast,
#GdkPixmap and #GdkWindow are server-side
objects. gdk_drawable_get_image() obtains the pixels from a
server-side drawable as a client-side #GdkImage.  The format of a
#GdkImage depends on the #GdkVisual of the current display, which
makes manipulating #GdkImage extremely difficult; therefore, in
most cases you should use the Gdk::Pixbuf constructor that takes a Gdk::Drawable instead of
this lower-level function. A #GdkPixbuf contains image data in a
canonicalized RGB format, rather than a display-dependent format.
Of course, there&apos;s a convenience vs. speed tradeoff here, so you&apos;ll
want to think about what makes sense for your application.

@x, @y, @width, and @height define the region of @drawable to
obtain as an image.

You would usually copy image data to the client side if you intend
to examine the values of individual pixels, for example to darken
an image or add a red tint. It would be prohibitively slow to
make a round-trip request to the windowing system for each pixel,
so instead you get all of them at once, modify them, then copy
them all back at once.

If the X server or other windowing system backend is on the local
machine, this function may use shared memory to avoid copying
the image data.

If the source drawable is a #GdkWindow and partially offscreen
or obscured, then the obscured portions of the returned image
will contain undefined data.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height or region to get
</parameter_description>
</parameter>
</parameters>
<return> a #GdkImage containing the contents of @drawable
</return>
</function>



</root>
