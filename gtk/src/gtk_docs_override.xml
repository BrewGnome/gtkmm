<root>
<function name="gtk_box_pack_start">
<description>
Left side insert a widget to a box.
The expand argument to {pack_start()} or {pack_end()}
controls whether the widgets are laid out in the box to {fill} in all
the extra space in the box so the box is expanded to fill the area
alloted to it ({\key true}). Or the box is shrunk to just fit the widgets
({\key false}).  Setting {expand} to {\key false} will allow you
to do right and left
justifying of your widgets.  Otherwise, they will all expand to fit in
the box, and the same effect could be achieved by using only one of
{pack_start()} or {pack_end()} functions.

The fill argument to the {pack_start()}/{pack_end()} functions control whether the
extra space is allocated to the objects themselves ({\key true}), or as extra
padding in the box around these objects ({\key false}). It only has an effect
if the {expand} argument is also {\key true}.

The difference between spacing (set when the box is created)
and {padding} (set when elements are packed), spacing is added between
objects, and {padding} is added on either side of an object.
</description>
</function>

<function name="gtk_text_view_get_default_attributes">
<description>
Obtains a copy of the default text attributes. These are the
attributes used for text unless a tag overrides them.
You&apos;d typically pass the default attributes in to
Gtk::TextIter::get_attributes() in order to get the
attributes in effect at a given text position.

</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView
 
</parameter_description>
</parameter>
</parameters>
<return> a new #Gtk::TextAttributes
</return>
</function>

<function name="gtk_label_get_label">
<description>
Fetches the text from a label widget including any embedded
underlines indicating mnemonics and Pango markup. (See
get_text ()).
</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel

</parameter_description>
</parameter>
</parameters>
<return> the text of the label widget..
</return>
</function>

<function name="gtk_label_get_text">
<description>
Fetches the text from a label widget, as displayed on the
screen. This does not include any embedded underlines
indicating mnemonics or Pango markup. (See get_label())
</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel
</parameter_description>
</parameter>
</parameters>
<return> the text in the label widget.
</return>
</function>

<function name="gtk_label_get_layout">
<description>
Gets the #PangoLayout used to display the label.
The layout is useful to e.g. convert text positions to
pixel positions, in combination with gtk_label_get_layout_offsets().
</description>
<parameters>
<parameter name="label">
<parameter_description> a #GtkLabel

</parameter_description>
</parameter>
</parameters>
<return> the #PangoLayout for this label
</return>
</function>

<function name="gtk_notebook_get_tab_label_text">
<description>
Retrieves the text of the tab label for the page containing
@child.
</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook

</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a widget contained in a page of @notebook

</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label.
</return>
</function>

<function name="gtk_notebook_get_menu_label_text">
<description>
Retrieves the text of the menu label for the page containing
@child.
</description>
<parameters>
<parameter name="notebook">
<parameter_description> a #GtkNotebook

</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the child widget of a page of the notebook.

</parameter_description>
</parameter>
</parameters>
<return>value: the text of the tab label.
</return>
</function>

<function name="gtk_text_buffer_delete_mark">
<description>
Deletes @mark, so that it&apos;s no longer located anywhere in the
buffer. Removes the reference the buffer holds to the mark, so if
you don't keep a Glib::RefPtr to the mark, it will be freed. Even
if the mark isn&apos;t freed, most operations on @mark become
invalid. There is no way to undelete a
mark. gtk_text_mark_get_deleted () will return TRUE after this
function has been called on a mark; gtk_text_mark_get_deleted ()
indicates that a mark no longer belongs to a buffer. The &quot;mark_deleted&quot;
signal will be emitted as notification after the mark is deleted.
</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GtkTextBuffer

</parameter_description>
</parameter>
<parameter name="mark">
<parameter_description> a #GtkTextMark in @buffer

</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gtk_text_iter_get_tags">
<description>
Returns a list of tags that apply to @iter, in ascending order of
priority (highest-priority tags are last).
</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GtkTextIter

</parameter_description>
</parameter>
</parameters>
<return> list of #GtkTextTag
</return>
</function>

<function name="gtk_text_view_get_tabs">
<description>
Gets the default tabs for @text_view. Tags in the buffer may
override the defaults. The returned array will be %NULL if
&quot;standard&quot; (8-space) tabs are used.
</description>
<parameters>
<parameter name="text_view">
<parameter_description> a #GtkTextView

</parameter_description>
</parameter>
</parameters>
<return> copy of default tab array, or %NULL if &quot;standard&quot; tabs are used.
</return>
</function>



<function name="gtk_dialog_run">
<description>
Blocks in a recursive main loop until the @dialog emits the
response signal. It returns the response ID from the &quot;response&quot; signal emission.
Before entering the recursive main loop, gtk_dialog_run() calls
Gtk::Widget::show() on the dialog for you. Note that you still
need to show any children of the dialog yourself.

If the dialog receives &quot;delete_event&quot;,  Gtk::Dialog::run() will return
#GTK_RESPONSE_DELETE_EVENT. Also, during Gtk::Dialog::run() the dialog will be
modal. You can force Gtk::Dialog::run() to return at any time by
calling Gtk::Dialog::response() to emit the &quot;response&quot;
signal.

After Gtk::Dialog::run() returns, you are responsible for hiding or
destroying the dialog if you wish to do so.

Typical usage of this function might be:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gint result = dialog.run();
switch (result)
{
case GTK_RESPONSE_ACCEPT:
do_application_specific_something (&amp;lt;!-- --&amp;gt;);
break;
default:
do_nothing_since_dialog_was_cancelled (&amp;lt;!-- --&amp;gt;);
break;
}
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;


</description>
<parameters>
<parameter name="dialog">
<parameter_description> a #GtkDialog
</parameter_description>
</parameter>
</parameters>
<return> response ID
</return>
</function>



</root>
