/* $Id$ */

/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtkmm/widget.h>
#include <gtkmm/treemodel.h>
 
_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)


namespace Gtk
{

class EntryCompletion : public Glib::Object
{
  _CLASS_GOBJECT(EntryCompletion, GtkEntryCompletion, GTK_ENTRY_COMPLETION, Glib::Object, GObject)

  _CTOR_DEFAULT()
public:
  _WRAP_CREATE()

  //TODO: Is this actually always a Gtk::Entry?
  _WRAP_METHOD(Gtk::Widget* get_entry(), gtk_entry_completion_get_entry)
  _WRAP_METHOD(const Gtk::Widget* get_entry() const, gtk_entry_completion_get_entry)

  _WRAP_METHOD(void set_model(const Glib::RefPtr<TreeModel>& model), gtk_entry_completion_set_model)
  _WRAP_METHOD(Glib::RefPtr<TreeModel> get_model(), gtk_entry_completion_get_model)
  _WRAP_METHOD(Glib::RefPtr<const TreeModel> get_model() const, gtk_entry_completion_get_model)

  //TODO: Use Slot: _WRAP_METHOD(void set_match_func(GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify), gtk_entry_completion_set_match_func)
  _WRAP_METHOD(void set_minimum_key_length(int length), gtk_entry_completion_set_minimum_key_length)
  _WRAP_METHOD(int get_minimum_key_length() const, gtk_entry_completion_get_minimum_key_length)
  _WRAP_METHOD(void complete(), gtk_entry_completion_complete)

  //TODO: reorder parameters, and use default index value?:
  _WRAP_METHOD(void insert_action_text(int index, const Glib::ustring& text), gtk_entry_completion_insert_action_text)
  _WRAP_METHOD(void insert_action_markup(int index, const Glib::ustring& markup), gtk_entry_completion_insert_action_markup)

  //TODO: Default value:
  _WRAP_METHOD(void delete_action(int index), gtk_entry_completion_delete_action)

  _WRAP_METHOD(void set_text_column(int column), gtk_entry_completion_set_text_column)

  //TODO: The C++ iterator needs to know about the model. We need some custom stuff here.
  //but I think I've done it elsewhere. murrayc:
  //_WRAP_SIGNAL(bool match_selected(const Glib::RefPtr<const TreeModel>& model, const TreeModel::iterator& iter), match_selected)
  _WRAP_SIGNAL(void action_activated(int index), action_activated)

             
};

} // namespace Gtk

