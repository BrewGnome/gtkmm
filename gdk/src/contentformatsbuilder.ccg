/* Copyright (C) 2017 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

namespace Gdk
{
ContentFormatsBuilder::ContentFormatsBuilder()
: gobject_(gdk_content_formats_builder_new())
{
}

ContentFormatsBuilder::ContentFormatsBuilder(ContentFormatsBuilder&& other) noexcept
: gobject_(std::move(other.gobject_))
{
  other.gobject_ = gdk_content_formats_builder_new();
}

ContentFormatsBuilder& ContentFormatsBuilder::operator=(ContentFormatsBuilder&& other) noexcept
{
  ContentFormatsBuilder temp(std::move(other));
  std::swap(gobject_, temp.gobject_);
  return *this;
}

ContentFormatsBuilder::~ContentFormatsBuilder()
{
  // The only way to destroy a GdkContentFormatsBuilder instance is to
  // make a GdkContentFormats instance, and unref it.
  gdk_content_formats_unref(gdk_content_formats_builder_free(gobj()));
}

Glib::RefPtr<ContentFormats> ContentFormatsBuilder::make_content_formats()
{
  GdkContentFormats* formats = gdk_content_formats_builder_free(gobj());
  // Make sure gobject_ is a valid pointer.
  gobject_ = gdk_content_formats_builder_new();
  return Glib::wrap(formats);
}

} // namespace Gdk
