<root>
<function name="gdk_char_height">
<description>
Determines the total height of a given character.
This value is not generally useful, because you cannot
determine how this total height will be drawn in
relation to the baseline. See gdk_text_extents().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the height of the character in pixels.

Deprecated: Use gdk_text_extents() instead.
</return>
</function>

<function name="gdk_add_client_message_filter">
<description>
Adds a filter to the default display to be called when X ClientMessage events
are received. See gdk_display_add_client_message_filter().

</description>
<parameters>
<parameter name="message_type">
<parameter_description> the type of ClientMessage events to receive. This will be
checked against the &amp;lt;structfield&amp;gt;message_type&amp;lt;/structfield&amp;gt; field of the
XClientMessage event struct.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call to process the event.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_core_pointer">
<description>
Returns the core pointer device for the given display


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the core pointer device; this is owned by the
display and should not be freed.

Since: 2.2
</return>
</function>

<function name="gdk_x11_colormap_get_xdisplay">
<description>
Returns the display of a #GdkColormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_draw_rgb_32_image_dithalign">
<description>
Like gdk_draw_rgb_32_image(), but allows you to specify the dither
offsets. See gdk_draw_rgb_image_dithalign() for more details.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate on @drawable where image should go
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate on @drawable where image should go
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of area of image to draw
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of area of image to draw
</parameter_description>
</parameter>
<parameter name="dith">
<parameter_description> dithering mode
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> RGB image data
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> rowstride of RGB image data
</parameter_description>
</parameter>
<parameter name="xdith">
<parameter_description> X dither offset
</parameter_description>
</parameter>
<parameter name="ydith">
<parameter_description> Y dither offset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_screen_get_xscreen">
<description>

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> an Xlib &amp;lt;type&amp;gt;Screen*&amp;lt;/type&amp;gt;
</parameter_description>
</parameter>
</parameters>
<return>the screen of a #GdkScreen.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_get_from_image">
<description>
Same as gdk_pixbuf_get_from_drawable() but gets the pixbuf from
an image.


</description>
<parameters>
<parameter name="dest">
<parameter_description> Destination pixbuf, or %NULL if a new pixbuf should be created.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> Source #GdkImage.
</parameter_description>
</parameter>
<parameter name="cmap">
<parameter_description> A colormap, or %NULL to use the one for @src
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get.
</parameter_description>
</parameter>
</parameters>
<return> @dest, newly-created pixbuf if @dest was %NULL, %NULL on error
</return>
</function>

<function name="gdk_selection_send_notify_for_display">
<description>
Send a response to SelectionRequest event.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where @requestor is realized
</parameter_description>
</parameter>
<parameter name="requestor">
<parameter_description> window to which to deliver response.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> selection that was requested.
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> target that was selected.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> property in which the selection owner stored the data,
or %GDK_NONE to indicate that the request was rejected.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_screen">
<description>
Sets the screen for @event to @screen. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().

Since: 2.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_constrain_size">
<description>
Constrains a desired width and height according to a 
set of geometry hints (such as minimum and maximum size).

</description>
<parameters>
<parameter name="geometry">
<parameter_description> a #GdkGeometry structure
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a mask indicating what portions of @geometry are set
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> desired width of window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> desired height of the window
</parameter_description>
</parameter>
<parameter name="new_width">
<parameter_description> location to store resulting width
</parameter_description>
</parameter>
<parameter name="new_height">
<parameter_description> location to store resulting height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_image_new_bitmap">
<description>
Creates a new #GdkImage with a depth of 1 from the given data.
&amp;lt;warning&amp;gt;&amp;lt;para&amp;gt;THIS FUNCTION IS INCREDIBLY BROKEN. The passed-in data must 
be allocated by malloc() (NOT g_malloc()) and will be freed when the 
image is freed.&amp;lt;/para&amp;gt;&amp;lt;/warning&amp;gt;


</description>
<parameters>
<parameter name="visual">
<parameter_description> the #GdkVisual to use for the image.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the pixel data. 
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the image in pixels. 
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the image in pixels. 
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkImage.
</return>
</function>

<function name="gdk_screen_width">
<description>
Returns the width of the default screen in pixels.


</description>
<parameters>
</parameters>
<return> the width of the default screen in pixels.
</return>
</function>

<function name="gdk_keyboard_ungrab">
<description>
Ungrabs the keyboard, if it is grabbed by this application.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
timestamp is available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_region">
<description>
Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &quot;dirty region.&quot; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there&apos;s no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @invalidate_children parameter controls whether the region of
each child window that intersects @region will also be invalidated.
If %FALSE, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> %TRUE to also invalidate child windows 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colors_free">
<description>
Frees colors allocated with gdk_colors_alloc(). This
function is obsolete. See gdk_colormap_free_colors().

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="pixels">
<parameter_description> the pixel values of the colors to free.
</parameter_description>
</parameter>
<parameter name="npixels">
<parameter_description> the number of values in @pixels.
</parameter_description>
</parameter>
<parameter name="planes">
<parameter_description> the plane masks for all planes to free, OR&apos;d together.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_get_default_screen">
<description>
Gets the default GTK+ screen number.


</description>
<parameters>
</parameters>
<return> returns the screen number specified by
the --display command line option or the DISPLAY environment
variable when gdk_init() calls XOpenDisplay().
</return>
</function>

<function name="gdk_pixmap_lookup_for_display">
<description>
Looks up the #GdkPixmap that wraps the given native pixmap handle.

For example in the X backend, a native pixmap handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay associated with @anid
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkPixmap wrapper for the native pixmap,
or %NULL if there is none.

Since: 2.2
</return>
</function>

<function name="gdk_x11_cursor_get_xcursor">
<description>
Returns the X cursor belonging to a #GdkCursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Cursor&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_drag_status">
<description>
Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the selected action which will be taken when a drop happens, 
or 0 to indicate that a drop will not be accepted.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_back_pixmap">
<description>
Sets the background pixmap of @window. May also be used to set a background of
&quot;None&quot; on @window, by setting a background pixmap of %NULL.
A background pixmap will be tiled, positioning the first tile at the origin of
@window, or if @parent_relative is %TRUE, the tiling will be done based on the
origin of the parent window (useful to align tiles in a parent with tiles
in a child).

A background pixmap of %NULL means that the window will have no
background.  A window with no background will never have its
background filled by the windowing system, instead the window will
contain whatever pixels were already in the corresponding area of
the display.

The windowing system will normally fill a window with its background
when the window is obscured then exposed, and when you call
gdk_window_clear().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_relative">
<parameter_description> whether the tiling origin is at the origin of @window&apos;s parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_shape_combine_mask">
<description>
Applies a shape mask to @window. Pixels in @window corresponding to
set bits in the @mask will be visible; pixels in @window
corresponding to unset bits in the @mask will be transparent. This
gives a non-rectangular window.

If @mask is %NULL, the shape mask will be unset, and the @x/@y
parameters are not used.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> shape mask
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X position of shape mask with respect to @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y position of shape mask with respect to @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_format_is_writable">
<description>
Returns whether pixbufs can be saved in the given format.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> whether pixbufs can be saved in the given format.

Since: 2.2
</return>
</function>

<function name="gdk_x11_screen_supports_net_wm_hint">
<description>
This function is specific to the X11 backend of GDK, and indicates
whether the window manager supports a certain hint from the
Extended Window Manager Hints Specification. You can find this
specification on 
&amp;lt;ulink url=&quot;http://www.freedesktop.org&quot;&amp;gt;http://www.freedesktop.org&amp;lt;/ulink&amp;gt;.

When using this function, keep in mind that the window manager
can change over time; so you shouldn&apos;t use this function in
a way that impacts persistent application state. A common bug
is that your application can start up before the window manager
does when the user logs in, and before the window manager starts
gdk_x11_screen_supports_net_wm_hint() will return %FALSE for every property.
You can monitor the window_manager_changed signal on #GdkScreen to detect
a window manager change.


</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> a property atom.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window manager supports @property

Since: 2.2
</return>
</function>

<function name="gdk_screen_get_default">
<description>
Gets the default screen for the default display. (See
gdk_display_get_default ()).


</description>
<parameters>
</parameters>
<return> a #GdkScreen, or %NULL if there is no default display.

Since: 2.2
</return>
</function>

<function name="gdk_keymap_get_for_display">
<description>

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the #GdkKeymap attached to @display.
</parameter_description>
</parameter>
</parameters>
<return>the #GdkKeymap attached to @display.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_render_threshold_alpha">
<description>
Takes the opacity values in a rectangular portion of a pixbuf and thresholds
them to produce a bi-level alpha mask that can be used as a clipping mask for
a drawable.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="bitmap">
<parameter_description> Bitmap where the bilevel mask will be painted to.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> source Y coordinate.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to threshold, or -1 to use pixbuf width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to threshold, or -1 to use pixbuf height
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Opacity values below this will be painted as zero; all
other values will be painted as one.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_system">
<description>
Get the system&apos;sdefault visual for the default GDK screen.
This is the visual for the root window of the display.
The return value should not be freed.


</description>
<parameters>
</parameters>
<return> system visual
</return>
</function>

<function name="gdk_pango_context_set_colormap">
<description>
Sets the colormap to be used for drawing with @context.
If you obtained your context from gtk_widget_get_pango_context() or
gtk_widget_create_pango_context(), the colormap will already be set
to the colormap for the widget, so you shouldn&apos;t need this
function.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #PangoContext
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_unref">
<description>
Deprecated equivalent of calling g_object_unref() on @drawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_withdraw">
<description>
Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as gdk_window_hide() automatically
withdraws toplevel windows before hiding them.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_image_set_colormap">
<description>
Sets the colormap for the image to the given colormap.  Normally
there&apos;s no need to use this function, images are created with the
correct colormap if you get the image from a drawable. If you
create the image from scratch, use the colormap of the drawable you
intend to render the image to.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_paint_rect">
<description>
A convenience wrapper around gdk_window_begin_paint_region() which
creates a rectangular region for you. See
gdk_window_begin_paint_region() for details.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> rectangle you intend to draw to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_core_pointer">
<description>
Returns the core pointer device for the default display.


</description>
<parameters>
</parameters>
<return> the core pointer device; this is owned by the
display and should not be freed.
</return>
</function>

<function name="gdk_visual_get_best_with_depth">
<description>
Get the best visual with depth @depth for the default GDK screen.
Color visuals and visuals with mutable colormaps are preferred
over grayscale or fixed-colormap visuals. The return value should not
be freed. %NULL may be returned if no visual supports @depth.


</description>
<parameters>
<parameter name="depth">
<parameter_description> a bit depth
</parameter_description>
</parameter>
</parameters>
<return> best visual for the given depth
</return>
</function>

<function name="gdk_x11_display_grab">
<description>
Call XGrabServer() on @display. 
To ungrab the display again, use gdk_x11_display_ungrab(). 

gdk_x11_display_grab()/gdk_x11_display_ungrab() calls can be nested.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_get_width">
<description>
Queries the width of the bounding box of a pixbuf animation.


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> Width of the bounding box of the animation.
</return>
</function>

<function name="gdk_screen_make_display_name">
<description>
Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, free with g_free()

Since: 2.2
</return>
</function>

<function name="gdk_utf8_to_compound_text">
<description>
Convert from UTF-8 to compound text. 


</description>
<parameters>
<parameter name="str">
<parameter_description>      a UTF-8 string
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store resulting encoding
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   location to store format of the result
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description>    location to store the data of the result
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   location to store the length of the data
stored in @ctext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion succeeded, otherwise
false.
</return>
</function>

<function name="gdk_font_get_display">
<description>
Returns the #GdkDisplay for @font.


</description>
<parameters>
<parameter name="font">
<parameter_description> the #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdkDisplay.

Since: 2.2
</return>
</function>

<function name="gdk_x11_gc_get_xgc">
<description>
Returns the X GC of a #GdkGC.


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;GC&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="_gdk_get_command_line_args">
<description>
Retrieve the command line arguments passed to gdk_init().
The returned argv pointer points to static storage ; no
copy is made.

</description>
<parameters>
<parameter name="argv">
<parameter_description> location to store argv pointer
</parameter_description>
</parameter>
<parameter name="argc">
<parameter_description> location 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_free">
<description>
Frees a #GdkEvent, freeing or decrementing any resources associated with it.
Note that this function should only be called with events returned from
functions such as gdk_event_peek(), gdk_event_get(),
gdk_event_get_graphics_expose() and gdk_event_copy().

</description>
<parameters>
<parameter name="event">
<parameter_description>  a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_cursor">
<description>
Sets the mouse pointer for a #GdkWindow. Use gdk_cursor_new() or
gdk_cursor_new_from_pixmap() to create the cursor.
To make the cursor invisible, use gdk_cursor_new_from_pixmap() to create
a cursor with no pixels in it. Passing %NULL for the @cursor argument
to gdk_window_set_cursor() means that @window will use the cursor of
its parent window. Most windows should use this default.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> a cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_context_unref">
<description>
Deprecated function; use g_object_unref() instead.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_loader_get_pixbuf">
<description>
Queries the #GdkPixbuf that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the
&quot;area_prepared&quot; signal has been emitted by the loader; this means
that enough data has been read to know the size of the image that
will be allocated.  If the loader has not received enough data via
gdk_pixbuf_loader_write(), then this function returns %NULL.  The
returned pixbuf will be the same in all future calls to the loader,
so simply calling g_object_ref() should be sufficient to continue
using it.  Additionally, if the loader is an animation, it will
return the &quot;static image&quot; of the animation
(see gdk_pixbuf_animation_get_static_image()).


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPixbuf that the loader is creating, or %NULL if not
enough data has been read to determine how to create the image buffer.
</return>
</function>

<function name="gdk_pixbuf_new_from_data">
<description>
Creates a new #GdkPixbuf out of in-memory image data.  Currently only RGB
images with 8 bits per sample are supported.


</description>
<parameters>
<parameter name="data">
<parameter_description> Image data in 8-bit/sample packed format.
</parameter_description>
</parameter>
<parameter name="colorspace">
<parameter_description> Colorspace for the image data.
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the data has an opacity channel.
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per sample.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the image in pixels.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the image in pixels.
</parameter_description>
</parameter>
<parameter name="rowstride">
<parameter_description> Distance in bytes between rows.
</parameter_description>
</parameter>
<parameter name="destroy_fn">
<parameter_description> Function used to free the data when the pixbuf&apos;s reference count
drops to zero, or %NULL if the data should not be freed.
</parameter_description>
</parameter>
<parameter name="destroy_fn_data">
<parameter_description> Closure data to pass to the destroy notification function.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference count of
1.
</return>
</function>

<function name="gdk_pixbuf_animation_iter_get_pixbuf">
<description>
Gets the current pixbuf which should be displayed; the pixbuf will
be the same size as the animation itself
(gdk_pixbuf_animation_get_width(),
gdk_pixbuf_animation_get_height()). This pixbuf should be displayed
for gdk_pixbuf_animation_get_delay_time() milliseconds.  The caller
of this function does not own a reference to the returned pixbuf;
the returned pixbuf will become invalid when the iterator advances
to the next frame, which may happen anytime you call
gdk_pixbuf_animation_iter_advance(). Copy the pixbuf to keep it
(don&apos;t just add a reference), as it may get recycled as you advance
the iterator.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an animation iterator
</parameter_description>
</parameter>
</parameters>
<return> the pixbuf to be displayed
</return>
</function>

<function name="gdk_display_pointer_is_grabbed">
<description>
Test if the pointer is grabbed.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an active X pointer grab is in effect

Since: 2.2
</return>
</function>

<function name="gdk_display_get_default_screen">
<description>
Get the default #GdkScreen for @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the default #GdkScreen object for @display

Since: 2.2
</return>
</function>

<function name="gdk_screen_get_root_window">
<description>
Gets the root window of @screen. 


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the root window

Since: 2.2
</return>
</function>

<function name="gdk_event_new">
<description>
Creates a new event of the given type. All fields are set to 0.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GdkEventType 
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GdkEvent. The returned #GdkEvent 
should be freed with gdk_event_free().

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_loader_new_with_type">
<description>
Creates a new pixbuf loader object that always attempts to parse
image data as if it were an image of type @image_type, instead of
identifying the type automatically. Useful if you want an error if
the image isn&apos;t the expected type, for loading image formats
that can&apos;t be reliably identified by looking at the data, or if
the user manually forces a specific type.


</description>
<parameters>
<parameter name="image_type">
<parameter_description> name of the image format to be loaded with the image
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an allocated #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_events_pending">
<description>
Checks if any events are ready to be processed for any display.


</description>
<parameters>
</parameters>
<return>  %TRUE if any events are pending.
</return>
</function>

<function name="gdk_pixbuf_savev">
<description>
Saves pixbuf to a file in @type, which is currently &quot;jpeg&quot; or &quot;png&quot;.
If @error is set, %FALSE will be returned. See gdk_pixbuf_save () for more
details.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="option_keys">
<parameter_description> name of options to set, %NULL-terminated
</parameter_description>
</parameter>
<parameter name="option_values">
<parameter_description> values for named options
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_screen_height">
<description>
Returns the height of the default screen in pixels.


</description>
<parameters>
</parameters>
<return> the height of the default screen in pixels.
</return>
</function>

<function name="gdk_window_new">
<description>
Creates a new #GdkWindow using the attributes from
@attributes. See #GdkWindowAttr and #GdkWindowAttributesType for
more details.  Note: to use this on displays other than the default
display, @parent must be specified.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdkWindow, or %NULL to create the window as a child of
the default root window for the default display.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> attributes of the new window
</parameter_description>
</parameter>
<parameter name="attributes_mask">
<parameter_description> mask indicating which fields in @attributes are valid
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkWindow
</return>
</function>

<function name="gdk_pixbuf_get_height">
<description>
Queries the height of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Height in pixels.
</return>
</function>

<function name="gdk_visual_get_best_with_type">
<description>
Get the best visual of the given @visual_type for the default GDK screen.
Visuals with higher color depths are considered better. The return value
should not be freed. %NULL may be returned if no visual has type
@visual_type.


</description>
<parameters>
<parameter name="visual_type">
<parameter_description> a visual type
</parameter_description>
</parameter>
</parameters>
<return> best visual of the given type
</return>
</function>

<function name="gdk_gc_unref">
<description>
Deprecated function; use g_object_unref() instead.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_update_area">
<description>
Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
gdk_window_get_update_area() returns %NULL. You are responsible for
calling gdk_region_destroy() on the returned region if it&apos;s non-%NULL.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the update area for @window
</return>
</function>

<function name="_gdk_window_clear_update_area">
<description>
Internal function to clear the update area for a window. This
is called when the window is hidden or destroyed.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_ref">
<description>
Deprecated function; use g_object_ref() instead.


</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return> the colormap
</return>
</function>

<function name="gdk_window_begin_move_drag">
<description>
Begins a window move operation (for a toplevel window).  You might
use this function to implement a &quot;window move grip,&quot; for
example. The function works best with window managers that support
the Extended Window Manager Hints spec (see
http://www.freedesktop.org), but has a fallback implementation for
other window managers.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_get_entries_for_keyval">
<description>
Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap, or %NULL to use the default keymap
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> a keyval, such as %GDK_a, %GDK_Up, %GDK_Return, etc.
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return location for an array of #GdkKeymapKey
</parameter_description>
</parameter>
<parameter name="n_keys">
<parameter_description> return location for number of elements in returned array
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keys were found and returned
</return>
</function>

<function name="gdk_font_unref">
<description>
Decreases the reference count of a font by one.
If the result is zero, destroys the font.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_colormap_foreign_new">
<description>
If xcolormap refers to a colormap previously known to GTK+,
returns a new reference to the existing #GdkColormap object,
otherwise creates a new GdkColormap object and returns that


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
<parameter name="xcolormap">
<parameter_description> The XID of a colormap with visual @visual
</parameter_description>
</parameter>
</parameters>
<return> the #GdkColormap object for @xcolormap.
Free with g_object_unref(). Note that for colormap created
with gdk_x11_colormap_foreign_new(), unref&apos;ing the last
reference to the object will only free the #GdkColoramp
object and not call XFreeColormap()

Since: 2.2
</return>
</function>

<function name="gdk_window_foreign_new_for_display">
<description>
Wraps a native window in a #GdkWindow.
This may fail if the window has been destroyed.

For example in the X backend, a native window handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the window handle comes from.
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkWindow wrapper for the 
native window or %NULL if the window has been destroyed.

Since: 2.2
</return>
</function>

<function name="gdk_window_stick">
<description>
&quot;Pins&quot; a window such that it&apos;s on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)

On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don&apos;t support this operation,
there&apos;s nothing you can do to force it to happen.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_resize">
<description>
Resizes @window; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.

Windows may not be resized below 1x1.

If you&apos;re also planning to move the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width of the window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixdata_from_pixbuf">
<description>
Converts a #GdkPixbuf to a #GdkPixdata. If @use_rle is %TRUE, the
pixel data is run-length encoded into newly-allocated memory and a 
pointer to that memory is returned. 


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to fill.
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the data to fill @pixdata with.
</parameter_description>
</parameter>
<parameter name="use_rle">
<parameter_description> whether to use run-length encoding for the pixel data.
</parameter_description>
</parameter>
</parameters>
<return> If @ure_rle is %TRUE, a pointer to the newly-allocated memory 
for the run-length encoded pixel data, otherwise %NULL.
</return>
</function>

<function name="gdk_x11_drawable_get_xdisplay">
<description>
Returns the display of a #GdkDrawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_cursor_new">
<description>
Creates a new cursor from the set of builtin cursors for the default display.
See gdk_cursor_new_for_display().

To make the cursor invisible, use gdk_cursor_new_from_pixmap() to create
a cursor with no pixels in it.


</description>
<parameters>
<parameter name="cursor_type">
<parameter_description> cursor to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor
</return>
</function>

<function name="gdk_pixbuf_animation_get_iter">
<description>
Get an iterator for displaying an animation. The iterator provides
the frames that should be displayed at a given time.
It should be freed after use with g_object_unref().

@start_time would normally come from g_get_current_time(), and
marks the beginning of animation playback. After creating an
iterator, you should immediately display the pixbuf returned by
gdk_pixbuf_animation_iter_get_pixbuf(). Then, you should install a
timeout (with g_timeout_add()) or by some other mechanism ensure
that you&apos;ll update the image after
gdk_pixbuf_animation_iter_get_delay_time() milliseconds. Each time
the image is updated, you should reinstall the timeout with the new,
possibly-changed delay time.

As a shortcut, if @start_time is %NULL, the result of
g_get_current_time() will be used automatically.

To update the image (i.e. possibly change the result of
gdk_pixbuf_animation_iter_get_pixbuf() to a new frame of the animation),
call gdk_pixbuf_animation_iter_advance().

If you&apos;re using #GdkPixbufLoader, in addition to updating the image
after the delay time, you should also update it whenever you
receive the area_updated signal and
gdk_pixbuf_animation_iter_on_currently_loading_frame() returns
%TRUE. In this case, the frame currently being fed into the loader
has received new data, so needs to be refreshed. The delay time for
a frame may also be modified after an area_updated signal, for
example if the delay time for a frame is encoded in the data after
the frame itself. So your timeout should be reinstalled after any
area_updated signal.

A delay time of -1 is possible, indicating &quot;infinite.&quot;


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
<parameter name="start_time">
<parameter_description> time when the animation starts playing
</parameter_description>
</parameter>
</parameters>
<return> an iterator to move over the animation
</return>
</function>

<function name="gdk_utf8_to_string_target">
<description>
Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
</parameters>
<return> the newly-allocated string, or %NULL if the
conversion failed. (It should not fail for
any properly formed UTF-8 string unless system
limits like memory or file descriptors are exceeded.)
</return>
</function>

<function name="gdk_window_get_state">
<description>
Gets the bitwise OR of the currently active window state flags,
from the #GdkWindowState enumeration.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> window state bitfield
</return>
</function>

<function name="_gdk_event_unqueue">
<description>
Removes and returns the first event from the event
queue that is not still being filled in.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the event, or %NULL. Ownership is transferred
to the caller.
</return>
</function>

<function name="gdk_pixbuf_get_formats">
<description>
Obtains the available information about the image formats supported
by GdkPixbuf.


</description>
<parameters>
</parameters>
<return> A list of #GdkPixbufFormat&amp;lt;!-- --&amp;gt;s describing the supported 
image formats.  The list should be freed when it is no longer needed, 
but the structures themselves are owned by #GdkPixbuf and should not be 
freed.  

Since: 2.2
</return>
</function>

<function name="gdk_x11_get_xatom_name_for_display">
<description>
Returns the name of an X atom for its display. This
function is meant mainly for debugging, so for convenience, unlike
XAtomName() and gdk_atom_name(), the result doesn&apos;t need to
be freed. 


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where @xatom is defined
</parameter_description>
</parameter>
<parameter name="xatom">
<parameter_description> an X atom 
</parameter_description>
</parameter>
</parameters>
<return> name of the X atom; this string is owned by GDK,
so it shouldn&apos;t be modifed or freed. 

Since: 2.2
</return>
</function>

<function name="gdk_colormap_query_color">
<description>
Locates the RGB color in @colormap corresponding to the given
hardware pixel @pixel. @pixel must be a valid pixel in the
colormap; it&apos;s a programmer error to call this function with a
pixel which is not in the colormap. Hardware pixels are normally
obtained from gdk_colormap_alloc_colors(), or from a #GdkImage. (A
#GdkImage contains image data in hardware format, a #GdkPixbuf
contains image data in a canonical 24-bit RGB format.)

This function is rarely useful; it&apos;s used for example to
implement the eyedropper feature in #GtkColorSelection.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> pixel value in hardware display format
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> #GdkColor with red, green, blue fields initialized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_char_width">
<description>
Determines the width of a given character.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the width of the character in pixels.

Deprecated: Use gdk_text_extents() instead.
</return>
</function>

<function name="gdk_colormap_free_colors">
<description>
Frees previously allocated colors.

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> the colors to free.
</parameter_description>
</parameter>
<parameter name="ncolors">
<parameter_description> the number of colors in @colors.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_union">
<description>
Sets the area of @source1 to the union of the areas of @source1 and
@source2. The resulting area is the set of pixels contained in
either @source1 or @source2.

</description>
<parameters>
<parameter name="source1">
<parameter_description>  a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> a #GdkRegion 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_history">
<description>
Obtains the motion history for a device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the window with respect to which which the event coordinates will be reported
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> starting timestamp for range of events to return
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> ending timestamp for the range of events to return
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> location to store a newly-allocated array of #GdkTimeCoord, or %NULL
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> location to store the length of @events, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the windowing system supports motion history and
at least one event was found.
</return>
</function>

<function name="gdk_draw_points">
<description>
Draws a number of points, using the foreground color and other 
attributes of the #GdkGC.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint structures.
</parameter_description>
</parameter>
<parameter name="npoints">
<parameter_description> the number of points to be drawn.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_pointer_ungrab">
<description>
Release any pointer grab.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g. GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_iter_get_delay_time">
<description>
Gets the number of milliseconds the current pixbuf should be displayed,
or -1 if the current pixbuf should be displayed forever. g_timeout_add()
conveniently takes a timeout in milliseconds, so you can use a timeout
to schedule the next update.


</description>
<parameters>
<parameter name="iter">
<parameter_description> an animation iterator
</parameter_description>
</parameter>
</parameters>
<return> delay time in milliseconds (thousandths of a second)
</return>
</function>

<function name="gdk_x11_drawable_get_xid">
<description>
Returns the X resource (window or pixmap) belonging to a #GdkDrawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable.
</parameter_description>
</parameter>
</parameters>
<return> the ID of @drawable&apos;s X resource.
</return>
</function>

<function name="gdk_window_set_background">
<description>
Sets the background color of @window. (However, when using GTK+,
set the background of a widget with gtk_widget_modify_bg() - if
you&apos;re an application - or gtk_style_set_background() - if you&apos;re
implementing a custom widget.)

The @color must be allocated; gdk_rgb_find_color() is the best way
to allocate a color.

See also gdk_window_set_back_pixmap().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an allocated #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_setting">
<description>
Retrieves a desktop-wide setting such as double-click time
for the #GdkScreen @screen. 

FIXME needs a list of valid settings here, or a link to 
more information.


</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen where the setting is located
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the setting
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise.

Since: 2.2
</return>
</function>

<function name="gdk_display_list_devices">
<description>
Returns the list of available input devices attached to @display.
The list is statically allocated and should not be freed.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a list of #GdkDevice

Since: 2.2
</return>
</function>

<function name="gdk_visual_get_best_type">
<description>
Return the best available visual type for the default GDK screen.


</description>
<parameters>
</parameters>
<return> best visual type
</return>
</function>

<function name="gdk_font_equal">
<description>
Compares two fonts for equality. Single fonts compare equal
if they have the same X font ID. This operation does
not currently work correctly for fontsets.


</description>
<parameters>
<parameter name="fonta">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="fontb">
<parameter_description> another #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the fonts are equal.
</return>
</function>

<function name="gdk_event_get_root_coords">
<description>
Extract the root window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> location to put root window x coordinate
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> location to put root window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered root window coordinates
</return>
</function>

<function name="gdk_window_get_root_origin">
<description>
Obtains the top-left corner of the window manager frame in root
window coordinates.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X position of window frame
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y position of window frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_rgb_fg_color">
<description>
Set the foreground color of a GC using an unallocated color. The
pixel value for the color will be determined using GdkRGB. If the
colormap for the GC has not previously been initialized for GdkRGB,
then for pseudo-color colormaps (colormaps with a small modifiable
number of colors), a colorcube will be allocated in the colormap.

Calling this function for a GC without a colormap is an error.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an unallocated #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_is_visible">
<description>
Checks whether the window has been mapped (with gdk_window_show() or
gdk_window_show_unraised()).


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is mapped
</return>
</function>

<function name="gdk_draw_polygon">
<description>
Draws an outlined or filled polygon.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="filled">
<parameter_description> %TRUE if the polygon should be filled. The polygon is closed
automatically, connecting the last point to the first point if 
necessary.
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint structures specifying the points making 
up the polygon.
</parameter_description>
</parameter>
<parameter name="npoints">
<parameter_description> the number of points.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_peek_children">
<description>
Like gdk_window_get_children(), but does not copy the list of
children, so the list does not need to be freed.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a reference to the list of child windows in @window
</return>
</function>

<function name="gdk_pixbuf_get_option">
<description>
Looks up @key in the list of options that may have been attached to the
@pixbuf when it was loaded. 


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
</parameters>
<return> the value associated with @key. This is a nul-terminated 
string that should not be freed or %NULL if @key was not found.
</return>
</function>

<function name="gdk_set_double_click_time">
<description>
Set the double click time for the default display. See
gdk_display_set_double_click_time(). Applications should NOT
set this, it is a global user-configured setting.

</description>
<parameters>
<parameter name="msec">
<parameter_description> double click time in milliseconds (thousandths of a second)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_best_depth">
<description>
Get the best available depth for the default GDK screen.  &quot;Best&quot;
means &quot;largest,&quot; i.e. 32 preferred over 24 preferred over 8 bits
per pixel.


</description>
<parameters>
</parameters>
<return> best available depth
</return>
</function>

<function name="gdk_window_set_icon">
<description>
Sets the icon of @window as a pixmap or window. If using GTK+, investigate
gtk_window_set_default_icon_list() first, and then gtk_window_set_icon_list()
and gtk_window_set_icon(). If those don&apos;t meet your needs, look at
gdk_window_set_icon_list(). Only if all those are too high-level do you
want to fall back to gdk_window_set_icon().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="icon_window">
<parameter_description> a #GdkWindow to use for the icon, or %NULL to unset
</parameter_description>
</parameter>
<parameter name="pixmap">
<parameter_description> a #GdkPixmap to use as the icon, or %NULL to unset
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a 1-bit pixmap (#GdkBitmap) to use as mask for @pixmap, or %NULL to have none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_get_data">
<description>
Equivalent to g_object_get_data(); the #GObject variant should be
used instead.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name the data was stored under
</parameter_description>
</parameter>
</parameters>
<return> the data stored at @key
</return>
</function>

<function name="gdk_beep">
<description>
Emits a short beep.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_font_from_description_for_display">
<description>
Loads a #GdkFont based on a Pango font description for use on @display. 
This font will only be an approximation of the Pango font, and
internationalization will not be handled correctly. This function
should only be used for legacy code that cannot be easily converted
to use Pango. Using Pango directly will produce better results.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="font_desc">
<parameter_description> a #PangoFontDescription.
</parameter_description>
</parameter>
</parameters>
<return> the newly loaded font, or %NULL if the font
cannot be loaded.

Since: 2.2
</return>
</function>

<function name="gdk_fontset_load">
<description>
Loads a fontset.

The fontset may be newly loaded or looked up in a cache. 
You should make no assumptions about the initial reference count.


</description>
<parameters>
<parameter name="fontset_name">
<parameter_description> a comma-separated list of XLFDs describing
the component fonts of the fontset to load.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkFont, or %NULL if the fontset could not be loaded.
</return>
</function>

<function name="gdk_window_unfullscreen">
<description>
Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.

On X11, asks the window manager to move @window out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don&apos;t have a concept of &quot;fullscreen&quot;; so you can&apos;t rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen. 

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_new_from_xpm_data">
<description>
Creates a new pixbuf by parsing XPM data in memory.  This data is commonly
the result of including an XPM file into a program&apos;s C source.


</description>
<parameters>
<parameter name="data">
<parameter_description> Pointer to inline XPM data.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1.
</return>
</function>

<function name="gdk_window_freeze_updates">
<description>
Temporarily freezes a window such that it won&apos;t receive expose
events.  The window will begin receiving expose events again when
gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
has been called more than once, gdk_window_thaw_updates() must be called
an equal number of times to begin processing exposes.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_font_load">
<description>
Loads a font.

The font may be newly loaded or looked up the font in a cache. 
You should make no assumptions about the initial reference count.


</description>
<parameters>
<parameter name="font_name">
<parameter_description> a XLFD describing the font to load.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkFont, or %NULL if the font could not be loaded.
</return>
</function>

<function name="gdk_window_lookup">
<description>
Looks up the #GdkWindow that wraps the given native window handle. 

For example in the X backend, a native window handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native window, 
or %NULL if there is none.
</return>
</function>

<function name="gdk_color_alloc">
<description>
Allocates a single color from a colormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> The color to allocate. On return, the 
&amp;lt;structfield&amp;gt;pixel&amp;lt;/structfield&amp;gt; field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.

Deprecated: Use gdk_colormap_alloc_color() instead.
</return>
</function>

<function name="gdk_utf8_to_compound_text_for_display">
<description>
Converts from UTF-8 to compound text. 


</description>
<parameters>
<parameter name="display">
<parameter_description>  a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>      a UTF-8 string
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store resulting encoding
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   location to store format of the result
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description>    location to store the data of the result
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   location to store the length of the data
stored in @ctext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion succeeded, otherwise
%FALSE.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_get_colorspace">
<description>
Queries the color space of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Color space.
</return>
</function>

<function name="gdk_display_get_name">
<description>
Gets the name of the display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a string representing the display name. This string is owned
by GDK and should not be modified or freed.

Since: 2.2
</return>
</function>

<function name="_gdk_event_queue_find_first">
<description>
Find the first event on the queue that is not still
being filled in.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> Pointer to the list node for that event, or NULL.
</return>
</function>

<function name="gdk_device_get_axis">
<description>
Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> pointer to an array of axes
</parameter_description>
</parameter>
<parameter name="use">
<parameter_description> the use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the found value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given axis use was found, otherwise %FALSE
</return>
</function>

<function name="gdk_screen_get_rgb_colormap">
<description>
Gets the preferred colormap for rendering image data on @screen.
Not a very useful function; historically, GDK could only render RGB
image data to one colormap and visual, but in the current version
it can render to any colormap and visual. So there&apos;s no need to
call this function.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> the preferred colormap

Since: 2.2
</return>
</function>

<function name="gdk_color_white">
<description>
Returns the white color for a given colormap. The resulting
value has already allocated been allocated. 


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the location to store the color.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.
</return>
</function>

<function name="gdk_display_open_default_libgtk_only">
<description>
Opens the default display specified by command line arguments or
environment variables, sets it as the default display, and returns
it.  gdk_parse_args must have been called first. If the default
display has previously been set, simply returns that. An internal
function that should not be used by applications.


</description>
<parameters>
</parameters>
<return> the default display, if it could be opened,
otherwise %NULL.
</return>
</function>

<function name="gdk_set_show_events">
<description>
Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the &amp;lt;option&amp;gt;--enable-debug&amp;lt;/option&amp;gt; option)
to use this option.

</description>
<parameters>
<parameter name="show_events">
<parameter_description>  %TRUE to output event debugging information.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_get_server_time">
<description>
Routine to get the current X server time stamp. 


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow, used for communication with the server.
The window must have GDK_PROPERTY_CHANGE_MASK in its
events mask or a hang will result.
</parameter_description>
</parameter>
</parameters>
<return> the time stamp.
</return>
</function>

<function name="gdk_visual_get_best">
<description>
Get the visual with the most available colors for the default
GDK screen. The return value should not be freed.


</description>
<parameters>
</parameters>
<return> best visual
</return>
</function>

<function name="gdk_window_set_skip_taskbar_hint">
<description>
Toggles whether a window should appear in a task list or window
list. If a window&apos;s semantic type as specified with
gdk_window_set_type_hint() already fully describes the window, this
function should NOT be called in addition, instead you should allow
the window to be treated according to standard policy for its
semantic type.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="skips_taskbar">
<parameter_description> %TRUE to skip the taskbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_ungrab_server">
<description>
Ungrab the default display after it has been grabbed with 
gdk_x11_grab_server(). 

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_geometry_hints">
<description>
Sets the geometry hints for @window. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of 
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via gdk_window_resize() or
gdk_window_move_resize().

Note that on X11, this effect has no effect on windows
of type GDK_WINDOW_TEMP or windows where override_redirect
has been turned on via gdk_window_set_override_redirect()
since these windows are not resizable by the user.

Since you can&apos;t count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_window_constrain_size() yourself to determine
appropriate sizes.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> geometry hints
</parameter_description>
</parameter>
<parameter name="geom_mask">
<parameter_description> bitmask indicating fields of @geometry to pay attention to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_pointer">
<description>
Gets the current location of the pointer and the current modifier
mask for a given display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> location to store the screen that the
cursor is on, or %NULL.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of pointer, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of pointer, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store current modifier mask, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cursor_ref">
<description>
Adds a reference to @cursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> Same @cursor that was passed in
</return>
</function>

<function name="gdk_region_xor">
<description>
Sets the area of @source1 to the exclusive-OR of the areas of @source1
and @source2. The resulting area is the set of pixels contained in one
or the other of the two sources but not in both.

</description>
<parameters>
<parameter name="source1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> another #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_abort">
<description>
Aborts a drag without dropping. 

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_send_client_message">
<description>
Sends an X ClientMessage event to a given window (which must be
on the default #GdkDisplay.)
This could be used for communicating between different applications,
though the amount of data is limited to 20 bytes.


</description>
<parameters>
<parameter name="event">
<parameter_description> the #GdkEvent to send, which should be a #GdkEventClient.
</parameter_description>
</parameter>
<parameter name="winid">
<parameter_description>  the window to send the X ClientMessage event to.
</parameter_description>
</parameter>
</parameters>
<return> non-zero on success.
</return>
</function>

<function name="gdk_draw_layout_with_colors">
<description>
Render a #PangoLayout onto a #GdkDrawable, overriding the
layout&apos;s normal colors with @foreground and/or @background.
@foreground and @background need not be allocated.

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw string
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics context to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the X position of the left of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the Y position of the top of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="layout">
<parameter_description>    a #PangoLayout
</parameter_description>
</parameter>
<parameter name="foreground">
<parameter_description> foreground override color, or %NULL for none
</parameter_description>
</parameter>
<parameter name="background">
<parameter_description> background override color, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_get_from_drawable">
<description>
Transfers image data from a #GdkDrawable and converts it to an RGB(A)
representation inside a #GdkPixbuf. In other words, copies
image data from a server-side drawable to a client-side RGB(A) buffer.
This allows you to efficiently read individual pixels on the client side.

If the drawable @src has no colormap (gdk_drawable_get_colormap()
returns %NULL), then a suitable colormap must be specified.
Typically a #GdkWindow or a pixmap created by passing a #GdkWindow
to gdk_pixmap_new() will already have a colormap associated with
it.  If the drawable has a colormap, the @cmap argument will be
ignored.  If the drawable is a bitmap (1 bit per pixel pixmap),
then a colormap is not required; pixels with a value of 1 are
assumed to be white, and pixels with a value of 0 are assumed to be
black. For taking screenshots, gdk_colormap_get_system() returns
the correct colormap to use.

If the specified destination pixbuf @dest is %NULL, then this
function will create an RGB pixbuf with 8 bits per channel and no
alpha, with the same size specified by the @width and @height
arguments.  In this case, the @dest_x and @dest_y arguments must be
specified as 0.  If the specified destination pixbuf is not %NULL
and it contains alpha information, then the filled pixels will be
set to full opacity (alpha = 255).

If the specified drawable is a pixmap, then the requested source
rectangle must be completely contained within the pixmap, otherwise
the function will return %NULL. For pixmaps only (not for windows)
passing -1 for width or height is allowed to mean the full width
or height of the pixmap.

If the specified drawable is a window, and the window is off the
screen, then there is no image data in the obscured/offscreen
regions to be placed in the pixbuf. The contents of portions of the
pixbuf corresponding to the offscreen region are undefined.

If the window you&apos;re obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.

If the target drawable is not mapped (typically because it&apos;s
iconified/minimized or not on the current workspace), then %NULL
will be returned.

If memory can&apos;t be allocated for the return value, %NULL will be returned
instead.

(In short, there are several ways this function can fail, and if it fails
it returns %NULL; so check the return value.)

This function calls gdk_drawable_get_image() internally and
converts the resulting image to a #GdkPixbuf, so the
documentation for gdk_drawable_get_image() may also be relevant.


</description>
<parameters>
<parameter name="dest">
<parameter_description> Destination pixbuf, or %NULL if a new pixbuf should be created.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> Source drawable.
</parameter_description>
</parameter>
<parameter name="cmap">
<parameter_description> A colormap if @src doesn&apos;t have one set.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate in pixbuf, or 0 if @dest is NULL.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get.
</parameter_description>
</parameter>
</parameters>
<return> The same pixbuf as @dest if it was non-%NULL, or a newly-created
pixbuf with a reference count of 1 if no destination pixbuf was specified, or %NULL on error
</return>
</function>

<function name="gdk_colors_alloc">
<description>
Allocates colors from a colormap. This function
is obsolete. See gdk_colormap_alloc_colors().
For full documentation of the fields, see 
the Xlib documentation for &amp;lt;function&amp;gt;XAllocColorCells()&amp;lt;/function&amp;gt;.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="contiguous">
<parameter_description> if %TRUE, the colors should be allocated
in contiguous color cells.
</parameter_description>
</parameter>
<parameter name="planes">
<parameter_description> an array in which to store the plane masks.
</parameter_description>
</parameter>
<parameter name="nplanes">
<parameter_description> the number of planes to allocate. (Or zero,
to indicate that the color allocation should not be planar.)
</parameter_description>
</parameter>
<parameter name="pixels">
<parameter_description> an array into which to store allocated pixel values.
</parameter_description>
</parameter>
<parameter name="npixels">
<parameter_description> the number of pixels in each plane to allocate.
</parameter_description>
</parameter>
</parameters>
<return> 
</return>
</function>

<function name="_gdk_image_get_scratch">
<description>
Allocates an image of size width/height, up to a maximum
of GDK_SCRATCH_IMAGE_WIDTHxGDK_SCRATCH_IMAGE_HEIGHT that is
suitable to use on @screen.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> desired width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> desired height
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> depth of image 
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X location within returned image of scratch image
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y location within returned image of scratch image
</parameter_description>
</parameter>
</parameters>
<return> a scratch image. This must be used by a
call to gdk_image_put() before any other calls to
_gdk_image_get_scratch()
</return>
</function>

<function name="gdk_window_set_hints">
<description>
This function is broken and useless and you should ignore it.
If using GTK+, use functions such as gtk_window_resize(), gtk_window_set_size_request(),
gtk_window_move(), gtk_window_parse_geometry(), and gtk_window_set_geometry_hints(),
depending on what you&apos;re trying to do.

If using GDK directly, use gdk_window_set_geometry_hints().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> ignored field, does not matter
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> ignored field, does not matter
</parameter_description>
</parameter>
<parameter name="min_width">
<parameter_description> minimum width hint
</parameter_description>
</parameter>
<parameter name="min_height">
<parameter_description> minimum height hint
</parameter_description>
</parameter>
<parameter name="max_width">
<parameter_description> max width hint
</parameter_description>
</parameter>
<parameter name="max_height">
<parameter_description> max height hint
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> logical OR of GDK_HINT_POS, GDK_HINT_MIN_SIZE, and/or GDK_HINT_MAX_SIZE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_hide">
<description>
For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won&apos;t be displayed. Normally done automatically as
part of gtk_widget_hide().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_copy">
<description>
Creates a new #GdkPixbuf with a copy of the information in the specified
@pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
not enough memory could be allocated.
</return>
</function>

<function name="gdk_text_property_to_text_list_for_display">
<description>
Convert a text string from the encoding as it is stored 
in a property into an array of strings in the encoding of
the current locale. (The elements of the array represent the
nul-separated elements of the original text string.)


</description>
<parameters>
<parameter name="display">
<parameter_description> The #GdkDisplay where the encoding is defined.
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding. The most 
common values for this are STRING, or COMPOUND_TEXT. 
This is value used as the type for the property.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the property.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> The text data.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> The number of items to transform.
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> location to store a terminated array of strings in 
the encoding of the current locale. This array should be 
freed using gdk_free_text_list().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings stored in list, or 0, 
if the conversion failed. 

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_composite_color">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then composites the rectangle (@dest_x ,@dest_y, @dest_width,
@dest_height) of the resulting image with a checkboard of the
colors @color1 and @color2 and renders it onto the destination
image.

See gdk_pixbuf_composite_color_simple() for a simpler variant of this
function suitable for many tasks.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
<parameter name="check_x">
<parameter_description> the X offset for the checkboard (origin of checkboard is at -@check_x, -@check_y)
</parameter_description>
</parameter>
<parameter name="check_y">
<parameter_description> the Y offset for the checkboard 
</parameter_description>
</parameter>
<parameter name="check_size">
<parameter_description> the size of checks in the checkboard (must be a power of two)
</parameter_description>
</parameter>
<parameter name="color1">
<parameter_description> the color of check at upper left
</parameter_description>
</parameter>
<parameter name="color2">
<parameter_description> the color of the other check
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gdk_gc_x11_get_fg_xft_color">
<description>
Gets the foreground color of the GC as a XftColor.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="xftcolor">
<parameter_description> location to store the color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_ref">
<description>
Adds a reference to a pixbuf. 


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> The same as the @pixbuf argument.

Deprecated: Use g_object_ref().
</return>
</function>

<function name="gdk_screen_get_toplevel_windows">
<description>
Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.


</description>
<parameters>
<parameter name="screen">
<parameter_description> The #GdkScreen where the toplevels are located.
</parameter_description>
</parameter>
</parameters>
<return> list of toplevel windows, free with g_list_free()

Since: 2.2
</return>
</function>

<function name="gdk_display_get_n_screens">
<description>
Gets the number of screen managed by the @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> number of screens.

Since: 2.2
</return>
</function>

<function name="gdk_event_get_graphics_expose">
<description>
Waits for a GraphicsExpose or NoExpose event from the X server.
This is used in the #GtkText and #GtkCList widgets in GTK+ to make sure any
GraphicsExpose events are handled before the widget is scrolled.


</description>
<parameters>
<parameter name="window">
<parameter_description> the #GdkWindow to wait for the events for.
</parameter_description>
</parameter>
</parameters>
<return>  a #GdkEventExpose if a GraphicsExpose was received, or %NULL if a
NoExpose event was received.
</return>
</function>

<function name="gdk_x11_image_get_xdisplay">
<description>
Returns the display of a #GdkImage.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_pixbuf_unref">
<description>
Removes a reference from a pixbuf. 

Deprecated: Use g_object_unref().

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_add_client_message_filter">
<description>
Adds a filter to be called when X ClientMessage events are received.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay for which this message filter applies
</parameter_description>
</parameter>
<parameter name="message_type">
<parameter_description> the type of ClientMessage events to receive.
This will be checked against the @message_type field 
of the XClientMessage event struct.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call to process the event.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to @func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdkx_colormap_get">
<description>
Returns a #GdkColormap corresponding to a X colormap;
this function only works if the colormap is already
known to GTK+ (a colormap created by GTK+ or the default
colormap for the screen), since GTK+ 

Always use gdk_x11_colormap_foreign_new() instead.


</description>
<parameters>
<parameter name="xcolormap">
<parameter_description> the XID of a colormap for the default screen.
</parameter_description>
</parameter>
</parameters>
<return> the existing #GdkColormap object if it was
already known to GTK+, otherwise warns and return
%NULL.
</return>
</function>

<function name="gdk_drag_find_window">
<description>
Finds the destination window and DND protocol to use at the
given pointer position. 

This function is called by the drag source to obtain the 
@dest_window and @protocol parameters for gdk_drag_motion().

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="drag_window">
<parameter_description> a window which may be at the pointer position, but
should be ignored, since it is put up by the drag source as an icon.
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> location to store the destination window in.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location to store the DND protocol in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_put_event">
<description>
Appends a copy of the given event onto the front of the event
queue for @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_new_from_file">
<description>
Creates a new pixbuf by loading an image from a file.  The file format is
detected automatically. If %NULL is returned, then @error will be set.
Possible errors are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for an error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1, or %NULL if
any of several error conditions occurred:  the file could not be opened,
there was no loader for the file&apos;s format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_xid_table_lookup">
<description>
Returns the Gdk object associated with the given X id.


</description>
<parameters>
<parameter name="xid">
<parameter_description> an X id.
</parameter_description>
</parameter>
</parameters>
<return> the associated Gdk object, which may be a #GdkPixmap,
a #GdkWindow or a #GdkFont.
</return>
</function>

<function name="gdk_pixbuf_scale_simple">
<description>
Create a new #GdkPixbuf containing a copy of @src scaled to
@dest_width x @dest_height. Leaves @src unaffected.  @interp_type
should be #GDK_INTERP_NEAREST if you want maximum speed (but when
scaling down #GDK_INTERP_NEAREST is usually unusably ugly).  The
default @interp_type should be #GDK_INTERP_BILINEAR which offers
reasonable quality and speed.

You can scale a sub-portion of @src by creating a sub-pixbuf
pointing into @src; see gdk_pixbuf_new_subpixbuf().

For more complicated scaling/compositing see gdk_pixbuf_scale()
and gdk_pixbuf_composite().


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of destination image
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of destination image
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.
</return>
</function>

<function name="gdk_gc_set_colormap">
<description>
Sets the colormap for the GC to the given colormap. The depth
of the colormap&apos;s visual must match the depth of the drawable
for which the GC was created.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_height_mm">
<description>
Returns the height of the default screen in millimeters.
Note that on many X servers this value will not be correct.


</description>
<parameters>
</parameters>
<return> the height of the default screen in millimeters,
though it is not always correct.
</return>
</function>

<function name="gdk_window_set_title">
<description>
Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven&apos;t explicitly set the icon name for the window
(using gdk_window_set_icon_name()), the icon name will be set to
@title as well. @title must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). @title may not be %NULL.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colors_store">
<description>
Changes the value of the first @ncolors colors in
a private colormap. This function is obsolete and
should not be used. See gdk_color_change().

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> the new color values.
</parameter_description>
</parameter>
<parameter name="ncolors">
<parameter_description> the number of colors to change.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_default_colormap">
<description>
Gets the default colormap for @screen.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the default #GdkColormap.

Since: 2.2
</return>
</function>

<function name="gdk_display_get_event">
<description>
Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the next #GdkEvent to be processed, or %NULL if no events
are pending. The returned #GdkEvent should be freed with gdk_event_free().

Since: 2.2
</return>
</function>

<function name="gdk_mbstowcs">
<description>
Converts a multi-byte string to a wide character string.
(The function name comes from an acronym of &apos;Multi-Byte String TO Wide
Character String&apos;).


</description>
<parameters>
<parameter name="dest">
<parameter_description> the space to place the converted wide character string into.
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> the multi-byte string to convert, which must be nul-terminated.
</parameter_description>
</parameter>
<parameter name="dest_max">
<parameter_description> the maximum number of wide characters to place in @dest.
</parameter_description>
</parameter>
</parameters>
<return> the number of wide characters written into @dest, or -1 if 
the conversion failed.
</return>
</function>

<function name="gdk_draw_layout_line_with_colors">
<description>
Render a #PangoLayoutLine onto a #GdkDrawable, overriding the
layout&apos;s normal colors with @foreground and/or @background.
@foreground and @background need not be allocated.

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw the line
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the x position of start of string (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the y position of baseline (in pixels)
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>      a #PangoLayoutLine
</parameter_description>
</parameter>
<parameter name="foreground">
<parameter_description> foreground override color, or %NULL for none
</parameter_description>
</parameter>
<parameter name="background">
<parameter_description> background override color, or %NULL for none
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgb_get_visual">
<description>
Gets a &quot;preferred visual&quot; chosen by GdkRGB for rendering image data
on the default screen. In previous versions of GDK, this was the
only visual GdkRGB could use for rendering. In current versions,
it&apos;s simply the visual GdkRGB would have chosen as the optimal one
in those previous versions. GdkRGB can now render to drawables with
any visual.


</description>
<parameters>
</parameters>
<return> The #GdkVisual chosen by GdkRGB.
</return>
</function>

<function name="gdk_colormap_unref">
<description>
Deprecated function; use g_object_ref() instead.

</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_pixbuf">
<description>
Renders a rectangular portion of a pixbuf to a drawable.  The destination
drawable must have a colormap. All windows have a colormap, however, pixmaps
only have colormap by default if they were created with a non-%NULL window 
argument. Otherwise a colormap must be set on them with 
gdk_drawable_set_colormap().

On older X servers, rendering pixbufs with an alpha channel involves round 
trips to the X server, and may be somewhat slow.

Since: 2.2

</description>
<parameters>
<parameter name="drawable">
<parameter_description> Destination drawable.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC, used for clipping, or %NULL
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinates within pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to render, in pixels, or -1 to use pixbuf width.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to render, in pixels, or -1 to use pixbuf height.
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> Dithering mode for #GdkRGB.
</parameter_description>
</parameter>
<parameter name="x_dither">
<parameter_description> X offset for dither.
</parameter_description>
</parameter>
<parameter name="y_dither">
<parameter_description> Y offset for dither.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixmap_foreign_new_for_display">
<description>
Wraps a native pixmap in a #GdkPixmap.
This may fail if the pixmap has been destroyed.

For example in the X backend, a native pixmap handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="display">
<parameter_description> The #GdkDisplay where @anid is located.
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkPixmap wrapper for the 
native pixmap or %NULL if the pixmap has been destroyed.

Since: 2.2
</return>
</function>

<function name="gdk_window_get_internal_paint_info">
<description>
If you bypass the GDK layer and use windowing system primitives to
draw directly onto a #GdkWindow, then you need to deal with two
details: there may be an offset between GDK coordinates and windowing
system coordinates, and GDK may have redirected drawing to a offscreen
pixmap as the result of a gdk_window_begin_paint_region() calls.
This function allows retrieving the information you need to compensate
for these effects.

This function exposes details of the GDK implementation, and is thus
likely to change in future releases of GDK.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="real_drawable">
<parameter_description> location to store the drawable to which drawing should be 
done.
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> location to store the X offset between coordinates in @window,
and the underlying window system primitive coordinates for 
*@real_drawable.
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> location to store the Y offset between coordinates in @window,
and the underlying window system primitive coordinates for
*@real_drawable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_color_copy">
<description>
Makes a copy of a color structure. The result
must be freed using gdk_color_free().


</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return> a copy of @color.
</return>
</function>

<function name="gdk_window_set_child_shapes">
<description>
Sets the shape mask of @window to the union of shape masks
for all children of @window, ignoring the shape mask of @window
itself. Contrast with gdk_window_merge_child_shapes() which includes
the shape mask of @window in the masks to be merged.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_get_xatom_by_name_for_display">
<description>
Returns the X atom for a #GdkDisplay corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="atom_name">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a X atom for a #GdkDisplay

Since: 2.2
</return>
</function>

<function name="gdk_screen_get_system_visual">
<description>
Get the system&apos;s default visual for @screen.
This is the visual for the root window of the display.
The return value should not be freed.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> the system visual

Since: 2.2
</return>
</function>

<function name="gdk_event_get">
<description>
Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().


</description>
<parameters>
</parameters>
<return> the next #GdkEvent to be processed, or %NULL if no events
are pending. The returned #GdkEvent should be freed with gdk_event_free().
</return>
</function>

<function name="gdk_event_get_axis">
<description>
Extract the axis value for a particular axis use from
an event structure.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="axis_use">
<parameter_description> the axis use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the specified axis was found, otherwise %FALSE
</return>
</function>

<function name="gdk_screen_get_monitor_geometry">
<description>
Retrieves the #GdkRectangle representing the size and start
coordinates of the individual monitor within the the entire virtual
screen.

Note that the virtual screen coordinates can be retrieved via 
gdk_screen_get_width() and gdk_screen_get_height().

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> the monitor number. 
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GdkRectangle to be filled with the monitor geometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gdk_event_queue_append">
<description>
Appends an event onto the tail of the event queue.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> Event to append.
</parameter_description>
</parameter>
</parameters>
<return> the newly appended list node.
</return>
</function>

<function name="gdk_pango_context_get">
<description>
Creates a #PangoContext for the default GDK screen.

The context must be freed when you&apos;re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.


</description>
<parameters>
</parameters>
<return> a new #PangoContext for the default display
</return>
</function>

<function name="gdk_color_black">
<description>
Returns the black color for a given colormap. The resulting
value has already benn allocated. 


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the location to store the color.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.
</return>
</function>

<function name="gdk_x11_colormap_get_xcolormap">
<description>
Returns the X colormap belonging to a #GdkColormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description>  a #GdkColormap.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Colormap&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_pixbuf_render_pixmap_and_mask">
<description>
Creates a pixmap and a mask bitmap which are returned in the @pixmap_return
and @mask_return arguments, respectively, and renders a pixbuf and its
corresponding thresholded alpha mask to them.  This is merely a convenience
function; applications that need to render pixbufs with dither offsets or to
given drawables should use gdk_pixbuf_render_to_drawable_alpha() or
gdk_pixbuf_render_to_drawable(), and gdk_pixbuf_render_threshold_alpha().

The pixmap that is created is created for the colormap returned
by gdk_rgb_get_colormap(). You normally will want to instead use
the actual colormap for a widget, and use
gdk_pixbuf_render_pixmap_and_mask_for_colormap.

If the pixbuf does not have an alpha channel, then *@mask_return will be set
to NULL.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="pixmap_return">
<parameter_description> Location to store a pointer to the created pixmap,
or %NULL if the pixmap is not needed.
</parameter_description>
</parameter>
<parameter name="mask_return">
<parameter_description> Location to store a pointer to the created mask,
or %NULL if the mask is not needed.
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Threshold value for opacity values.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_offset">
<description>
Offset attributes such as the clip and tile-stipple origins
of the GC so that drawing at x - x_offset, y - y_offset with
the offset GC  has the same effect as drawing at x, y with the original
GC.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="x_offset">
<parameter_description> amount by which to offset the GC in the X direction
</parameter_description>
</parameter>
<parameter name="y_offset">
<parameter_description> amount by which to offset the GC in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_image_get">
<description>
This is a deprecated wrapper for gdk_drawable_get_image();
gdk_drawable_get_image() should be used instead. Or even better: in
most cases gdk_pixbuf_get_from_drawable() is the most convenient
choice.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate in @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate in @window
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of area in @window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of area in @window
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkImage or %NULL
</return>
</function>

<function name="gdk_x11_image_get_ximage">
<description>
Returns the X image belonging to a #GdkImage.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage.
</parameter_description>
</parameter>
</parameters>
<return> an &amp;lt;type&amp;gt;XImage*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_font_id">
<description>
Returns the X Font ID for the given font. 


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> the numeric X Font ID
</return>
</function>

<function name="gdk_pixbuf_scale">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then renders the rectangle (@dest_x, @dest_y, @dest_width,
@dest_height) of the resulting image onto the destination image
replacing the previous contents.

Try to use gdk_pixbuf_scale_simple() first, this function is
the industrial-strength power tool you can fall back to if
gdk_pixbuf_scale_simple() isn&apos;t powerful enough.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_height">
<description>
Gets the height of @screen in pixels


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the height of @screen in pixels.

Since: 2.2
</return>
</function>

<function name="gdk_cursor_unref">
<description>
Removes a reference from @cursor, deallocating the cursor
if no references remain.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cursor_new_for_display">
<description>
Creates a new cursor from the set of builtin cursors.
Some useful ones are:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;right_ptr.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_RIGHT_PTR (right-facing arrow)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;crosshair.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_CROSSHAIR (crosshair)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;xterm.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_XTERM (I-beam)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;watch.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_WATCH (busy)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;fleur.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_FLEUR (for moving objects)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;hand1.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_HAND1 (a right-pointing hand)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;hand2.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_HAND2 (a left-pointing hand)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;left_side.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_LEFT_SIDE (resize left side)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;right_side.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_RIGHT_SIDE (resize right side)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_left_corner.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_TOP_LEFT_CORNER (resize northwest corner)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_right_corner.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_TOP_RIGHT_CORNER (resize northeast corner)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_left_corner.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_BOTTOM_LEFT_CORNER (resize southwest corner)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_right_corner.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_BOTTOM_RIGHT_CORNER (resize southeast corner)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_side.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_TOP_SIDE (resize top side)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_side.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_BOTTOM_SIDE (resize bottom side)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;sb_h_double_arrow.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_SB_H_DOUBLE_ARROW (move vertical splitter)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;
&amp;lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;sb_v_double_arrow.png&quot;&amp;gt;&amp;lt;/inlinegraphic&amp;gt; #GDK_SB_V_DOUBLE_ARROW (move horizontal splitter)
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

To make the cursor invisible, use gdk_cursor_new_from_pixmap() to create
a cursor with no pixels in it.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="cursor_type">
<parameter_description> cursor to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor

Since: 2.2
</return>
</function>

<function name="gdk_pango_layout_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the same position
you would pass to gdk_draw_layout_line(). @index_ranges should contain
ranges of bytes in the layout&apos;s text.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> Y pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_pixbuf_animation_iter_on_currently_loading_frame">
<description>
Used to determine how to respond to the area_updated signal on
#GdkPixbufLoader when loading an animation. area_updated is emitted
for an area of the frame currently streaming in to the loader. So if
you&apos;re on the currently loading frame, you need to redraw the screen for
the updated area.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdkPixbufAnimationIter
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the frame we&apos;re on is partially loaded, or the last frame
</return>
</function>

<function name="gdk_region_intersect">
<description>
Sets the area of @source1 to the intersection of the areas of @source1
and @source2. The resulting area is the set of pixels contained in
both @source1 and @source2.

</description>
<parameters>
<parameter name="source1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> another #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_notify_startup_complete">
<description>
Indicates to the GUI environment that the application has finished
loading. If the applications opens windows, this function is
normally called after opening the application&apos;s initial set of
windows.

GTK+ will call this function automatically after opening the first
#GtkWindow unless gtk_window_set_auto_startup_notification() is called 
to disable that feature.

Since: 2.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_wcstombs">
<description>
Converts a wide character string to a multi-byte string.
(The function name comes from an acronym of &apos;Wide Character String TO
Multi-Byte String&apos;).


</description>
<parameters>
<parameter name="src">
<parameter_description> a wide character string.
</parameter_description>
</parameter>
</parameters>
<return> the multi-byte string corresponding to @src, or %NULL if the
conversion failed. The returned string should be freed with g_free() when no
longer needed.
</return>
</function>

<function name="gdk_text_property_to_utf8_list_for_display">
<description>
Converts a text property in the given encoding to
a list of UTF-8 strings. 


</description>
<parameters>
<parameter name="display">
<parameter_description>  a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding of the text
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>     the text to convert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description>     location to store the list of strings or %NULL. The
list should be freed with g_strfreev().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings in the resulting
list.

Since: 2.2
</return>
</function>

<function name="gdk_string_height">
<description>
Determines the total height of a given nul-terminated
string. This value is not generally useful, because you
cannot determine how this total height will be drawn in
relation to the baseline. See gdk_string_extents().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure.
</parameter_description>
</parameter>
</parameters>
<return> the height of the string in pixels.
</return>
</function>

<function name="gdk_display_get_default">
<description>
Gets the default #GdkDisplay. This is a convenience
function for:
&amp;lt;programlisting&amp;gt;
gdk_display_manager_get_default_display (gdk_display_manager_get ())
&amp;lt;/programlisting&amp;gt;


</description>
<parameters>
</parameters>
<return> a #GdkDisplay, or %NULL if there is no default
display.

Since: 2.2
</return>
</function>

<function name="gdk_window_set_debug_updates">
<description>
With update debugging enabled, calls to
gdk_window_invalidate_region() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
gdk_window_process_updates().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.

In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what&apos;s being redrawn when, in what order.

The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That&apos;s
usually more useful than calling gdk_window_set_debug_updates()
yourself, though you might want to use this function to enable
updates sometime after application startup time.


</description>
<parameters>
<parameter name="setting">
<parameter_description> %TRUE to turn on update debugging
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_context_ref">
<description>
Deprecated function; use g_object_ref() instead.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_change">
<description>
Changes the value of the first @ncolors in a private colormap
to match the values in the &amp;lt;structfield&amp;gt;colors&amp;lt;/structfield&amp;gt;
array in the colormap. This function is obsolete and
should not be used. See gdk_color_change().

</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="ncolors">
<parameter_description> the number of colors to change.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_events">
<description>
The event mask for a window determines which events will be reported
for that window. For example, an event mask including #GDK_BUTTON_PRESS_MASK
means the window should report button press events. The event mask
is the bitwise OR of values from the #GdkEventMask enumeration.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_query_visual_types">
<description>
This function returns the available visual types for the default
screen. It&apos;s equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the type field in each
visual, removing duplicates.

The array returned by this function should not be freed.

</description>
<parameters>
<parameter name="visual_types">
<parameter_description> return location for the available visual types
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for the number of available visual types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_atom_to_xatom_for_display">
<description>
Converts from a #GdkAtom to the X atom for a #GdkDisplay
with the same string value.


</description>
<parameters>
<parameter name="display">
<parameter_description> A #GdkDisplay
</parameter_description>
</parameter>
<parameter name="atom">
<parameter_description> A #GdkAtom 
</parameter_description>
</parameter>
</parameters>
<return> the X atom corresponding to @atom.

Since: 2.2
</return>
</function>

<function name="gdk_text_height">
<description>
Determines the total height of a given string.
This value is not generally useful, because you cannot
determine how this total height will be drawn in
relation to the baseline. See gdk_text_extents().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the height of the string in pixels.
</return>
</function>

<function name="gdk_display_close">
<description>
Closes the connection windowing system for the given display,
and cleans up associated resources.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="pixops_composite">
<description>
Scale source buffer by scale_x / scale_y, then composite a given rectangle
of the result into the destination buffer.

</description>
<parameters>
<parameter name="dest_buf">
<parameter_description> pointer to location to store result
</parameter_description>
</parameter>
<parameter name="render_x0">
<parameter_description> x0 of region of scaled source to store into @dest_buf
</parameter_description>
</parameter>
<parameter name="render_y0">
<parameter_description> y0 of region of scaled source to store into @dest_buf
</parameter_description>
</parameter>
<parameter name="render_x1">
<parameter_description> x1 of region of scaled source to store into @dest_buf
</parameter_description>
</parameter>
<parameter name="render_y1">
<parameter_description> y1 of region of scaled source to store into @dest_buf
</parameter_description>
</parameter>
<parameter name="dest_rowstride">
<parameter_description> rowstride of @dest_buf
</parameter_description>
</parameter>
<parameter name="dest_channels">
<parameter_description> number of channels in @dest_buf
</parameter_description>
</parameter>
<parameter name="dest_has_alpha">
<parameter_description> whether @dest_buf has alpha
</parameter_description>
</parameter>
<parameter name="src_buf">
<parameter_description> pointer to source pixels
</parameter_description>
</parameter>
<parameter name="src_width">
<parameter_description> width of source (used for clipping)
</parameter_description>
</parameter>
<parameter name="src_height">
<parameter_description> height of source (used for clipping)
</parameter_description>
</parameter>
<parameter name="src_rowstride">
<parameter_description> rowstride of source
</parameter_description>
</parameter>
<parameter name="src_channels">
<parameter_description> number of channels in @src_buf
</parameter_description>
</parameter>
<parameter name="src_has_alpha">
<parameter_description> whether @src_buf has alpha
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> amount to scale source by in X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> amount to scale source by in Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> type of enumeration
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha factor to multiply source by
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_set_double_click_time">
<description>
Sets the double click time (two clicks within this time interval
count as a double click and result in a #GDK_2BUTTON_PRESS event).
Applications should NOT set this, it is a global user-configured setting.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="msec">
<parameter_description> double click time in milliseconds (thousandths of a second) 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_query_depths">
<description>
This function returns the available bit depths for the default
screen. It&apos;s equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the depth field in each
visual, removing duplicates.

The array returned by this function should not be freed.


</description>
<parameters>
<parameter name="depths">
<parameter_description> return location for available depths 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for number of available depths
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_char_measure">
<description>
Determines the distance from the origin to the rightmost
portion of a character when drawn. This is not the
correct value for determining the origin of the next
portion when drawing text in multiple pieces. 


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the right bearing of the character in pixels.
</return>
</function>

<function name="gdk_pixbuf_format_get_name">
<description>
Returns the name of the format.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> the name of the format. 

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_get_has_alpha">
<description>
Queries whether a pixbuf has an alpha channel (opacity information).


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it has an alpha channel, %FALSE otherwise.
</return>
</function>

<function name="gdk_event_send_client_message_for_display">
<description>
Sends an X ClientMessage event to a given window.

This could be used for communicating between different applications,
though the amount of data is limited to 20 bytes.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for the window where the message is to be sent.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GdkEvent to send, which should be a #GdkEventClient.
</parameter_description>
</parameter>
<parameter name="winid">
<parameter_description> the window to send the X ClientMessage event to.
</parameter_description>
</parameter>
</parameters>
<return> non-zero on success.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_loader_get_format">
<description>
Obtains the available information about the format of the 
currently loading image file.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkPixbufFormat or %NULL. The return value is owned 
by GdkPixbuf and should not be freed.

Since: 2.2
</return>
</function>

<function name="gdk_set_sm_client_id">
<description>
Sets the &amp;lt;literal&amp;gt;SM_CLIENT_ID&amp;lt;/literal&amp;gt; property on the application&apos;s leader window so that
the window manager can save the application&apos;s state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual
(ICCCM) for information on the &amp;lt;literal&amp;gt;WM_CLIENT_LEADER&amp;lt;/literal&amp;gt; property. 
(Both documents are part of the X Window System distribution.)

</description>
<parameters>
<parameter name="sm_client_id">
<parameter_description> the client id assigned by the session manager when the
connection was opened, or %NULL to remove the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unstick">
<description>
Reverse operation for gdk_window_stick(); see gdk_window_stick(),
and gtk_window_unstick().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_copy">
<description>
Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkWindow&apos;s and strings).


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a copy of @event. The returned #GdkEvent should be freed with
gdk_event_free().
</return>
</function>

<function name="gdk_selection_property_get">
<description>
Retrieves selection data that was stored by the selection
data in response to a call to gdk_selection_convert(). This function
will not be used by applications, who should use the #GtkClipboard
API instead.


</description>
<parameters>
<parameter name="requestor">
<parameter_description> the window on which the data is stored
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location to store a pointer to the retrieved data.
       If the retrieval failed, %NULL we be stored here, otherwise, it
       will be non-%NULL and the returned data should be freed with g_free()
       when you are finished using it. The length of the
       allocated memory is one more than the the length
       of the returned data, and the final byte will always
       be zero, to ensure nul-termination of strings.
</parameter_description>
</parameter>
<parameter name="prop_type">
<parameter_description> location to store the type of the property.
</parameter_description>
</parameter>
<parameter name="prop_format">
<parameter_description> location to store the format of the property.
</parameter_description>
</parameter>
</parameters>
<return> the length of the retrieved data.
</return>
</function>

<function name="gdk_text_measure">
<description>
Determines the distance from the origin to the rightmost
portion of a string when drawn. This is not the
correct value for determining the origin of the next
portion when drawing text in multiple pieces. 
See gdk_text_width().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the right bearing of the string in pixels.
</return>
</function>

<function name="gdk_pixbuf_saturate_and_pixelate">
<description>
Modifies saturation and optionally pixelates @src, placing the
result in @dest. @src and @dest may be the same pixbuf with no ill
effects.  If @saturation is 1.0 then saturation is not changed. If
it&apos;s less than 1.0, saturation is reduced (the image is darkened);
if greater than 1.0, saturation is increased (the image is
brightened). If @pixelate is %TRUE, then pixels are faded in a
checkerboard pattern to create a pixelated image. @src and @dest
must have the same image format, size, and rowstride.


</description>
<parameters>
<parameter name="src">
<parameter_description> source image
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> place to write modified version of @src
</parameter_description>
</parameter>
<parameter name="saturation">
<parameter_description> saturation factor
</parameter_description>
</parameter>
<parameter name="pixelate">
<parameter_description> whether to pixelate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_show_unraised">
<description>
Shows a #GdkWindow onscreen, but does not modify its stacking
order. In contrast, gdk_window_show() will raise the window
to the top of the window stack.

On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can&apos;t really use XMapWindow() directly on a GDK window).


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_get_clip_region">
<description>
Computes the region of a drawable that potentially can be written
to by drawing primitives. This region will not take into account
the clip region for the GC, and may also not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> a #GdkRegion. This must be freed with gdk_region_destroy()
when you are done.
</return>
</function>

<function name="gdk_screen_get_monitor_at_window">
<description>

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the monitor number in which most of @window is located,
or if @window does not intersect any monitors, a monitor,
close to @window.
</parameter_description>
</parameter>
</parameters>
<return>the number of the monitor in which the largest area of the 
bounding rectangle of @window resides.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_loader_close">
<description>
Informs a pixbuf loader that no further writes with
gdk_pixbuf_loader_write() will occur, so that it can free its
internal loading structures. Also, tries to parse any data that
hasn&apos;t yet been parsed; if the remaining data is partial or
corrupt, an error will be returned.  If %FALSE is returned, @error
will be set to an error from the #GDK_PIXBUF_ERROR or #G_FILE_ERROR
domains. If you&apos;re just cancelling a load rather than expecting it
to be finished, passing %NULL for @error to ignore it is
reasonable.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all image data written so far was successfully
            passed out via the update_area signal
</return>
</function>

<function name="gdk_x11_xatom_to_atom">
<description>
Convert from an X atom for the default display to the corresponding
#GdkAtom.


</description>
<parameters>
<parameter name="xatom">
<parameter_description> an X atom for the default GDK display
</parameter_description>
</parameter>
</parameters>
<return> the corresponding G#dkAtom.
</return>
</function>

<function name="gdk_window_clear">
<description>
Clears an entire @window to the background color or background pixmap.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gdk_window_destroy_hierarchy">
<description>
Internal function to destroy a window. Like gdk_window_destroy(),
but does not drop the reference count created by gdk_window_new().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="recursing">
<parameter_description> If TRUE, then this is being called because a parent
was destroyed. This generally means that the call to the 
windowing system to destroy the window can be omitted, since
it will be destroyed as a result of the parent being destroyed.
Unless @foreign_destroy.           
</parameter_description>
</parameter>
<parameter name="foreign_destroy">
<parameter_description> If TRUE, the window or a parent was destroyed by some 
external agency. The window has already been destroyed and no 
windowing system calls should be made. (This may never happen
for some windowing systems.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_manager_get">
<description>

</description>
<parameters>
<parameter name="returns">
<parameter_description> the singleton #GdkDisplayManager object.
</parameter_description>
</parameter>
</parameters>
<return>the global #GdkDisplayManager singleton; gdk_parse_pargs(),
gdk_init(), or gdk_init_check() must have been called first.

Since: 2.2
</return>
</function>

<function name="gdk_drawable_get_screen">
<description>
Gets the #GdkScreen associated with a #GdkDrawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen associated with @drawable

Since: 2.2
</return>
</function>

<function name="gdk_window_get_deskrelative_origin">
<description>
This gets the origin of a #GdkWindow relative to
an Enlightenment-window-manager desktop. As long as you don&apos;t
assume that the user&apos;s desktop/workspace covers the entire
root window (i.e. you don&apos;t assume that the desktop begins
at root window coordinate 0,0) this function is not necessary.
It&apos;s deprecated for that reason.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> not meaningful
</return>
</function>

<function name="gdk_draw_text">
<description>
Draws a number of characters in the given font or fontset.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the text.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the baseline of the text.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>  the characters to draw.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the number of characters of @text to draw.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_get_size">
<description>
Fills *@width and *@height with the size of @drawable.
@width or @height can be %NULL if you only want the other one.

On the X11 platform, if @drawable is a #GdkWindow, the returned
size is the size reported in the most-recently-processed configure
event, rather than the current size on the X server.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> location to store drawable&apos;s width, or %NULL
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> location to store drawable&apos;s height, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cursor_new_from_pixmap">
<description>
Creates a new cursor from a given pixmap and mask. Both the pixmap and mask
must have a depth of 1 (i.e. each pixel has only 2 values - on or off).
The standard cursor size is 16 by 16 pixels. You can create a bitmap 
from inline data as in the below example.

&amp;lt;example&amp;gt;&amp;lt;title&amp;gt;Creating a custom cursor&amp;lt;/title&amp;gt;
&amp;lt;programlisting&amp;gt;
/&amp;lt;!-- --&amp;gt;* This data is in X bitmap format, and can be created with the &apos;bitmap&apos;
utility. *&amp;lt;!-- --&amp;gt;/
&amp;num;define cursor1_width 16
&amp;num;define cursor1_height 16
static unsigned char cursor1_bits[] = {
0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x08, 0x08, 0x10, 0x04, 0x20,
0x82, 0x41, 0x41, 0x82, 0x41, 0x82, 0x82, 0x41, 0x04, 0x20, 0x08, 0x10,
0x10, 0x08, 0x20, 0x04, 0x40, 0x02, 0x80, 0x01};

static unsigned char cursor1mask_bits[] = {
0x80, 0x01, 0xc0, 0x03, 0x60, 0x06, 0x30, 0x0c, 0x18, 0x18, 0x8c, 0x31,
0xc6, 0x63, 0x63, 0xc6, 0x63, 0xc6, 0xc6, 0x63, 0x8c, 0x31, 0x18, 0x18,
0x30, 0x0c, 0x60, 0x06, 0xc0, 0x03, 0x80, 0x01};


GdkCursor *cursor;
GdkPixmap *source, *mask;
GdkColor fg = { 0, 65535, 0, 0 }; /&amp;lt;!-- --&amp;gt;* Red. *&amp;lt;!-- --&amp;gt;/
GdkColor bg = { 0, 0, 0, 65535 }; /&amp;lt;!-- --&amp;gt;* Blue. *&amp;lt;!-- --&amp;gt;/


source = gdk_bitmap_create_from_data (NULL, cursor1_bits,
cursor1_width, cursor1_height);
mask = gdk_bitmap_create_from_data (NULL, cursor1mask_bits,
cursor1_width, cursor1_height);
cursor = gdk_cursor_new_from_pixmap (source, mask, &amp;amp;fg, &amp;amp;bg, 8, 8);
gdk_pixmap_unref (source);
gdk_pixmap_unref (mask);


gdk_window_set_cursor (widget-&amp;gt;window, cursor);
&amp;lt;/programlisting&amp;gt;
&amp;lt;/example&amp;gt;


</description>
<parameters>
<parameter name="source">
<parameter_description> the pixmap specifying the cursor.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> the pixmap specifying the mask, which must be the same size as 
@source.
</parameter_description>
</parameter>
<parameter name="fg">
<parameter_description> the foreground color, used for the bits in the source which are 1.
The color does not have to be allocated first. 
</parameter_description>
</parameter>
<parameter name="bg">
<parameter_description> the background color, used for the bits in the source which are 0.
The color does not have to be allocated first.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the horizontal offset of the &apos;hotspot&apos; of the cursor. 
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the vertical offset of the &apos;hotspot&apos; of the cursor.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor.
</return>
</function>

<function name="gdk_x11_font_get_name">
<description>
Return the X Logical Font Description (for font-&amp;gt;type == GDK_FONT_FONT)
or comma separated list of XLFDs (for font-&amp;gt;type == GDK_FONT_FONTSET)
that was used to load the font. If the same font was loaded
via multiple names, which name is returned is undefined.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> the name of the font. This string is owned
by GDK and must not be modified or freed.
</return>
</function>

<function name="gdk_pixbuf_set_option">
<description>
Attaches a key/value pair as an option to a #GdkPixbuf. If %key already
exists in the list of options attached to @pixbuf, the new value is 
ignored and %FALSE is returned.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a nul-terminated string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.

Since: 2.2
</return>
</function>

<function name="gdk_window_get_toplevel">
<description>
Gets the toplevel window that&apos;s an ancestor of @window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the toplevel window containing @window
</return>
</function>

<function name="gdk_window_set_functions">
<description>
This function isn&apos;t really good for much. It sets the traditional
Motif window manager hint for which operations the window manager
should allow on a toplevel window. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.

The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn&apos;t include #GDK_FUNC_ALL, it indicates which functions to
enable.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="functions">
<parameter_description> bitmask of operations to allow on @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_paint_region">
<description>
Indicates that you are beginning the process of redrawing @region.
A backing store (offscreen buffer) large enough to contain @region
will be created. The backing store will be initialized with the
background color or background pixmap for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store.  When you call gdk_window_end_paint(), the backing
store will be copied to @window, making it visible onscreen. Only
the part of @window contained in @region will be modified; that is,
drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_paint(). If you draw to @window directly without
calling gdk_window_begin_paint_region(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
gdk_window_begin_paint_region() are conveniences for the
programmer, so you can avoid doing that work yourself.

When using GTK+, the widget system automatically places calls to
gdk_window_begin_paint_region() and gdk_window_end_paint() around
emissions of the expose_event signal. That is, if you&apos;re writing an
expose event handler, you can assume that the exposed area in
#GdkEventExpose has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
gdk_window_begin_paint_region(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
gtk_widget_set_double_buffered().)

If you call this function multiple times before calling the
matching gdk_window_end_paint(), the backing stores are pushed onto
a stack. gdk_window_end_paint() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
gdk_window_end_paint() is required for each call to
gdk_window_begin_paint_region().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> region you intend to draw to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keyval_to_unicode">
<description>
Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a GDK key symbol 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding unicode character, or 0 if there
is no corresponding character.
</return>
</function>

<function name="gdk_event_handler_set">
<description>
Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to call to handle events from GDK.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function. 
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> the function to call when the handler function is removed, i.e. when
gdk_event_handler_set() is called with another event handler.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_shape_combine_region">
<description>
Makes pixels in @window outside @shape_region be transparent,
so that the window may be nonrectangular. See also
gdk_window_shape_combine_mask() to use a bitmap as the mask.

If @shape_region is %NULL, the shape will be unset, so the whole
window will be opaque again. @offset_x and @offset_y are ignored
if @shape_region is %NULL.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="shape_region">
<parameter_description> region of window to be non-transparent
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of @shape_region in @window coordinates
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of @shape_region in @window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_lookup_for_display">
<description>
Looks up the #GdkWindow that wraps the given native window handle.

For example in the X backend, a native window handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay corresponding to the window handle
</parameter_description>
</parameter>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native window, 
or %NULL if there is none.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_new">
<description>
Creates a new #GdkPixbuf structure and allocates a buffer for it.  The 
buffer has an optimal rowstride.  Note that the buffer is not cleared;
you will have to fill it completely yourself.


</description>
<parameters>
<parameter name="colorspace">
<parameter_description> Color space for image.
</parameter_description>
</parameter>
<parameter name="has_alpha">
<parameter_description> Whether the image should have transparency information.
</parameter_description>
</parameter>
<parameter name="bits_per_sample">
<parameter_description> Number of bits per color sample.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of image in pixels.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of image in pixels.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf with a reference count of 1, or 
%NULL if not enough memory could be allocated for the image buffer.
</return>
</function>

<function name="gdk_pixbuf_animation_iter_advance">
<description>
Possibly advances an animation to a new frame. Chooses the frame based
on the start time passed to gdk_pixbuf_animation_get_iter().

@current_time would normally come from g_get_current_time(), and
must be greater than or equal to the time passed to
gdk_pixbuf_animation_get_iter(), and must increase or remain
unchanged each time gdk_pixbuf_animation_iter_get_pixbuf() is
called. That is, you can&apos;t go backward in time; animations only
play forward.

As a shortcut, pass %NULL for the current time and g_get_current_time()
will be invoked on your behalf. So you only need to explicitly pass
@current_time if you&apos;re doing something odd like playing the animation
at double speed.

If this function returns %FALSE, there&apos;s no need to update the animation
display, assuming the display had been rendered prior to advancing;
if %TRUE, you need to call gdk_animation_iter_get_pixbuf() and update the
display with the new pixbuf.


</description>
<parameters>
<parameter name="iter">
<parameter_description> a #GdkPixbufAnimationIter
</parameter_description>
</parameter>
<parameter name="current_time">
<parameter_description> current time
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image may need updating

</return>
</function>

<function name="gdk_window_get_parent">
<description>
Obtains the parent of @window, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_window_new(),
not the actual parent. This should never matter unless you&apos;re using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> parent of @window
</return>
</function>

<function name="gdk_set_pointer_hooks">
<description>
This function allows for hooking into the operation
of getting the current location of the pointer. This
is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.

This function is not multihead safe. For multihead operation,
see gdk_display_set_pointer_hooks().


</description>
<parameters>
<parameter name="new_hooks">
<parameter_description> a table of pointers to functions for getting
quantities related to the current pointer position,
or %NULL to restore the default table.
</parameter_description>
</parameter>
</parameters>
<return> the previous pointer hook table
</return>
</function>

<function name="gdk_display_sync">
<description>
Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is 
removed.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_geometry">
<description>
Any of the return location arguments to this function may be %NULL,
if you aren&apos;t interested in getting the value of that field.

The X and Y coordinates returned are relative to the parent window
of @window, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).

On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @window; this may be out-of-sync
with the position of @window delivered in the most-recently-processed
#GdkEventConfigure. gdk_window_get_position() in contrast gets the
position from the most recent configure event.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of window (relative to its parent)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate of window (relative to its parent)
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width of window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height of window
</parameter_description>
</parameter>
<parameter name="depth">
<parameter_description> return location for bit depth of window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_loader_new">
<description>
Creates a new pixbuf loader object.


</description>
<parameters>
</parameters>
<return> A newly-created pixbuf loader.
</return>
</function>

<function name="gdk_pixbuf_get_pixels">
<description>
Queries a pointer to the pixel data of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> A pointer to the pixbuf&apos;s pixel data.
</return>
</function>

<function name="gdk_string_measure">
<description>
Determines the distance from the origin to the rightmost
portion of a nul-terminated string when drawn. This is not the
correct value for determining the origin of the next
portion when drawing text in multiple pieces.
See gdk_string_width().


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure.
</parameter_description>
</parameter>
</parameters>
<return> the right bearing of the string in pixels.
</return>
</function>

<function name="gdk_pango_attr_stipple_new">
<description>
Creates a new attribute containing a stipple bitmap to be used when
rendering the text.


</description>
<parameters>
<parameter name="stipple">
<parameter_description> a bitmap to be set as stipple
</parameter_description>
</parameter>
</parameters>
<return> new #PangoAttribute
</return>
</function>

<function name="gdk_window_raise">
<description>
Raises @window to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below @window.
This is true whether or not the windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_raise() only
requests the restack, does not guarantee it.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_loader_get_type">
<description>
Registers the #GdkPixbufLoader class if necessary, and returns the type ID
associated to it.


</description>
<parameters>
<parameter name="void">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> The type ID of the #GdkPixbufLoader class.
</return>
</function>

<function name="gdk_selection_owner_get_for_display">
<description>
Determine the owner of the given selection.

Note that the return value may be owned by a different 
process if a foreign window was previously created for that
window, but a new foreign window will never be created by this call. 


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom indentifying a selection.
</parameter_description>
</parameter>
</parameters>
<return> if there is a selection owner for this window, and it is a 
window known to the current process, the #GdkWindow that owns the 
selection, otherwise %NULL.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_get_n_channels">
<description>
Queries the number of channels of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of channels.
</return>
</function>

<function name="_gdk_x11_gc_get_fg_picture">
<description>
Gets a Xrender Picture object suitable for being the source
drawable for drawing with the foreground the graphics context.
(Currently, only foreground color is handled, but in the
future we should handle tiles/stipples as well.)


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return> a Picture, owned by the GC; this cannot be
used over subsequent modification of the GC.
</return>
</function>

<function name="gdk_pointer_is_grabbed">
<description>
Returns %TRUE if the pointer is currently grabbed by this application.

Note that this does not take the inmplicit pointer grab on button
presses into account.


</description>
<parameters>
</parameters>
<return> %TRUE if the pointer is currently grabbed by this application.* 
</return>
</function>

<function name="_gdk_send_xevent">
<description>
Send an event, like XSendEvent(), but trap errors and check
the result.


</description>
<parameters>
<parameter name="display">
<parameter_description> #GdkDisplay which @window is on
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> window ID to which to send the event
</parameter_description>
</parameter>
<parameter name="propagate">
<parameter_description> %TRUE if the event should be propagated if the target window
doesn&apos;t handle it.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask to match against, or 0 to send it to @window
without regard to event masks.
</parameter_description>
</parameter>
<parameter name="event_send">
<parameter_description> #XEvent to send
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if sending the event succeeded.
</return>
</function>

<function name="gdk_keymap_get_default">
<description>

</description>
<parameters>
<parameter name="returns">
<parameter_description> the #GdkKeymap attached to the default display.
</parameter_description>
</parameter>
</parameters>
<return>the #GdkKeymap attached to the default display.
</return>
</function>

<function name="gdk_screen_broadcast_client_message">
<description>
Sends an X ClientMessage event to all toplevel windows on @screen.

Toplevel windows are determined by checking for the WM_STATE property, 
as described in the Inter-Client Communication Conventions Manual (ICCCM).
If no windows are found with the WM_STATE property set, the message is 
sent to all children of the root window.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen where the event will be broadcasted.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_icon_list">
<description>
Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.


</description>
<parameters>
<parameter name="window">
<parameter_description> The #GdkWindow toplevel window to set the icon of.
</parameter_description>
</parameter>
<parameter name="pixbufs">
<parameter_description> A list of pixbufs, of different sizes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_get_screen">
<description>
Gets the #GdkScreen for which @gc was created


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen for @gc.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_new_from_inline">
<description>
Create a #GdkPixbuf from a flat representation that is suitable for
storing as inline data in a program. This is useful if you want to
ship a program with images, but don&apos;t want to depend on any
external files.

GTK+ ships with a program called &amp;lt;command&amp;gt;gdk-pixbuf-csource&amp;lt;/command&amp;gt; 
which allows for conversion of #GdkPixbufs into such a inline representation.
In almost all cases, you should pass the &amp;lt;option&amp;gt;--raw&amp;lt;/option&amp;gt; flag to
&amp;lt;command&amp;gt;gdk-pixbuf-csource&amp;lt;/command&amp;gt;. A sample invocation would be:

&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gdk-pixbuf-csource --raw --name=myimage_inline myimage.png
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

For the typical case where the inline pixbuf is read-only static data,
you don&apos;t need to copy the pixel data unless you intend to write to
it, so you can pass %FALSE for @copy_pixels.  (If you pass 
&amp;lt;option&amp;gt;--rle&amp;lt;/option&amp;gt; to &amp;lt;command&amp;gt;gdk-pixbuf-csource&amp;lt;/command&amp;gt;, a copy 
will be made even if @copy_pixels is %FALSE, so using this option is 
generally a bad idea.)

If you create a pixbuf from const inline data compiled into your
program, it&apos;s probably safe to ignore errors, since things will
always succeed.  For non-const inline data, you could get out of
memory. For untrusted inline data located at runtime, you could
have corrupt inline data in addition.


</description>
<parameters>
<parameter name="data_length">
<parameter_description> Length in bytes of the @data argument
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Byte data containing a serialized #GdkPixdata structure
</parameter_description>
</parameter>
<parameter name="copy_pixels">
<parameter_description> Whether to copy the pixel data, or use direct pointers
@data for the resulting pixbuf
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError return location, may be %NULL to ignore errors
</parameter_description>
</parameter>
</parameters>
<return> A newly-created #GdkPixbuf structure with a reference,
count of 1, or %NULL if error is set.
</return>
</function>

<function name="gdk_window_iconify">
<description>
Asks to iconify (minimize) @window. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

This function only makes sense when @window is a toplevel window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_decorations">
<description>
&quot;Decorations&quot; are the features the window manager adds to a toplevel #GdkWindow.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.

The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.

Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> decoration hint mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_user_data">
<description>
For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkWindow as user data on the
#GdkWindow. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkWindow,
and the user data for the window is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_string">
<description>
Draws a string of characters in the given font or fontset.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the text.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the baseline of the text.
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description>  the string of characters to draw.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_override_redirect">
<description>
An override redirect window is not under the control of the window manager.
This means it won&apos;t have a titlebar, won&apos;t be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can&apos;t see the override redirect window at all.

Override redirect should only be used for short-lived temporary
windows, such as popup menus. #GtkMenu uses an override redirect
window in its implementation, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="override_redirect">
<parameter_description> %TRUE if window should be override redirect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_beep">
<description>
Emits a short beep on @display

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pointer_grab_info_libgtk_only">
<description>
Determines information about the current pointer grab.
This is not public API and must not be used by applications.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which to get the grab information
</parameter_description>
</parameter>
<parameter name="grab_window">
<parameter_description> location to store current grab window
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> location to store boolean indicating whether
the @owner_events flag to gdk_pointer_grab() was %TRUE.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this application currently has the
pointer grabbed.
</return>
</function>

<function name="gdk_draw_line">
<description>
Draws a line, using the foreground color and other attributes of 
the #GdkGC.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap). 
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x1_">
<parameter_description> the x coordinate of the start point.
</parameter_description>
</parameter>
<parameter name="y1_">
<parameter_description> the y coordinate of the start point.
</parameter_description>
</parameter>
<parameter name="x2_">
<parameter_description> the x coordinate of the end point.
</parameter_description>
</parameter>
<parameter name="y2_">
<parameter_description> the y coordinate of the end point.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_get_height">
<description>
Queries the height of the bounding box of a pixbuf animation.


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> Height of the bounding box of the animation.
</return>
</function>

<function name="gdk_display_manager_set_default_display">
<description>
Sets @display as the default display.

Since: 2.2

</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop">
<description>
Drops on the current destination.

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_set_data">
<description>
This function is equivalent to g_object_set_data(),
the #GObject variant should be used instead.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> name to store the data under
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> arbitrary data
</parameter_description>
</parameter>
<parameter name="destroy_func">
<parameter_description> function to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_get_screen">
<description>
Returns the screen for the event. The screen is
typically the screen for &amp;lt;literal&amp;gt;event-&amp;gt;any.window&amp;lt;/literal&amp;gt;, but
for events such as mouse events, it is the screen
where the the pointer was when the event occurs -
that is, the screen which has the root window 
to which &amp;lt;literal&amp;gt;event-&amp;gt;motion.x_root&amp;lt;/literal&amp;gt; and
&amp;lt;literal&amp;gt;event-&amp;gt;motion.y_root&amp;lt;/literal&amp;gt; are relative.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the screen for the event

Since: 2.2
</return>
</function>

<function name="gdk_drawable_get_depth">
<description>
Obtains the bit depth of the drawable, that is, the number of bits
that make up a pixel in the drawable&apos;s visual. Examples are 8 bits
per pixel, 24 bits per pixel, etc.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> number of bits per pixel
</return>
</function>

<function name="gdk_display_manager_list_displays">
<description>
List all currently open displays.


</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager 
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GSList of #GdkDisplay objects.
Free this list with g_slist_free() when you are done with it.

Since: 2.2
</return>
</function>

<function name="gdk_window_foreign_new">
<description>
Wraps a native window for the default display in a #GdkWindow.
This may fail if the window has been destroyed.

For example in the X backend, a native window handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native window handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkWindow wrapper for the 
native window or %NULL if the window has been destroyed.
</return>
</function>

<function name="_gdk_xgrab_check_unmap">
<description>
Checks to see if an unmap request or event causes the current
grab window to become not viewable, and if so, clear the
the pointer we keep to it.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="serial">
<parameter_description> serial from Unmap event (or from NextRequest(display)
if the unmap is being done by this client.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_win32_hdc_get">
<description>
Allocates a Windows device context handle (HDC) for drawing into
@drawable, and sets it up appropriately according to @usage.

Each #GdkGC can at one time have only one HDC associated with it.

The following flags in @mask are handled:

If %GDK_GC_FOREGROUND is set in @mask, a solid brush of the
foreground color in @gc is selected into the HDC. The text color of
the HDC is also set. If the @drawable has a palette (256-color
mode), the palette is selected and realized.

If any of the line attribute flags (%GDK_GC_LINE_WIDTH,
%GDK_GC_LINE_STYLE, %GDK_GC_CAP_STYLE and %GDK_GC_JOIN_STYLE) is
set in @mask, a solid pen of the foreground color and appropriate
width and stule is created and selected into the HDC. Note that the
dash properties are not completely implemented.

If the %GDK_GC_FONT flag is set, the background mix mode is set to
%TRANSPARENT. and the text alignment is set to
%TA_BASELINE|%TA_LEFT. Note that no font gets selected into the HDC
by this function.

Some things are done regardless of @mask: If the function in @gc is
any other than %GDK_COPY, the raster operation of the HDC is
set. If @gc has a clip mask, the clip region of the HDC is set.

Note that the fill style, tile, stipple, and tile and stipple
origins in the @gc are ignored by this function. (In general, tiles
and stipples can&apos;t be implemented directly on Win32; you need to do
multiple pass drawing and blitting to implement tiles or
stipples. GDK does just that when you call the GDK drawing
functions with a GC that asks for tiles or stipples.)

When the HDC is no longer used, it should be released by calling
&amp;lt;function&amp;gt;gdk_win32_hdc_release()&amp;lt;/function&amp;gt; with the same
parameters.

If you modify the HDC by calling &amp;lt;function&amp;gt;SelectObject&amp;lt;/function&amp;gt;
you should undo those modifications before calling
&amp;lt;function&amp;gt;gdk_win32_hdc_release()&amp;lt;/function&amp;gt;.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> destination #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> #GdkGC to use for drawing on @drawable
</parameter_description>
</parameter>
<parameter name="usage">
<parameter_description> mask indicating what properties needs to be set up
</parameter_description>
</parameter>
</parameters>
<return> The HDC.
</return>
</function>

<function name="gdk_window_begin_resize_drag">
<description>
Begins a window resize operation (for a toplevel window).
You might use this function to implement a &quot;window resize grip,&quot; for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the Extended Window Manager Hints spec
(see http://www.freedesktop.org), but has a fallback implementation
for other window managers.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge or corner from which the drag is started
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag (use gdk_event_get_time())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_get_xatom_by_name">
<description>
Returns the X atom for GDK&apos;s default display corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than &amp;lt;function&amp;gt;XInternAtom()&amp;lt;/function&amp;gt;, which is a round trip to 
the server each time.


</description>
<parameters>
<parameter name="atom_name">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a X atom for GDK&apos;s default display.
</return>
</function>

<function name="gdk_cursor_get_display">
<description>
Returns the display on which the #GdkCursor is defined.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated to @cursor

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_loader_write">
<description>
This will cause a pixbuf loader to parse the next @count bytes of
an image.  It will return %TRUE if the data was loaded successfully,
and %FALSE if an error occurred.  In the latter case, the loader
will be closed, and will not accept further writes. If %FALSE is
returned, @error will be set to an error from the #GDK_PIXBUF_ERROR
or #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> Pointer to image data.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> Length of the @buf buffer in bytes.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for errors
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the write was successful, or %FALSE if the loader
cannot parse the buffer.
</return>
</function>

<function name="gdk_draw_image">
<description>
Draws a #GdkImage onto a drawable.
The depth of the #GdkImage must match the depth of the #GdkDrawable.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> the #GdkImage to draw.
</parameter_description>
</parameter>
<parameter name="xsrc">
<parameter_description> the left edge of the source rectangle within @image.
</parameter_description>
</parameter>
<parameter name="ysrc">
<parameter_description> the top of the source rectangle within @image.
</parameter_description>
</parameter>
<parameter name="xdest">
<parameter_description> the x coordinate of the destination within @drawable.
</parameter_description>
</parameter>
<parameter name="ydest">
<parameter_description> the y coordinate of the destination within @drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the area to be copied, or -1 to make the area 
extend to the right edge of @image.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the area to be copied, or -1 to make the area 
extend to the bottom edge of @image.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gdk_windowing_substitute_screen_number">
<description>
Modifies a @display_name to make @screen_number the default
screen when the display is opened.


</description>
<parameters>
<parameter name="display_name">
<parameter_description> The name of a display, in the form used by 
gdk_display_open (). If %NULL a default value
will be used. On X11, this is derived from the DISPLAY
environment variable.
</parameter_description>
</parameter>
<parameter name="screen_number">
<parameter_description> The number of a screen within the display
referred to by @display_name.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string holding the resulting
display name. Free with g_free().
</return>
</function>

<function name="gdk_event_peek">
<description>
If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().


</description>
<parameters>
</parameters>
<return> a copy of the first #GdkEvent on some event queue, or %NULL if no
events are in any queues. The returned #GdkEvent should be freed with
gdk_event_free().
</return>
</function>

<function name="gdk_window_maximize">
<description>
Maximizes the window. If the window was already maximized, then
this function does nothing.

On X11, asks the window manager to maximize @window, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don&apos;t have a concept of
&quot;maximized&quot;; so you can&apos;t rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

On Windows, reliably maximizes the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_from_pixdata">
<description>
Converts a #GdkPixdata to a #GdkPixbuf. If @copy_pixels is %TRUE or
if the pixel data is run-length-encoded, the pixel data is copied into
newly-allocated memory; otherwise it is reused.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to convert into a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="copy_pixels">
<parameter_description> whether to copy raw pixel data; run-length encoded
pixel data is always copied.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store possible errors.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkPixbuf.
</return>
</function>

<function name="gdk_pixbuf_composite_color_simple">
<description>
Creates a new #GdkPixbuf by scaling @src to @dest_width x
@dest_height and compositing the result with a checkboard of colors
@color1 and @color2.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of destination image
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of destination image
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
<parameter name="check_size">
<parameter_description> the size of checks in the checkboard (must be a power of two)
</parameter_description>
</parameter>
<parameter name="color1">
<parameter_description> the color of check at upper left
</parameter_description>
</parameter>
<parameter name="color2">
<parameter_description> the color of the other check
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkPixbuf, or %NULL if not enough memory could be
allocated for it.
</return>
</function>

<function name="gdk_window_set_icon_name">
<description>
Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of window while iconified (minimized)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgb_get_colormap">
<description>
Get the preferred colormap for rendering image data.  Not a
very useful function; historically, GDK could only render RGB image
data to one colormap and visual, but in the current version it can
render to any colormap and visual. So there&apos;s no need to call this
function.


</description>
<parameters>
</parameters>
<return> the preferred colormap
</return>
</function>

<function name="gdk_colormap_get_visual">
<description>
Returns the visual for which a given colormap was created.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
</parameters>
<return> the visual of the colormap.
</return>
</function>

<function name="gdk_window_is_viewable">
<description>
Check if the window and all ancestors of the window are
mapped. (This is not necessarily &quot;viewable&quot; in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is viewable
</return>
</function>

<function name="gdk_string_to_compound_text_for_display">
<description>
Convert a string from the encoding of the current 
locale into a form suitable for storing in a window property.


</description>
<parameters>
<parameter name="display">
<parameter_description>  the #GdkDisplay where the encoding is defined.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description>      a nul-terminated string.
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store the encoding atom 
(to be used as the type for the property).
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   location to store the format of the property
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description>    location to store newly allocated data for the property.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
</parameters>
<return> 0 upon sucess, non-zero upon failure. 

Since: 2.2
</return>
</function>

<function name="gdk_drawable_get_colormap">
<description>
Gets the colormap for @drawable, if one is set; returns
%NULL otherwise.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the colormap, or %NULL
</return>
</function>

<function name="gdk_image_unref">
<description>
Deprecated function; use g_object_unref() instead.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_height_mm">
<description>
Returns the height of @screen in millimeters. 
Note that on some X servers this value will not be correct.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the heigth of @screen in pixels.

Since: 2.2
</return>
</function>

<function name="gdk_window_get_events">
<description>
Gets the event mask for @window. See gdk_window_set_events().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> event mask for @window
</return>
</function>

<function name="gdk_window_set_transient_for">
<description>
Indicates to the window manager that @window is a transient dialog
associated with the application window @parent. This allows the
window manager to do things like center @window on @parent and
keep @window above @parent.

See gtk_window_set_transient_for() if you&apos;re using #GtkWindow or
#GtkDialog.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> another toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_destroy">
<description>
Destroys the window system resources associated with @window and decrements @window&apos;s
reference count. The window system resources for all children of @window are also
destroyed, but the children&apos;s reference counts are not decremented.

Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_motion">
<description>
Updates the drag context when the pointer moves or the 
set of actions changes.

This function is called by the drag source.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> the new destination window, obtained by 
gdk_drag_find_window().
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the DND protocol in use, obtained by gdk_drag_find_window().
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="suggested_action">
<parameter_description> the suggested action.
</parameter_description>
</parameter>
<parameter name="possible_actions">
<parameter_description> the possible actions.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return> FIXME
</return>
</function>

<function name="gdk_screen_get_monitor_at_point">
<description>
Returns the monitor number in which the point (@x,@y) is located.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate in the virtual screen.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate in the virtual screen.
</parameter_description>
</parameter>
</parameters>
<return> the monitor number in which the point (@x,@y) lies, or
a monitor close to (@x,@y) if the point is not in any monitor.

Since: 2.2
</return>
</function>

<function name="gdk_window_lower">
<description>
Lowers @window to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above @window.
This is true whether or not the other windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_lower() only
requests the restack, does not guarantee it.

Note that gdk_window_show() raises the window again, so don&apos;t call this
function before gdk_window_show(). (Try gdk_window_show_unraised().)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_modal_hint">
<description>
The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.

You should only use this on windows for which you have
previously called #gdk_window_set_transient_for()

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> TRUE if the window is modal, FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_get_protocol_for_display">
<description>
Finds out the DND protocol supported by a window.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the destination window resides
</parameter_description>
</parameter>
<parameter name="xid">
<parameter_description> the X id of the destination window.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location where the supported DND protocol is returned.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the X id of the window where the drop should happen. This 
may be @xid or the X id of a proxy window, or None if @xid doesn&apos;t
support Drag and Drop.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_layout_line_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the same
position you would pass to gdk_draw_layout_line(). @index_ranges
should contain ranges of bytes in the layout&apos;s text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.


</description>
<parameters>
<parameter name="line">
<parameter_description> a #PangoLayoutLine 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> baseline pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_window_invalidate_maybe_recurse">
<description>
Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &quot;dirty region.&quot; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there&apos;s no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @child_func parameter controls whether the region of
each child window that intersects @region will also be invalidated.
Only children for which @child_func returns TRUE will have the area
invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="child_func">
<parameter_description> function to use to decide if to recurse to a child,
%NULL means never recurse.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to @child_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_font_ref">
<description>
Increases the reference count of a font by one.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
</parameters>
<return> @font
</return>
</function>

<function name="gdk_keyboard_grab_info_libgtk_only">
<description>
Determines information about the current keyboard grab.
This is not public API and must not be used by applications.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display for which to get the grab information
</parameter_description>
</parameter>
<parameter name="grab_window">
<parameter_description> location to store current grab window
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> location to store boolean indicating whether
the @owner_events flag to gdk_keyboard_grab() was %TRUE.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this application currently has the
keyboard grabbed.
</return>
</function>

<function name="gdk_string_width">
<description>
Determines the width of a nul-terminated string.
(The distance from the origin of the string to the 
point where the next string in a sequence of strings
should be drawn)


</description>
<parameters>
<parameter name="font">
<parameter_description>  a #GdkFont
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure
</parameter_description>
</parameter>
</parameters>
<return> the width of the string in pixels.
</return>
</function>

<function name="gdk_screen_get_width_mm">
<description>
Gets the width of @screen in millimeters. 
Note that on some X servers this value will not be correct.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the width of @screen in pixels.

Since: 2.2
</return>
</function>

<function name="gdk_pixmap_lookup">
<description>
Looks up the #GdkPixmap that wraps the given native pixmap handle.

For example in the X backend, a native pixmap handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native window,
or %NULL if there is none.
</return>
</function>

<function name="gdk_region_union_with_rect">
<description>
Sets the area of @region to the union of the areas of @region and
@rect. The resulting area is the set of pixels contained in
either @region or @rect.

</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion.
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> a #GdkRectangle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_layout_line">
<description>
Render a #PangoLayoutLine onto an GDK drawable

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw the line
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the x position of start of string (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the y position of baseline (in pixels)
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>      a #PangoLayoutLine
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_end_paint">
<description>
Indicates that the backing store created by the most recent call to
gdk_window_begin_paint_region() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
gdk_window_begin_paint_region() for full details. It is an error to
call this function without a matching
gdk_window_begin_paint_region() first.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_set_rgb_bg_color">
<description>
Set the background color of a GC using an unallocated color. The
pixel value for the color will be determined using GdkRGB. If the
colormap for the GC has not previously been initialized for GdkRGB,
then for pseudo-color colormaps (colormaps with a small modifiable
number of colors), a colorcube will be allocated in the colormap.

Calling this function for a GC without a colormap is an error.

</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> an unallocated #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move">
<description>
Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.

If you&apos;re also planning to resize the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate relative to window&apos;s parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate relative to window&apos;s parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_unref">
<description>
Removes a reference from an animation. 

Deprecated: Use g_object_unref().

</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_translate_keyboard_state">
<description>

Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
@consumed_modifiers.  See gdk_keyval_get_keys() for an explanation of
groups and levels.  The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
@state. For convenience, #GdkEventKey already contains the translated
keyval, so this function isn&apos;t as useful as you might think.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap, or %NULL to use the default
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a modifier state 
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> active keyboard group
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return location for keyval
</parameter_description>
</parameter>
<parameter name="effective_group">
<parameter_description> return location for effective group
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> return location for level
</parameter_description>
</parameter>
<parameter name="consumed_modifiers">
<parameter_description> return location for modifiers that were used to determine the group or level
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a keyval bound to the keycode/state/group
</return>
</function>

<function name="gdk_pixbuf_copy_area">
<description>
Copies a rectangular area from @src_pixbuf to @dest_pixbuf.  Conversion of
pixbuf formats is done automatically.

</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> Source pixbuf.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within @src_pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within @src_pixbuf.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of the area to copy.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of the area to copy.
</parameter_description>
</parameter>
<parameter name="dest_pixbuf">
<parameter_description> Destination pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> X coordinate within @dest_pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Y coordinate within @dest_pixbuf.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_context_new">
<description>
Creates a new #GdkDragContext.


</description>
<parameters>
</parameters>
<return> the newly created #GdkDragContext.
</return>
</function>

<function name="gdk_font_from_description">
<description>
Load a #GdkFont based on a Pango font description. This font will
only be an approximation of the Pango font, and
internationalization will not be handled correctly. This function
should only be used for legacy code that cannot be easily converted
to use Pango. Using Pango directly will produce better results.


</description>
<parameters>
<parameter name="font_desc">
<parameter_description> a #PangoFontDescription.
</parameter_description>
</parameter>
</parameters>
<return> the newly loaded font, or %NULL if the font
cannot be loaded.
</return>
</function>

<function name="gdk_display_manager_get_default_display">
<description>
Gets the default #GdkDisplay. 


</description>
<parameters>
<parameter name="display_manager">
<parameter_description> a #GdkDisplayManager 
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL if there is no default
display.

Since: 2.2
</return>
</function>

<function name="gdk_draw_text_wc">
<description>
Draws a number of wide characters using the given font of fontset.
If the font is a 1-byte font, the string is converted into 1-byte 
characters (discarding the high bytes) before output.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the text.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the baseline of the text.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the wide characters to draw.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the number of characters to draw.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_ref">
<description>
Adds a reference to an animation. 


</description>
<parameters>
<parameter name="animation">
<parameter_description> An animation.
</parameter_description>
</parameter>
</parameters>
<return> The same as the @animation argument.

Deprecated: Use g_object_ref(). 
</return>
</function>

<function name="gdk_drop_finish">
<description>
Ends the drag operation after a drop.

This function is called by the drag destination.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkDragContext.
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> %TRUE if the data was successfully received.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_drawable">
<description>
Copies the @width x @height region of @src at coordinates (@xsrc,
@ysrc) to coordinates (@xdest, @ydest) in @drawable.
@width and/or @height may be given as -1, in which case the entire
@src drawable will be copied.

Most fields in @gc are not used for this operation, but notably the
clip mask or clip region will be honored.

The source and destination drawables must have the same visual and
colormap, or errors will result. (On X11, failure to match
visual/colormap results in a BadMatch error from the X server.)
A common cause of this problem is an attempt to draw a bitmap to
a color drawable. The way to draw a bitmap is to set the
bitmap as a clip mask on your #GdkGC, then use gdk_draw_rectangle()
to draw a rectangle clipped to the bitmap.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC sharing the drawable&apos;s visual and colormap
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> another #GdkDrawable
</parameter_description>
</parameter>
<parameter name="xsrc">
<parameter_description> X position in @src of rectangle to draw
</parameter_description>
</parameter>
<parameter name="ysrc">
<parameter_description> Y position in @src of rectangle to draw
</parameter_description>
</parameter>
<parameter name="xdest">
<parameter_description> X position in @drawable where the rectangle should be drawn
</parameter_description>
</parameter>
<parameter name="ydest">
<parameter_description> Y position in @drawable where the rectangle should be drawn
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of rectangle to draw, or -1 for entire @src width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of rectangle to draw, or -1 for entire @src height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_get_width">
<description>
Queries the width of a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Width in pixels.
</return>
</function>

<function name="gdk_window_process_all_updates">
<description>
Calls gdk_window_process_updates() for all windows (see #GdkWindow)
in the application.


</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_window_deiconify">
<description>
Attempt to deiconify (unminimize) @window. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
you probably want to use gtk_window_present(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_width_mm">
<description>
Returns the width of the default screen in millimeters.
Note that on many X servers this value will not be correct.


</description>
<parameters>
</parameters>
<return> the width of the default screen in millimeters,
though it is not always correct.
</return>
</function>

<function name="gdk_x11_visual_get_xvisual">
<description>
Returns the X visual belonging to a #GdkVisual.


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Visual*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_window_set_skip_pager_hint">
<description>
Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window&apos;s semantic type as specified with gdk_window_set_type_hint()
already fully describes the window, this function should NOT be
called in addition, instead you should allow the window to be
treated according to standard policy for its semantic type.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="skips_pager">
<parameter_description> %TRUE to skip the pager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_get_display_arg_name">
<description>
Gets the display name specified in the command line arguments passed
to gdk_init() or gdk_parse_args(), if any.


</description>
<parameters>
</parameters>
<return> the display name, if specified explicitely, otherwise %NULL
this string is owned by GTK+ and must not be modified or freed.

Since: 2.2
</return>
</function>

<function name="gdk_display_set_pointer_hooks">
<description>
This function allows for hooking into the operation
of getting the current location of the pointer on a particular
display. This is only useful for such low-level tools as an
event recorder. Applications should never have any
reason to use this facility.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="new_hooks">
<parameter_description> a table of pointers to functions for getting
quantities related to the current pointer position,
or %NULL to restore the default table.
</parameter_description>
</parameter>
</parameters>
<return> the previous pointer hook table

Since: 2.2
</return>
</function>

<function name="gdk_region_get_rectangles">
<description>
Obtains the area covered by the region as a list of rectangles.
The array returned in @rectangles must be freed with g_free().


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="rectangles">
<parameter_description> return location for an array of rectangles
</parameter_description>
</parameter>
<parameter name="n_rectangles">
<parameter_description> length of returned array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_get_system_size">
<description>
Returns the size of the system&apos;s default colormap.
(See the description of struct #GdkColormap for an
explanation of the size of a colormap.)


</description>
<parameters>
</parameters>
<return> the size of the system&apos;s default colormap.
</return>
</function>

<function name="_gdk_xgrab_check_destroy">
<description>
Checks to see if window is the current grab window, and if
so, clear the current grab window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_color_change">
<description>
Changes the value of a color that has already
been allocated. If @colormap is not a private
colormap, then the color must have been allocated
using gdk_colormap_alloc_colors() with the 
@writeable set to %TRUE.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor, with the color to change
in the &amp;lt;structfield&amp;gt;pixel&amp;lt;/structfield&amp;gt; field,
and the new value in the remaining fields.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the color was successfully changed.
</return>
</function>

<function name="gdk_screen_get_rgb_visual">
<description>
Gets a &quot;preferred visual&quot; chosen by GdkRGB for rendering image data
on @screen. In previous versions of
GDK, this was the only visual GdkRGB could use for rendering. In
current versions, it&apos;s simply the visual GdkRGB would have chosen as 
the optimal one in those previous versions. GdkRGB can now render to 
drawables with any visual.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> The #GdkVisual chosen by GdkRGB.

Since: 2.2
</return>
</function>

<function name="gdk_x11_display_ungrab">
<description>
Ungrab @display after it has been grabbed with 
gdk_x11_display_grab(). 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_fill">
<description>
Clears a pixbuf to the given RGBA value, converting the RGBA value into
the pixbuf&apos;s pixel format. The alpha will be ignored if the pixbuf
doesn&apos;t have an alpha channel.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="pixel">
<parameter_description> RGBA pixel to clear to
(0xffffffff is opaque white, 0x00000000 transparent black)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_context_get_for_screen">
<description>
Creates a #PangoContext for @screen.

The context must be freed when you&apos;re finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.


</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen for which the context is to be created.
</parameter_description>
</parameter>
</parameters>
<return> a new #PangoContext for @screen

Since: 2.2
</return>
</function>

<function name="gdk_window_get_children">
<description>
Gets the list of children of @window known to GDK.
This function only returns children created via GDK,
so for example it&apos;s useless when used with the root window;
it only returns windows an application created itself.

The returned list must be freed, but the elements in the
list need not be.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> list of child windows inside @window
</return>
</function>

<function name="gdk_drag_get_protocol">
<description>
Finds out the DND protocol supported by a window.


</description>
<parameters>
<parameter name="xid">
<parameter_description> the X id of the destination window.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location where the supported DND protocol is returned.
</parameter_description>
</parameter>
</parameters>
<return> the X id of the window where the drop should happen. This 
may be @xid or the X id of a proxy window, or None if @xid doesn&apos;t
support Drag and Drop.
</return>
</function>

<function name="gdk_xid_table_lookup_for_display">
<description>
Returns the GDK object associated with the given X id.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="xid">
<parameter_description> an X id.
</parameter_description>
</parameter>
</parameters>
<return> a GDK object associated with the given X id.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_add_alpha">
<description>
Takes an existing pixbuf and adds an alpha channel to it.
If the existing pixbuf already had an alpha channel, the channel
values are copied from the original; otherwise, the alpha channel
is initialized to 255 (full opacity).

If @substitute_color is %TRUE, then the color specified by (@r, @g, @b) will be
assigned zero opacity. That is, if you pass (255, 255, 255) for the
substitute color, all white pixels will become fully transparent.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="substitute_color">
<parameter_description> Whether to set a color to zero opacity.  If this
is %FALSE, then the (@r, @g, @b) arguments will be ignored.
</parameter_description>
</parameter>
<parameter name="r">
<parameter_description> Red value to substitute.
</parameter_description>
</parameter>
<parameter name="g">
<parameter_description> Green value to substitute.
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Blue value to substitute.
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference count of 1.
</return>
</function>

<function name="gdk_image_ref">
<description>
Deprecated function; use g_object_ref() instead.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> the image
</return>
</function>

<function name="gdk_drag_begin">
<description>
Starts a drag and creates a new drag context for it.

This function is called by the drag source.


</description>
<parameters>
<parameter name="window">
<parameter_description> the source window for this drag.
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the list of offered targets.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GdkDragContext.
</return>
</function>

<function name="gdk_pixmap_foreign_new">
<description>
Wraps a native window for the default display in a #GdkPixmap.
This may fail if the pixmap has been destroyed.

For example in the X backend, a native pixmap handle is an Xlib
&amp;lt;type&amp;gt;XID&amp;lt;/type&amp;gt;.


</description>
<parameters>
<parameter name="anid">
<parameter_description> a native pixmap handle.
</parameter_description>
</parameter>
</parameters>
<return> the newly-created #GdkPixmap wrapper for the 
native pixmap or %NULL if the pixmap has been destroyed.
</return>
</function>

<function name="gdk_gc_set_values">
<description>
Sets attributes of a graphics context in bulk. For each flag set in
@values_mask, the corresponding field will be read from @values and
set as the new value for @gc. If you&apos;re only setting a few values
on @gc, calling individual &quot;setter&quot; functions is likely more
convenient.


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="values">
<parameter_description> struct containing the new values
</parameter_description>
</parameter>
<parameter name="values_mask">
<parameter_description> mask indicating which struct fields are to be used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_remove_filter">
<description>
Remove a filter previously added with gdk_window_add_filter().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> previously-added filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data for previously-added filter function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_get_coords">
<description>
Extract the event window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_win">
<parameter_description> location to put event window x coordinate
</parameter_description>
</parameter>
<parameter name="y_win">
<parameter_description> location to put event window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered event window coordinates
</return>
</function>

<function name="gdk_event_send_clientmessage_toall">
<description>
Sends an X ClientMessage event to all toplevel windows on the default
#GdkScreen.

Toplevel windows are determined by checking for the WM_STATE property, as
described in the Inter-Client Communication Conventions Manual (ICCCM).
If no windows are found with the WM_STATE property set, the message is sent
to all children of the root window.

</description>
<parameters>
<parameter name="event">
<parameter_description> the #GdkEvent to send, which should be a #GdkEventClient.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_gc_get_xdisplay">
<description>
Returns the display of a #GdkGC.


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_draw_arc">
<description>
Draws an arc or a filled &apos;pie slice&apos;. The arc is defined by the bounding
rectangle of the entire ellipse, and the start and end angles of the part 
of the ellipse to be drawn.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="filled">
<parameter_description> %TRUE if the arc should be filled, producing a &apos;pie slice&apos;.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the top edge of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the bounding rectangle.
</parameter_description>
</parameter>
<parameter name="angle1">
<parameter_description> the start angle of the arc, relative to the 3 o&apos;clock position,
counter-clockwise, in 1/64ths of a degree.
</parameter_description>
</parameter>
<parameter name="angle2">
<parameter_description> the end angle of the arc, relative to @angle1, in 1/64ths 
of a degree.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_cursor_get_xdisplay">
<description>
Returns the display of a #GdkCursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_window_get_pointer">
<description>
Obtains the current pointer position and modifier state.
The position is given in coordinates relative to @window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of pointer
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate of pointer
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for modifier mask
</parameter_description>
</parameter>
</parameters>
<return> the window containing the pointer (as with
gdk_window_at_pointer()), or %NULL if the window containing the
pointer isn&apos;t known to GDK
</return>
</function>

<function name="gdk_pixbuf_render_to_drawable_alpha">
<description>
Renders a rectangular portion of a pixbuf to a drawable.  The destination
drawable must have a colormap. All windows have a colormap, however, pixmaps
only have colormap by default if they were created with a non-NULL window argument.
Otherwise a colormap must be set on them with gdk_drawable_set_colormap.

On older X servers, rendering pixbufs with an alpha channel involves round trips
to the X server, and may be somewhat slow.

This function is obsolete. Use gdk_draw_pixbuf() instead.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> Destination drawable.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinates within pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to render, in pixels, or -1 to use pixbuf width.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to render, in pixels, or -1 to use pixbuf height.
</parameter_description>
</parameter>
<parameter name="alpha_mode">
<parameter_description> Ignored. Present for backwards compatibility.
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Ignored. Present for backwards compatibility
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> Dithering mode for GdkRGB.
</parameter_description>
</parameter>
<parameter name="x_dither">
<parameter_description> X offset for dither.
</parameter_description>
</parameter>
<parameter name="y_dither">
<parameter_description> Y offset for dither.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_render_to_drawable">
<description>
Renders a rectangular portion of a pixbuf to a drawable while using the
specified GC.  This is done using GdkRGB, so the specified drawable must have
the GdkRGB visual and colormap.  Note that this function will ignore the
opacity information for images with an alpha channel; the GC must already
have the clipping mask set if you want transparent regions to show through.

For an explanation of dither offsets, see the GdkRGB documentation.  In
brief, the dither offset is important when re-rendering partial regions of an
image to a rendered version of the full image, or for when the offsets to a
base position change, as in scrolling.  The dither matrix has to be shifted
for consistent visual results.  If you do not have any of these cases, the
dither offsets can be both zero.

This function is obsolete. Use gdk_draw_pixbuf() instead.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="drawable">
<parameter_description> Destination drawable.
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> GC used for rendering.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within pixbuf.
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> Destination X coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> Destination Y coordinate within drawable.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width of region to render, in pixels, or -1 to use pixbuf width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height of region to render, in pixels, or -1 to use pixbuf height
</parameter_description>
</parameter>
<parameter name="dither">
<parameter_description> Dithering mode for GdkRGB.
</parameter_description>
</parameter>
<parameter name="x_dither">
<parameter_description> X offset for dither.
</parameter_description>
</parameter>
<parameter name="y_dither">
<parameter_description> Y offset for dither.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_get_default_root_window">
<description>
Obtains the root window (parent all other windows are inside)
for the default display and screen.


</description>
<parameters>
</parameters>
<return> the default root window
</return>
</function>

<function name="_gdk_x11_display_screen_for_xrootwin">
<description>
Given the root window ID of one of the screen&apos;s of a #GdkDisplay,
finds the screen.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #Display
</parameter_description>
</parameter>
<parameter name="xrootwin">
<parameter_description> window ID for one of of the screen&apos;s of the display.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen corresponding to @xrootwin, or %NULL.
</return>
</function>

<function name="gdk_pixbuf_save">
<description>
Saves pixbuf to a file in @type, which is currently &quot;jpeg&quot; or
&quot;png&quot;.  If @error is set, %FALSE will be returned. Possible errors include 
those in the #GDK_PIXBUF_ERROR domain and those in the #G_FILE_ERROR domain.

The variable argument list should be %NULL-terminated; if not empty,
it should contain pairs of strings that modify the save
parameters. For example:
&amp;lt;informalexample&amp;gt;&amp;lt;programlisting&amp;gt;
gdk_pixbuf_save (pixbuf, handle, &quot;jpeg&quot;, &amp;amp;error,
&quot;quality&quot;, &quot;100&quot;, NULL);
&amp;lt;/programlisting&amp;gt;&amp;lt;/informalexample&amp;gt;

Currently only few parameters exist. JPEG images can be saved with a 
&quot;quality&quot; parameter; its value should be in the range [0,100]. 
Text chunks can be attached to PNG images by specifying parameters of
the form &quot;tEXt::key&quot;, where key is an ASCII string of length 1-79.
The values are UTF-8 encoded strings. 


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf.
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> name of file to save.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> name of file format.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error, or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> list of key-value save options
</parameter_description>
</parameter>
</parameters>
<return> whether an error was set
</return>
</function>

<function name="gdk_draw_glyphs">
<description>
This is a low-level function; 99% of text rendering should be done
using gdk_draw_layout() instead.

A glyph is a character in a font. This function draws a sequence of
glyphs.  To obtain a sequence of glyphs you have to understand a
lot about internationalized text handling, which you don&apos;t want to
understand; thus, use gdk_draw_layout() instead of this function,
gdk_draw_layout() handles the details.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
<parameter name="font">
<parameter_description> font to be used
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of baseline origin
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of baseline origin
</parameter_description>
</parameter>
<parameter name="glyphs">
<parameter_description> glyphs to render
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_position">
<description>
Obtains the position of the window as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_window_get_geometry() which queries the X server for the
current window position, regardless of which events have been
received or processed.

The position coordinates are relative to the window&apos;s parent window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_rect">
<description>
A convenience wrapper around gdk_window_invalidate_region() which
invalidates a rectangular region. See
gdk_window_invalidate_region() for details.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to invalidate
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> whether to also invalidate child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_text_width">
<description>
Determines the width of a given string.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the width of the string in pixels.
</return>
</function>

<function name="gdk_drawable_set_colormap">
<description>
Sets the colormap associated with @drawable. Normally this will
happen automatically when the drawable is created; you only need to
use this function if the drawable-creating function did not have a
way to determine the colormap, and you then use drawable operations
that require a colormap. The colormap for all drawables and
graphics contexts you intend to use together should match. i.e.
when using a #GdkGC to draw to a drawable, or copying one drawable
to another, the colormaps should match.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_clear_area">
<description>
Clears an area of @window to the background color or background pixmap.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of rectangle to clear
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of rectangle to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drawable_get_display">
<description>
Gets the #GdkDisplay associated with a #GdkDrawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @drawable

Since: 2.2
</return>
</function>

<function name="gdk_gc_ref">
<description>
Deprecated function; use g_object_ref() instead.


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return> the gc.
</return>
</function>

<function name="gdk_draw_rectangle">
<description>
Draws a rectangular outline or filled rectangle, using the foreground color
and other attributes of the #GdkGC.

A rectangle drawn filled is 1 pixel smaller in both dimensions than a 
rectangle outlined. Calling 
&amp;lt;literal&amp;gt;gdk_draw_rectangle (window, gc, TRUE, 0, 0, 20, 20)&amp;lt;/literal&amp;gt; 
results in a filled rectangle 20 pixels wide and 20 pixels high. Calling
&amp;lt;literal&amp;gt;gdk_draw_rectangle (window, gc, FALSE, 0, 0, 20, 20)&amp;lt;/literal&amp;gt; 
results in an outlined rectangle with corners at (0, 0), (0, 20), (20, 20),
and (20, 0), which makes it 21 pixels wide and 21 pixels high.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="filled">
<parameter_description> %TRUE if the rectangle should be filled.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the left edge of the rectangle.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the top edge of the rectangle.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the rectangle.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the rectangle.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_group">
<description>
Sets the group leader window for @window. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.

The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.
The group leader window may not be changed after a window has been
mapped (with gdk_window_show() for example).


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="leader">
<parameter_description> group leader window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_window_at_pointer">
<description>
Obtains the window underneath the mouse pointer, returning the location
of that window in @win_x, @win_y for @screen. Returns %NULL if the window 
under the mouse pointer is not known to GDK (for example, belongs to
another application).


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="win_x">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
</parameters>
<return> the window under the mouse pointer, or %NULL

Since: 2.2
</return>
</function>

<function name="gdk_x11_grab_server">
<description>
Call gdk_x11_display_grab() on the default display. 
To ungrab the server again, use gdk_x11_ungrab_server(). 

gdk_x11_grab_server()/gdk_x11_ungrab_server() calls can be nested.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_keyval_convert_case">
<description>
Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_a, #GDK_Enter, #GDK_F1, etc.


</description>
<parameters>
<parameter name="symbol">
<parameter_description> a keyval
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> return location for lowercase version of @symbol
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> return location for uppercase version of @symbol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_point">
<description>
Draws a point, using the foreground color and other attributes of 
the #GdkGC.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the point.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the point.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_reparent">
<description>
Reparents @window into the given @new_parent. The window being
reparented will be unmapped as a side effect.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> new parent to move @window into
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X location inside the new parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y location inside the new parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_font_get_xdisplay">
<description>
Returns the display of a #GdkFont.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return>  an Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_string_extents">
<description>
Gets the metrics of a nul-terminated string.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the nul-terminated string to measure.
</parameter_description>
</parameter>
<parameter name="lbearing">
<parameter_description> the left bearing of the string.
</parameter_description>
</parameter>
<parameter name="rbearing">
<parameter_description> the right bearing of the string.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the string.
</parameter_description>
</parameter>
<parameter name="ascent">
<parameter_description> the ascent of the string.
</parameter_description>
</parameter>
<parameter name="descent">
<parameter_description> the descent of the string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_static_gravities">
<description>
Set the bit gravity of the given window to static, and flag it so
all children get static subwindow gravity. This is used if you are
implementing scary features that involve deep knowledge of the
windowing system. Don&apos;t worry about it unless you have to.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="use_static">
<parameter_description> %TRUE to turn on static gravity
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the server supports static gravity
</return>
</function>

<function name="gdk_pixbuf_format_get_mime_types">
<description>
Returns the mime types supported by the format.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of mime types.

Since: 2.2
</return>
</function>

<function name="gdk_colormap_alloc_color">
<description>
Allocates a single color from a colormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the color to allocate. On return the
&amp;lt;structfield&amp;gt;pixel&amp;lt;/structfield&amp;gt; field will be
filled in if allocation succeeds.
</parameter_description>
</parameter>
<parameter name="writeable">
<parameter_description> If %TRUE, the color is allocated writeable
(their values can later be changed using gdk_color_change()).
Writeable colors cannot be shared between applications.
</parameter_description>
</parameter>
<parameter name="best_match">
<parameter_description> If %TRUE, GDK will attempt to do matching against
existing colors if the color cannot be allocated as requested.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the allocation succeeded.
</return>
</function>

<function name="gdk_screen_set_default_colormap">
<description>
Sets the default @colormap for @screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_region_rectangle">
<description>
Creates a new region containing the area @rectangle.


</description>
<parameters>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return> a new region
</return>
</function>

<function name="gdk_text_extents">
<description>
Gets the metrics of a string.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in bytes. (If the
font is a 16-bit font, this is twice the length
of the text in characters.)
</parameter_description>
</parameter>
<parameter name="lbearing">
<parameter_description> the left bearing of the string.
</parameter_description>
</parameter>
<parameter name="rbearing">
<parameter_description> the right bearing of the string.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the string.
</parameter_description>
</parameter>
<parameter name="ascent">
<parameter_description> the ascent of the string.
</parameter_description>
</parameter>
<parameter name="descent">
<parameter_description> the descent of the string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_loader_set_size">
<description>
Causes the image to be scaled while it is loaded. The desired
image size can be determined relative to the original size of
the image by calling gdk_pixbuf_loader_set_size() from a
signal handler for the ::size_prepared signal.

Attempts to set the desired image size  are ignored after the 
emission of the ::size_prepared signal.

Since: 2.2

</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> The desired width of the image being loaded.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> The desired height of the image being loaded.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_format_get_description">
<description>
Returns a description of the format.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a description of the format. 

Since: 2.2
</return>
</function>

<function name="gdk_x11_screen_lookup_visual">
<description>
Looks up the #GdkVisual for a particular screen and X Visual ID.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="xvisualid">
<parameter_description> an X Visual ID.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkVisual (owned by the screen object), or %NULL
if the visual ID wasn&apos;t found.

Since: 2.2
</return>
</function>

<function name="gdk_screen_get_number">
<description>
Gets the index of @screen among the screens in the display
to which it belongs. (See gdk_screen_get_display())


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the index

Since: 2.2
</return>
</function>

<function name="gdk_win32_hdc_release">
<description>
This function deallocates the Windows device context allocated by
&amp;lt;funcion&amp;gt;gdk_win32_hdc_get()&amp;lt;/function&amp;gt;. It should be called with
the same parameters.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> destination #GdkDrawable
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> #GdkGC to use for drawing on @drawable
</parameter_description>
</parameter>
<parameter name="usage">
<parameter_description> mask indicating what properties were set up
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_reply">
<description>
Accepts or rejects a drop. 

This function is called by the drag destination in response
to a drop initiated by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
<parameter name="ok">
<parameter_description> %TRUE if the drop is accepted.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_add_filter">
<description>
Adds an event filter to @window, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you&apos;re
doing. Pass %NULL for @window to get all events for all windows,
instead of events for a specific window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> filter callback
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to filter callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_focus">
<description>
Sets keyboard focus to @window. If @window is not onscreen this
will not work. In most cases, gtk_window_present() should be used on
a #GtkWindow, rather than calling this function.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of the event triggering the window focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_segments">
<description>
Draws a number of unconnected lines.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="segs">
<parameter_description> an array of #GdkSegment structures specifying the start and 
end points of the lines to be drawn.
</parameter_description>
</parameter>
<parameter name="nsegs">
<parameter_description> the number of line segments to draw, i.e. the size of the 
@segs array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_clear_area_e">
<description>
Like gdk_window_clear_area(), but also generates an expose event for
the cleared area.

This function has a stupid name because it dates back to the mists
time, pre-GDK-1.0.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate of rectangle to clear
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of rectangle to clear
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of rectangle to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_fullscreen">
<description>
Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.

If the window was already fullscreen, then this function does nothing.

On X11, asks the window manager to put @window in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don&apos;t have a concept of &quot;fullscreen&quot;; so you can&apos;t rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_parse_args">
<description>
Parse command line arguments, and store for future
use by calls to gdk_display_open().

Any arguments used by GDK are removed from the array and @argc and @argv are
updated accordingly.

You shouldn&apos;t call this function explicitely if you are using
gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().

Since: 2.2

</description>
<parameters>
<parameter name="argc">
<parameter_description> the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgb_find_color">
<description>
@colormap should be the colormap for the graphics context and
drawable you&apos;re using to draw. If you&apos;re drawing to a #GtkWidget,
call gtk_widget_get_colormap().

@color should have its %red, %green, and %blue fields initialized;
gdk_rgb_find_color() will fill in the %pixel field with the best
matching pixel from a color cube. The color is then ready to be
used for drawing, e.g. you can call gdk_gc_set_foreground() which
expects %pixel to be initialized.

In many cases, you can avoid this whole issue by calling
gdk_gc_set_rgb_fg_color() or gdk_gc_set_rgb_bg_color(), which
do not expect %pixel to be initialized in advance. If you use those
functions, there&apos;s no need for gdk_rgb_find_color().


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_window_type">
<description>
Gets the type of the window. See #GdkWindowType.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> type of window
</return>
</function>

<function name="_gdk_drawable_copy_to_image">
<description>
Copies a portion of @drawable into the client side image structure
@image. If @image is %NULL, creates a new image of size @width x @height
and copies into that. See gdk_drawable_get_image() for further details.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="image">
<parameter_description> a #GdkDrawable, or %NULL if a new @image should be created.
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> x coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> y coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> x coordinate within @image. Must be 0 if @image is %NULL
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> y coordinate within @image. Must be 0 if @image is %NULL
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height or region to get
</parameter_description>
</parameter>
</parameters>
<return> @image, or a new a #GdkImage containing the contents
                 of @drawable
</return>
</function>

<function name="gdk_pixbuf_loader_get_animation">
<description>
Queries the #GdkPixbufAnimation that a pixbuf loader is currently creating.
In general it only makes sense to call this function after the &quot;area_prepared&quot;
signal has been emitted by the loader. If the loader doesn&apos;t have enough
bytes yet (hasn&apos;t emitted the &quot;area_prepared&quot; signal) this function will 
return %NULL.


</description>
<parameters>
<parameter name="loader">
<parameter_description> A pixbuf loader
</parameter_description>
</parameter>
</parameters>
<return> The #GdkPixbufAnimation that the loader is loading, or %NULL if
 not enough data has been read to determine the information.
</return>
</function>

<function name="gdk_font_load_for_display">
<description>
Loads a font for use on @display.

The font may be newly loaded or looked up the font in a cache. 
You should make no assumptions about the initial reference count.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="font_name">
<parameter_description> a XLFD describing the font to load.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a #GdkFont, or %NULL if the font could not be loaded.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_list_visuals">
<description>
Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you&apos;re finished with it.


</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> a list of visuals; the list must be freed, but not its 
contents

Since: 2.2
</return>
</function>

<function name="gdk_x11_font_get_xfont">
<description>
Returns the X font belonging to a #GdkFont.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;XFontStruct*&amp;lt;/type&amp;gt; or an &amp;lt;type&amp;gt;XFontSet&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_region_subtract">
<description>
Subtracts the area of @source2 from the area @source1. The resulting
area is the set of pixels contained in @source1 but not in @source2.

</description>
<parameters>
<parameter name="source1">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
<parameter name="source2">
<parameter_description> another #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_screen_get_window_manager_name">
<description>
Returns the name of the window manager for @screen. 


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen 
</parameter_description>
</parameter>
</parameters>
<return> the name of the window manager screen @screen, or 
&quot;unknown&quot; if the window manager is unknown. The string is owned by GDK
and should not be freed.

Since: 2.2
</return>
</function>

<function name="gdk_pixbuf_animation_get_static_image">
<description>
If an animation is really just a plain image (has only one frame),
this function returns that image. If the animation is an animation,
this function returns a reasonable thing to display as a static
unanimated image, which might be the first frame, or something more
sophisticated. If an animation hasn&apos;t loaded any frames yet, this
function will return %NULL.


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return> unanimated image representing the animation
</return>
</function>

<function name="gdk_drag_get_selection">
<description>
Returns the selection atom for the current source window.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return> the selection atom.
</return>
</function>

<function name="gdk_color_hash">
<description>
A hash function suitable for using for a hash
table that stores #GdkColor&apos;s.


</description>
<parameters>
<parameter name="colora">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return> The hash function appled to @colora
</return>
</function>

<function name="gdk_keymap_lookup_key">
<description>
Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap or %NULL to use the default keymap
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a #GdkKeymapKey with keycode, group, and level initialized
</parameter_description>
</parameter>
</parameters>
<return> a keyval, or 0 if none was mapped to the given @key
</return>
</function>

<function name="gdk_drawable_get_visual">
<description>
Gets the #GdkVisual describing the pixel format of @drawable.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> a #GdkVisual
</return>
</function>

<function name="gdk_pango_attr_embossed_new">
<description>
Creates a new attribute containing a embossed bitmap to be used when
rendering the text.


</description>
<parameters>
<parameter name="embossed">
<parameter_description> a bitmap to be set as embossed
</parameter_description>
</parameter>
</parameters>
<return> new #PangoAttribute
</return>
</function>

<function name="gdk_pixbuf_get_bits_per_sample">
<description>
Queries the number of bits per color sample in a pixbuf.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of bits per color sample.
</return>
</function>

<function name="gdk_display_keyboard_ungrab">
<description>
Release any keyboard grab

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g #GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_setting_get">
<description>
Obtains a desktop-wide setting, such as the double-click time,
for the default screen. See gdk_screen_get_setting().


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the setting.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting.
</parameter_description>
</parameter>
</parameters>
<return>: %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise.
</return>
</function>

<function name="gdk_net_wm_supports">
<description>
This function is specific to the X11 backend of GDK, and indicates
whether the window manager for the default screen supports a certain
hint from the Extended Window Manager Hints Specification. See
gdk_x11_screen_supports_net_wm_hint() for complete details.


</description>
<parameters>
<parameter name="property">
<parameter_description> a property atom.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window manager supports @property
</return>
</function>

<function name="gdk_color_equal">
<description>
Compares two colors. 


</description>
<parameters>
<parameter name="colora">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
<parameter name="colorb">
<parameter_description> another #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors compare equal
</return>
</function>

<function name="gdk_pixbuf_new_subpixbuf">
<description>
Creates a new pixbuf which represents a sub-region of
@src_pixbuf. The new pixbuf shares its pixels with the
original pixbuf, so writing to one affects both.
The new pixbuf holds a reference to @src_pixbuf, so
@src_pixbuf will not be finalized until the new pixbuf
is finalized.


</description>
<parameters>
<parameter name="src_pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> X coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Y coord in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region in @src_pixbuf
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of region in @src_pixbuf
</parameter_description>
</parameter>
</parameters>
<return> a new pixbuf 
</return>
</function>

<function name="gdk_window_scroll">
<description>
Scroll the contents of @window, both pixels and children, by the given
amount. @window itself does not move.  Portions of the window that the scroll
operation brings in from offscreen areas are invalidated. The invalidated
region may be bigger than what would strictly be necessary.  (For X11, a
minimum area will be invalidated if the window has no subwindows, or if the
edges of the window&apos;s parent do not extend beyond the edges of the window. In
other cases, a multi-step process is used to scroll the window which may
produce temporary visual artifacts and unnecessary invalidations.)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Amount to scroll in the X direction
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Amount to scroll in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdkx_visual_get">
<description>
Returns a #GdkVisual corresponding to a X visual. 


</description>
<parameters>
<parameter name="xvisualid">
<parameter_description> a X visual id.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkVisual.
</return>
</function>

<function name="gdk_screen_get_system_colormap">
<description>
Gets the system&apos;s default colormap for @screen


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the default colormap for @screen.

Since: 2.2
</return>
</function>

<function name="gdk_x11_xatom_to_atom_for_display">
<description>
Convert from an X atom for a #GdkDisplay to the corresponding
#GdkAtom.


</description>
<parameters>
<parameter name="display">
<parameter_description> A #GdkDisplay
</parameter_description>
</parameter>
<parameter name="xatom">
<parameter_description> an X atom 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdkAtom.

Since: 2.2
</return>
</function>

<function name="gdk_window_unmaximize">
<description>
Unmaximizes the window. If the window wasn&apos;t maximized, then this
function does nothing.

On X11, asks the window manager to unmaximize @window, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don&apos;t have a
concept of &quot;maximized&quot;; so you can&apos;t rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.

On Windows, reliably unmaximizes the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_draw_layout">
<description>
Render a #PangoLayout onto a GDK drawable

</description>
<parameters>
<parameter name="drawable">
<parameter_description>  the drawable on which to draw string
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description>        base graphics context to use
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>         the X position of the left of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>         the Y position of the top of the layout (in pixels)
</parameter_description>
</parameter>
<parameter name="layout">
<parameter_description>    a #PangoLayout
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_n_monitors">
<description>
Returns the number of monitors being part of the virtual screen


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> number of monitors part of the virtual screen or
0 if @screen is not in virtual screen mode.

Since: 2.2
</return>
</function>

<function name="gdk_window_process_updates">
<description>
Sends one or more expose events to @window. The areas in each 
expose event will cover the entire update area for the window (see
gdk_window_invalidate_region() for details). Normally GDK calls
gdk_window_process_all_updates() on your behalf, so there&apos;s no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="update_children">
<parameter_description> whether to also process updates for child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gdk_get_sm_client_id">
<description>
Gets the client ID set with gdk_set_sm_client_id(), if any.


</description>
<parameters>
</parameters>
<return> Session ID, or %NULL if gdk_set_sm_client_id()
has never been called.
</return>
</function>

<function name="gdk_screen_get_display">
<description>
Gets the display to which the @screen belongs.


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the display to which @screen belongs

Since: 2.2
</return>
</function>

<function name="gdk_list_visuals">
<description>
Lists the available visuals for the default screen.
(See gdk_screen_list_visuals())
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you&apos;re finished with it.


</description>
<parameters>
</parameters>
<return> a list of visuals; the list must be freed, but not its contents
</return>
</function>

<function name="gdk_selection_owner_set_for_display">
<description>
Sets the #GdkWindow @owner as the current owner of the selection @selection.


</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> a #GdkWindow or %NULL to indicate that the the owner for
the given should be unset.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom identifying a selection.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp to use when setting the selection. 
If this is older than the timestamp given last time the owner was 
set for the given selection, the request will be ignored.
</parameter_description>
</parameter>
<parameter name="send_event">
<parameter_description> if %TRUE, and the new owner is different from the current
owner, the current owner will be sent a SelectionClear event.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection owner was successfully changed to owner,
otherwise %FALSE. 

Since: 2.2
</return>
</function>

<function name="gdk_text_extents_wc">
<description>
Gets the metrics of a string of wide characters.

</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in character.
</parameter_description>
</parameter>
<parameter name="lbearing">
<parameter_description> the left bearing of the string.
</parameter_description>
</parameter>
<parameter name="rbearing">
<parameter_description> the right bearing of the string.
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the string.
</parameter_description>
</parameter>
<parameter name="ascent">
<parameter_description> the ascent of the string.
</parameter_description>
</parameter>
<parameter name="descent">
<parameter_description> the descent of the string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_colormap_get_screen">
<description>
Gets the screen for which this colormap was created.


</description>
<parameters>
<parameter name="cmap">
<parameter_description> a #GdkColormap
</parameter_description>
</parameter>
</parameters>
<return> the screen for which this colormap was created.

Since: 2.2
</return>
</function>

<function name="gdk_window_get_frame_extents">
<description>
Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use gdk_window_get_origin().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with bounding box of the window frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_render_pixmap_and_mask_for_colormap">
<description>
Creates a pixmap and a mask bitmap which are returned in the @pixmap_return
and @mask_return arguments, respectively, and renders a pixbuf and its
corresponding tresholded alpha mask to them.  This is merely a convenience
function; applications that need to render pixbufs with dither offsets or to
given drawables should use gdk_pixbuf_render_to_drawable_alpha() or
gdk_pixbuf_render_to_drawable(), and gdk_pixbuf_render_threshold_alpha().

The pixmap that is created uses the #GdkColormap specified by @colormap.
This colormap must match the colormap of the window where the pixmap
will eventually be used or an error will result.

If the pixbuf does not have an alpha channel, then *@mask_return will be set
to NULL.

</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
<parameter name="colormap">
<parameter_description> A #GdkColormap
</parameter_description>
</parameter>
<parameter name="pixmap_return">
<parameter_description> Location to store a pointer to the created pixmap,
or %NULL if the pixmap is not needed.
</parameter_description>
</parameter>
<parameter name="mask_return">
<parameter_description> Location to store a pointer to the created mask,
or %NULL if the mask is not needed.
</parameter_description>
</parameter>
<parameter name="alpha_threshold">
<parameter_description> Threshold value for opacity values.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_text_property_to_utf8_list">
<description>
Convert a text property in the giving encoding to
a list of UTF-8 strings. 


</description>
<parameters>
<parameter name="encoding">
<parameter_description> an atom representing the encoding of the text
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description>     the text to convert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description>     location to store the list of strings or %NULL. The
list should be freed with g_strfreev().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings in the resulting
list.
</return>
</function>

<function name="gdk_window_set_role">
<description>
When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.

The window manager and session manager use a window&apos;s role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn&apos;t matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> a string indicating its role
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_unicode_to_keyval">
<description>
Convert from a ISO10646 character to a key symbol.


</description>
<parameters>
<parameter name="wc">
<parameter_description> a ISO10646 encoded character
</parameter_description>
</parameter>
</parameters>
<return> the corresponding GDK key symbol, if one exists.
or, if there is no corresponding symbol, 
wc | 0x01000000
</return>
</function>

<function name="gdk_pixdata_to_csource">
<description>
Generates C source code suitable for compiling images directly 
into programs. 

GTK+ ships with a program called &amp;lt;command&amp;gt;gdk-pixbuf-csource&amp;lt;/command&amp;gt; 
which offers a cmdline interface to this functions.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata to convert to C source.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> used for naming generated data structures or macros.
</parameter_description>
</parameter>
<parameter name="dump_type">
<parameter_description> a #GdkPixdataDumpType determining the kind of C
source to be generated.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing the C source form
of @pixdata.
</return>
</function>

<function name="gdk_x11_atom_to_xatom">
<description>
Converts from a #GdkAtom to the X atom for the default GDK display
with the same string value.


</description>
<parameters>
<parameter name="atom">
<parameter_description> A #GdkAtom 
</parameter_description>
</parameter>
</parameters>
<return> the X atom corresponding to @atom.
</return>
</function>

<function name="gdk_get_show_events">
<description>
Gets whether event debugging output is enabled.


</description>
<parameters>
</parameters>
<return> %TRUE if event debugging output is enabled.
</return>
</function>

<function name="gdk_window_merge_child_shapes">
<description>
Merges the shape masks for any child windows into the
shape mask for @window. i.e. the union of all masks
for @window and its children will become the new mask
for @window. See gdk_window_shape_combine_mask().

This function is distinct from gdk_window_set_child_shapes()
because it includes @window&apos;s shape mask in the set of shapes to
be merged.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_screen">
<description>
Returns a screen object for one of the screens of the display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen_num">
<parameter_description> the screen number
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen object

Since: 2.2
</return>
</function>

<function name="gdk_window_at_pointer">
<description>
Obtains the window underneath the mouse pointer, returning the
location of that window in @win_x, @win_y. Returns %NULL if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a #GdkWindow hasn&apos;t been created
for it with gdk_window_foreign_new())

NOTE: For multihead-aware widgets or applications use
gdk_display_get_window_at_pointer() instead.


</description>
<parameters>
<parameter name="win_x">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
</parameters>
<return> window under the mouse pointer
</return>
</function>

<function name="gdk_event_get_state">
<description>
If the event contains a &quot;state&quot; field, puts that field in @state. Otherwise
stores an empty state (0). Returns %TRUE if there was a state field
in the event. @event may be %NULL, in which case it&apos;s treated
as if the event had no state field.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent or NULL
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> return location for state
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a state field in the event 
</return>
</function>

<function name="gdk_colormap_new">
<description>
Creates a new colormap for the given visual.


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual.
</parameter_description>
</parameter>
<parameter name="allocate">
<parameter_description> if %TRUE, the newly created colormap will be
a private colormap, and all colors in it will be
allocated for the applications use.
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkColormap.
</return>
</function>

<function name="gdk_draw_lines">
<description>
Draws a series of lines connecting the given points.
The way in which joins between lines are draw is determined by the
#GdkCapStyle value in the #GdkGC. This can be set with
gdk_gc_set_line_attributes().

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable (a #GdkWindow or a #GdkPixmap).
</parameter_description>
</parameter>
<parameter name="gc">
<parameter_description> a #GdkGC.
</parameter_description>
</parameter>
<parameter name="points">
<parameter_description> an array of #GdkPoint structures specifying the endpoints of the
</parameter_description>
</parameter>
<parameter name="npoints">
<parameter_description> the size of the @points array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_gc_get_colormap">
<description>
Retrieves the colormap for a given GC, if it exists.
A GC will have a colormap if the drawable for which it was created
has a colormap, or if a colormap was set explicitely with
gdk_gc_set_colormap.


</description>
<parameters>
<parameter name="gc">
<parameter_description> a #GdkGC
</parameter_description>
</parameter>
</parameters>
<return> 
</return>
</function>

<function name="gdk_x11_display_get_xdisplay">
<description>

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> an X display.
</parameter_description>
</parameter>
</parameters>
<return>the X display of a #GdkDisplay.

Since: 2.2
</return>
</function>

<function name="gdk_color_free">
<description>
Frees a color structure created with 
gdk_color_copy().

</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_peek_event">
<description>
Gets a copy of the first #GdkEvent in the @display&apos;s event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return> a copy of the first #GdkEvent on the event queue, or %NULL 
if no events are in the queue. The returned #GdkEvent should be freed with
gdk_event_free().

Since: 2.2
</return>
</function>

<function name="gdk_display_open">
<description>
Opens a display.

Since: 2.2

</description>
<parameters>
<parameter name="display_name">
<parameter_description> the name of the display to open
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a #GdkDisplay, or %NULL if the display
could not be opened.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_threads_init">
<description>
Initializes GDK so that it can be used from multiple threads
in conjunction with gdk_threads_enter() and gdk_threads_leave().
g_thread_init() must be called previous to this function.

This call must be made before any use of the main loop from
GTK+; to be safe, call it before gtk_init().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_animation_is_static_image">
<description>
If you load a file with gdk_pixbuf_animation_new_from_file() and it turns
out to be a plain, unanimated image, then this function will return
%TRUE. Use gdk_pixbuf_animation_get_static_image() to retrieve
the image.


</description>
<parameters>
<parameter name="animation">
<parameter_description> a #GdkPixbufAnimation
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the &quot;animation&quot; was really just an image
</return>
</function>

<function name="gdk_window_thaw_updates">
<description>
Thaws a window frozen with gdk_window_freeze_updates().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_toplevels">
<description>
Obtains a list of all toplevel windows known to GDK on the default
screen (see gdk_window_get_toplevels_for_screen()).
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.


</description>
<parameters>
</parameters>
<return> list of toplevel windows, free with g_list_free()
</return>
</function>

<function name="gdk_x11_get_xatom_name">
<description>
Returns the name of an X atom for GDK&apos;s default display. This
function is meant mainly for debugging, so for convenience, unlike
&amp;lt;function&amp;gt;XAtomName()&amp;lt;/function&amp;gt; and gdk_atom_name(), the result 
doesn&apos;t need to be freed. Also, this function will never return %NULL, 
even if @xatom is invalid.


</description>
<parameters>
<parameter name="xatom">
<parameter_description> an X atom for GDK&apos;s default display
</parameter_description>
</parameter>
</parameters>
<return> name of the X atom; this string is owned by GTK+,
so it shouldn&apos;t be modifed or freed. 
</return>
</function>

<function name="gdk_pixbuf_format_get_extensions">
<description>
Returns the filename extensions typically used for files in the 
given format.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GdkPixbufFormat
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of filename extensions.

Since: 2.2
</return>
</function>

<function name="gdk_char_width_wc">
<description>
Determines the width of a given wide character. (Encoded
in the wide-character encoding of the current locale).


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="character">
<parameter_description> the character to measure.
</parameter_description>
</parameter>
</parameters>
<return> the width of the character in pixels.
</return>
</function>

<function name="gdk_keymap_get_entries_for_keycode">
<description>
Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap or %NULL to use the default keymap
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return location for array of #GdkKeymapKey, or NULL
</parameter_description>
</parameter>
<parameter name="keyvals">
<parameter_description> return location for array of keyvals, or NULL
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> length of @keys and @keyvals
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there were any entries
</return>
</function>

<function name="gdk_pixbuf_composite">
<description>
Creates a transformation of the source image @src by scaling by
@scale_x and @scale_y then translating by @offset_x and @offset_y,
then composites the rectangle (@dest_x, @dest_y, @dest_width,
@dest_height) of the resulting image onto the destination image.

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GdkPixbuf into which to render the results
</parameter_description>
</parameter>
<parameter name="dest_x">
<parameter_description> the left coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_y">
<parameter_description> the top coordinate for region to render
</parameter_description>
</parameter>
<parameter name="dest_width">
<parameter_description> the width of the region to render
</parameter_description>
</parameter>
<parameter name="dest_height">
<parameter_description> the height of the region to render
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> the offset in the X direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> the offset in the Y direction (currently rounded to an integer)
</parameter_description>
</parameter>
<parameter name="scale_x">
<parameter_description> the scale factor in the X direction
</parameter_description>
</parameter>
<parameter name="scale_y">
<parameter_description> the scale factor in the Y direction
</parameter_description>
</parameter>
<parameter name="interp_type">
<parameter_description> the interpolation type for the transformation.
</parameter_description>
</parameter>
<parameter name="overall_alpha">
<parameter_description> overall alpha for source image (0..255)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_origin">
<description>
Obtains the position of a window in root window coordinates.
(Compare with gdk_window_get_position() and
gdk_window_get_geometry() which return the position of a window
relative to its parent window.)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> not meaningful, ignore
</return>
</function>

<function name="gdk_pixbuf_animation_new_from_file">
<description>
Creates a new animation by loading it from a file.  The file format is
detected automatically.  If the file&apos;s format does not support multi-frame
images, then an animation with a single frame will be created. Possible errors
are in the #GDK_PIXBUF_ERROR and #G_FILE_ERROR domains.


</description>
<parameters>
<parameter name="filename">
<parameter_description> Name of file to load.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for error
</parameter_description>
</parameter>
</parameters>
<return> A newly-created animation with a reference count of 1, or %NULL
if any of several error conditions ocurred:  the file could not be opened,
there was no loader for the file&apos;s format, there was not enough memory to
allocate the image buffer, or the image file contained invalid data.
</return>
</function>

<function name="gdk_drag_find_window_for_screen">
<description>
Finds the destination window and DND protocol to use at the
given pointer position. 

This function is called by the drag source to obtain the 
@dest_window and @protocol parameters for gdk_drag_motion().

Since: 2.2

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="drag_window">
<parameter_description> a window which may be at the pointer position, but
should be ignored, since it is put up by the drag source as an icon.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> the screen where the destination window is sought. 
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates.
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> location to store the destination window in.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location to store the DND protocol in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_color_parse">
<description>
Parses a textual specification of a color and fill in
the &amp;lt;structfield&amp;gt;red&amp;lt;/structfield&amp;gt;,
&amp;lt;structfield&amp;gt;green&amp;lt;/structfield&amp;gt;, and 
&amp;lt;structfield&amp;gt;blue&amp;lt;/structfield&amp;gt; fields of a 
#GdkColor structure. The color is &amp;lt;emphasis&amp;gt;not&amp;lt;/emphasis&amp;gt; 
allocated, you must call gdk_colormap_alloc_color() yourself.
The text string can be in any of the forms accepted
by &amp;lt;function&amp;gt;XParseColor&amp;lt;/function&amp;gt;; these include
name for a color from &amp;lt;filename&amp;gt;rgb.txt&amp;lt;/filename&amp;gt;, such as
&amp;lt;literal&amp;gt;DarkSlateGray&amp;lt;/literal&amp;gt;, or a hex specification
such as &amp;lt;literal&amp;gt;305050&amp;lt;/literal&amp;gt;.


</description>
<parameters>
<parameter name="spec">
<parameter_description> the string specifying the color.
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the #GdkColor to fill in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing succeeded.
</return>
</function>

<function name="gdk_x11_screen_get_screen_number">
<description>

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> the position of @screen among the screens of
its display.
</parameter_description>
</parameter>
</parameters>
<return>the index of a #GdkScreen.

Since: 2.2
</return>
</function>

<function name="gdk_visual_get_best_with_both">
<description>
Combines gdk_visual_get_best_with_depth() and gdk_visual_get_best_with_type().


</description>
<parameters>
<parameter name="depth">
<parameter_description> a bit depth
</parameter_description>
</parameter>
<parameter name="visual_type">
<parameter_description> a visual type
</parameter_description>
</parameter>
</parameters>
<return> best visual with both @depth and @visual_type, or %NULL if none
</return>
</function>

<function name="gdk_colormap_alloc_colors">
<description>
Allocates colors from a colormap.


</description>
<parameters>
<parameter name="colormap">
<parameter_description> a #GdkColormap.
</parameter_description>
</parameter>
<parameter name="colors">
<parameter_description> The color values to allocate. On return, the pixel
values for allocated colors will be filled in.
</parameter_description>
</parameter>
<parameter name="ncolors">
<parameter_description> The number of colors in @colors.
</parameter_description>
</parameter>
<parameter name="writeable">
<parameter_description> If %TRUE, the colors are allocated writeable
(their values can later be changed using gdk_color_change()).
Writeable colors cannot be shared between applications.
</parameter_description>
</parameter>
<parameter name="best_match">
<parameter_description> If %TRUE, GDK will attempt to do matching against
existing colors if the colors cannot be allocated as requested.
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> An array of length @ncolors. On return, this
indicates whether the corresponding color in @colors was
sucessfully allocated or not.
</parameter_description>
</parameter>
</parameters>
<return> The number of colors that were not sucessfully 
allocated.
</return>
</function>

<function name="gdk_pixdata_serialize">
<description>
Serializes a #GdkPixdata structure into a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a valid #GdkPixdata structure to serialize.
</parameter_description>
</parameter>
<parameter name="stream_length_p">
<parameter_description> location to store the resulting stream length in.
</parameter_description>
</parameter>
</parameters>
<return> A newly-allocated string containing the serialized
#GdkPixdata structure.
</return>
</function>

<function name="gdk_x11_get_default_xdisplay">
<description>
Gets the default GTK+ display.


</description>
<parameters>
</parameters>
<return> the Xlib &amp;lt;type&amp;gt;Display*&amp;lt;/type&amp;gt; for the display
specified in the &amp;lt;option&amp;gt;--display&amp;lt;/option&amp;gt; command line option 
or the &amp;lt;envar&amp;gt;DISPLAY&amp;lt;/envar&amp;gt; environment variable.
</return>
</function>

<function name="gdk_event_put">
<description>
Appends a copy of the given event onto the front of the event
queue for event-&amp;gt;any.window&apos;s display, or the default event
queue if event-&amp;gt;any.window is %NULL. See gdk_display_put_event().

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_decorations">
<description>
Returns the decorations set on the GdkWindow with #gdk_window_set_decorations

</description>
<parameters>
<parameter name="window">
<parameter_description> The toplevel #GdkWindow to get the decorations from
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> The window decorations will be written here
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the window has decorations set, FALSE otherwise.
</return>
</function>

<function name="gdk_colormap_get_system">
<description>
Gets the system&apos;s default colormap for the default screen. (See
gdk_colormap_get_system_for_screen ())


</description>
<parameters>
</parameters>
<return> the default colormap.
</return>
</function>

<function name="gdk_screen_get_width">
<description>
Gets the width of @screen in pixels


</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the width of @screen in pixels.

Since: 2.2
</return>
</function>

<function name="gdk_drawable_get_image">
<description>
A #GdkImage stores client-side image data (pixels). In contrast,
#GdkPixmap and #GdkWindow are server-side
objects. gdk_drawable_get_image() obtains the pixels from a
server-side drawable as a client-side #GdkImage.  The format of a
#GdkImage depends on the #GdkVisual of the current display, which
makes manipulating #GdkImage extremely difficult; therefore, in
most cases you should use gdk_pixbuf_get_from_drawable() instead of
this lower-level function. A #GdkPixbuf contains image data in a
canonicalized RGB format, rather than a display-dependent format.
Of course, there&apos;s a convenience vs. speed tradeoff here, so you&apos;ll
want to think about what makes sense for your application.

@x, @y, @width, and @height define the region of @drawable to
obtain as an image.

You would usually copy image data to the client side if you intend
to examine the values of individual pixels, for example to darken
an image or add a red tint. It would be prohibitively slow to
make a round-trip request to the windowing system for each pixel,
so instead you get all of them at once, modify them, then copy
them all back at once.

If the X server or other windowing system backend is on the local
machine, this function may use shared memory to avoid copying
the image data.

If the source drawable is a #GdkWindow and partially offscreen
or obscured, then the obscured portions of the returned image
will contain undefined data.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate on @drawable
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height or region to get
</parameter_description>
</parameter>
</parameters>
<return> a #GdkImage containing the contents of @drawable
</return>
</function>

<function name="gdk_visual_get_screen">
<description>
Gets the screen to which this visual belongs


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
</parameters>
<return> the screen to which this visual belongs.

Since: 2.2
</return>
</function>

<function name="_gdk_event_queue_remove_link">
<description>
Removes a specified list node from the event queue.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="node">
<parameter_description> node to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_lookup_xdisplay">
<description>
Find the #GdkDisplay corresponding to @display, if any exists.


</description>
<parameters>
<parameter name="xdisplay">
<parameter_description> a pointer to an X Display
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay, if found, otherwise %NULL.

Since: 2.2
</return>
</function>

<function name="gdk_devices_list">
<description>
Returns the list of available input devices for the default display.
The list is statically allocated and should not be freed.


</description>
<parameters>
</parameters>
<return> a list of #GdkDevice
</return>
</function>

<function name="gdk_text_width_wc">
<description>
Determines the width of a given wide-character string.


</description>
<parameters>
<parameter name="font">
<parameter_description> a #GdkFont
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to measure.
</parameter_description>
</parameter>
<parameter name="text_length">
<parameter_description> the length of the text in characters.
</parameter_description>
</parameter>
</parameters>
<return> the width of the string in pixels.
</return>
</function>

<function name="gdk_pixbuf_get_rowstride">
<description>
Queries the rowstride of a pixbuf, which is the number of bytes between rows.


</description>
<parameters>
<parameter name="pixbuf">
<parameter_description> A pixbuf.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes between rows.
</return>
</function>

<function name="gdk_drawable_ref">
<description>
Deprecated equivalent of calling g_object_ref() on @drawable.
(Drawables were not objects in previous versions of GDK.)


</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawable
</parameter_description>
</parameter>
</parameters>
<return> the same @drawable passed in
</return>
</function>

<function name="gdk_image_get_colormap">
<description>
Retrieves the colormap for a given image, if it exists.  An image
will have a colormap if the drawable from which it was created has
a colormap, or if a colormap was set explicitely with
gdk_image_set_colormap().


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GdkImage
</parameter_description>
</parameter>
</parameters>
<return> colormap for the image
</return>
</function>

<function name="gdk_drawable_get_visible_region">
<description>
Computes the region of a drawable that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.


</description>
<parameters>
<parameter name="drawable">
<parameter_description> 
</parameter_description>
</parameter>
</parameters>
<return> a #GdkRegion. This must be freed with gdk_region_destroy()
when you are done.
</return>
</function>

<function name="gdk_region_copy">
<description>
Copies @region, creating an identical new region.


</description>
<parameters>
<parameter name="region">
<parameter_description> a #GdkRegion
</parameter_description>
</parameter>
</parameters>
<return> a new region identical to @region
</return>
</function>

<function name="gdk_window_show">
<description>
Like gdk_window_show_unraised(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).

This function maps a window so it&apos;s visible onscreen. Its opposite
is gdk_window_hide().

When implementing a #GtkWidget, you should call this function on the widget&apos;s
#GdkWindow as part of the &quot;map&quot; method.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_gdk_window_destroy">
<description>
Internal function to destroy a window. Like gdk_window_destroy(),
but does not drop the reference count created by gdk_window_new().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="foreign_destroy">
<parameter_description> If TRUE, the window or a parent was destroyed by some
external agency. The window has already been destroyed and no
windowing system calls should be made. (This may never happen
for some windowing systems.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_get_time">
<description>
Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> time stamp field from @event
</return>
</function>

<function name="gdk_window_move_resize">
<description>
Equivalent to calling gdk_window_move() and gdk_window_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don&apos;t use gdk_window_move_resize().)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> new X position relative to window&apos;s parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> new Y position relative to window&apos;s parent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_user_data">
<description>
Retrieves the user data for @window, which is normally the widget
that @window belongs to. See gdk_window_set_user_data().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> return location for user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixdata_deserialize">
<description>
Deserializes (reconstruct) a #GdkPixdata structure from a byte stream.
The byte stream consists of a straightforward writeout of the
#GdkPixdata fields in network byte order, plus the @pixel_data
bytes the structure points to.
The @pixdata contents are reconstructed byte by byte and are checked
for validity. This function may fail with %GDK_PIXBUF_CORRUPT_IMAGE
or %GDK_PIXBUF_ERROR_UNKNOWN_TYPE.


</description>
<parameters>
<parameter name="pixdata">
<parameter_description> a #GdkPixdata structure to be filled in.
</parameter_description>
</parameter>
<parameter name="stream_length">
<parameter_description> length of the stream used for deserialization.
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> stream of bytes containing a serialized #GdkPixdata structure.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError location to indicate failures (maybe %NULL to ignore errors).
</parameter_description>
</parameter>
</parameters>
<return> Upon successful deserialization %TRUE is returned,
%FALSE otherwise.
</return>
</function>

<function name="gdk_x11_get_default_root_xwindow">
<description>
Gets the root window of the default screen 
(see gdk_x11_get_default_screen()).  


</description>
<parameters>
</parameters>
<return> an Xlib &amp;lt;type&amp;gt;Window&amp;lt;/type&amp;gt;.
</return>
</function>

<function name="gdk_fontset_load_for_display">
<description>
Loads a fontset for use on @display.

The fontset may be newly loaded or looked up in a cache. 
You should make no assumptions about the initial reference count.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="fontset_name">
<parameter_description> a comma-separated list of XLFDs describing
the component fonts of the fontset to load.
</parameter_description>
</parameter>
<parameter name="returns">
<parameter_description> a #GdkFont, or %NULL if the fontset could not be loaded.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pointer_ungrab">
<description>
Ungrabs the pointer, if it is grabbed by this application.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no 
timestamp is available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_type_hint">
<description>
The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.

The hint must be set before the window is mapped.

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> A hint of the function this window will have
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
