<root>
<signal name="GdkDevice::changed">
<description>
The ::changed signal is emitted either when the #GdkDevice
has changed the number of either axes or keys. For example
In X this will normally happen when the slave device routing
events through the master device changes (for example, user
switches from the USB mouse to a tablet), in that case the
master device will change to reflect the new slave device
axes and keys.

</description>
<parameters>
<parameter name="device">
<parameter_description> the #GdkDevice that changed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDeviceManager::device-added">
<description>
The ::device-added signal is emitted either when a new master
pointer is created, or when a slave (Hardware) input device
is plugged in.

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the newly added #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDeviceManager::device-changed">
<description>
The ::device-changed signal is emitted whenever a device
has changed in the hierarchy, either slave devices being
disconnected from their master device or connected to
another one, or master devices being added or removed
a slave device.

If a slave device is detached from all master devices
(gdk_device_get_associated_device() returns %NULL), its
#GdkDeviceType will change to %GDK_DEVICE_TYPE_FLOATING,
if it's attached, it will change to %GDK_DEVICE_TYPE_SLAVE.

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the #GdkDevice that changed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDeviceManager::device-removed">
<description>
The ::device-removed signal is emitted either when a master
pointer is removed, or when a slave (Hardware) input device
is unplugged.

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the just removed #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::closed">
<description>
The ::closed signal is emitted when the connection to the windowing
system for @display is closed.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="is_error">
<parameter_description> %TRUE if the display was closed due to an error
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplay::opened">
<description>
The ::opened signal is emitted when the connection to the windowing
system for @display is opened.

</description>
<parameters>
<parameter name="display">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkDisplayManager::display-opened">
<description>
The ::display-opened signal is emitted when a display is opened.

Since: 2.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> the opened display
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkKeymap::direction-changed">
<description>
The ::direction-changed signal gets emitted when the direction of
the keymap changes.

Since: 2.0

</description>
<parameters>
<parameter name="keymap">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkKeymap::keys-changed">
<description>
The ::keys-changed signal is emitted when the mapping represented by
@keymap changes.

Since: 2.2

</description>
<parameters>
<parameter name="keymap">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkKeymap::state-changed">
<description>
The ::state-changed signal is emitted when the state of the
keyboard changes, e.g when Caps Lock is turned on or off.
See gdk_keymap_get_caps_lock_state().

Since: 2.16

</description>
<parameters>
<parameter name="keymap">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkScreen::composited-changed">
<description>
The ::composited-changed signal is emitted when the composited
status of the screen changes

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkScreen::monitors-changed">
<description>
The ::monitors-changed signal is emitted when the number, size
or position of the monitors attached to the screen change. 

Only for X11 and OS X for now. A future implementation for Win32
may be a possibility.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkScreen::size-changed">
<description>
The ::size-changed signal is emitted when the pixel width or 
height of a screen changes.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkWindow::create-surface">
<description>
The ::create-surface signal is emitted when an offscreen window
needs its surface (re)created, which happens either when the the
window is first drawn to, or when the window is being
resized. The first signal handler that returns a non-%NULL
surface will stop any further signal emission, and its surface
will be used.

Note that it is not possible to access the window's previous
surface from within any callback of this signal. Calling
gdk_offscreen_window_get_surface() will lead to a crash.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> the offscreen window on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the offscreen surface to create
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the offscreen surface to create
</parameter_description>
</parameter>
</parameters>
<return> the newly created #cairo_surface_t for the offscreen window

</return>
</signal>

<signal name="GdkWindow::from-embedder">
<description>
The ::from-embedder signal is emitted to translate coordinates
in the embedder of an offscreen window to the offscreen window.

See also #GtkWindow::to-embedder.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> the offscreen window on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="embedder-x">
<parameter_description> x coordinate in the embedder window
</parameter_description>
</parameter>
<parameter name="embedder-y">
<parameter_description> y coordinate in the embedder window
</parameter_description>
</parameter>
<parameter name="offscreen-x">
<parameter_description> return location for the x
coordinate in the offscreen window
</parameter_description>
</parameter>
<parameter name="offscreen-y">
<parameter_description> return location for the y
coordinate in the offscreen window
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GdkWindow::pick-embedded-child">
<description>
The ::pick-embedded-child signal is emitted to find an embedded
child at the given position.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> the window on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate in the window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate in the window
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow of the embedded child at
@x, @y, or %NULL

</return>
</signal>

<signal name="GdkWindow::to-embedder">
<description>
The ::to-embedder signal is emitted to translate coordinates
in an offscreen window to its embedder.

See also #GtkWindow::from-embedder.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> the offscreen window on which the signal is emitted
</parameter_description>
</parameter>
<parameter name="offscreen-x">
<parameter_description> x coordinate in the offscreen window
</parameter_description>
</parameter>
<parameter name="offscreen-y">
<parameter_description> y coordinate in the offscreen window
</parameter_description>
</parameter>
<parameter name="embedder-x">
<parameter_description> return location for the x
coordinate in the embedder window
</parameter_description>
</parameter>
<parameter name="embedder-y">
<parameter_description> return location for the y
coordinate in the embedder window
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<function name="gdk_add_option_entries_libgtk_only">
<description>
Appends gdk option entries to the passed in option group. This is
not public API and must not be used by applications.

</description>
<parameters>
<parameter name="group">
<parameter_description> An option group.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_new">
<description>
Creates a new #GdkAppLaunchContext.

Since: 2.14

Deprecated: 3.0: Use gdk_display_get_app_launch_context() instead

</description>
<parameters>
</parameters>
<return> a new #GdkAppLaunchContext

</return>
</function>

<function name="gdk_app_launch_context_set_desktop">
<description>
Sets the workspace on which applications will be launched when
using this context when running under a window manager that
supports multiple workspaces, as described in the
&lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended
Window Manager Hints&lt;/ulink&gt;.

When the workspace is not specified or @desktop is set to -1,
it is up to the window manager to pick one, typically it will
be the current workspace.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="desktop">
<parameter_description> the number of a workspace, or -1
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_display">
<description>
Sets the display on which applications will be launched when
using this context. See also gdk_app_launch_context_set_screen().

Since: 2.14

Deprecated: 3.0: Use gdk_display_get_app_launch_context() instead

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_icon">
<description>
Sets the icon for applications that are launched with this
context.

Window Managers can use this information when displaying startup
notification.

See also gdk_app_launch_context_set_icon_name().

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GIcon, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_icon_name">
<description>
Sets the icon for applications that are launched with this context.
The @icon_name will be interpreted in the same way as the Icon field
in desktop files. See also gdk_app_launch_context_set_icon().

If both @icon and @icon_name are set, the @icon_name takes priority.
If neither @icon or @icon_name is set, the icon is taken from either
the file that is passed to launched application or from the #GAppInfo
for the launched application itself.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="icon_name">
<parameter_description> an icon name, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_screen">
<description>
Sets the screen on which applications will be launched when
using this context. See also gdk_app_launch_context_set_display().

If both @screen and @display are set, the @screen takes priority.
If neither @screen or @display are set, the default screen and
display are used.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_app_launch_context_set_timestamp">
<description>
Sets the timestamp of @context. The timestamp should ideally
be taken from the event that triggered the launch.

Window managers can use this information to avoid moving the
focus to the newly launched application when the user is busy
typing in another window. This is also known as 'focus stealing
prevention'.

Since: 2.14

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkAppLaunchContext
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_atom_intern">
<description>
Finds or creates an atom corresponding to a given string.


</description>
<parameters>
<parameter name="atom_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="only_if_exists">
<parameter_description> if %TRUE, GDK is allowed to not create a new atom, but
just return %GDK_NONE if the requested atom doesn't already
exists. Currently, the flag is ignored, since checking the
existance of an atom is as expensive as creating it.
</parameter_description>
</parameter>
</parameters>
<return> the atom corresponding to @atom_name.
</return>
</function>

<function name="gdk_atom_intern_static_string">
<description>
Finds or creates an atom corresponding to a given string.

Note that this function is identical to gdk_atom_intern() except
that if a new #GdkAtom is created the string itself is used rather
than a copy. This saves memory, but can only be used if the string
will &lt;emphasis&gt;always&lt;/emphasis&gt; exist. It can be used with statically
allocated strings in the main program, but not with statically
allocated memory in dynamically loaded modules, if you expect to
ever unload the module again (e.g. do not use this function in
GTK+ theme engines).

Since: 2.10

</description>
<parameters>
<parameter name="atom_name">
<parameter_description> a static string
</parameter_description>
</parameter>
</parameters>
<return> the atom corresponding to @atom_name

</return>
</function>

<function name="gdk_atom_name">
<description>
Determines the string corresponding to an atom.


</description>
<parameters>
<parameter name="atom">
<parameter_description> a #GdkAtom.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing the string
corresponding to @atom. When you are done with the
return value, you should free it using g_free().
</return>
</function>

<function name="gdk_beep">
<description>
Emits a short beep on the default display.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_create">
<description>
Creates a Cairo context for drawing to @window.

&lt;note&gt;&lt;warning&gt;
Note that calling cairo_reset_clip() on the resulting #cairo_t will
produce undefined results, so avoid it at all costs.
&lt;/warning&gt;&lt;/note&gt;

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> A newly created Cairo context. Free with
cairo_destroy() when you are done drawing.

</return>
</function>

<function name="gdk_cairo_get_clip_rectangle">
<description>
This is a convenience function around cairo_clip_extents().
It rounds the clip extents to integer coordinates and returns
a boolean indicating if a clip area exists.


</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> return location for the clip, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a clip rectangle exists, %FALSE if all of @cr is
clipped and all drawing can be skipped
</return>
</function>

<function name="gdk_cairo_rectangle">
<description>
Adds the given rectangle to the current path of @cr.

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_region">
<description>
Adds the given region to the current path of @cr.

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #cairo_region_t
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_region_create_from_surface">
<description>
Creates region that describes covers the area where the given
@surface is more than 50% opaque.

This function takes into account device offsets that might be
set with cairo_surface_set_device_offset().


</description>
<parameters>
<parameter name="surface">
<parameter_description> a cairo surface
</parameter_description>
</parameter>
</parameters>
<return> A #cairo_region_t; must be freed with cairo_region_destroy()
</return>
</function>

<function name="gdk_cairo_set_source_color">
<description>
Sets the specified #GdkColor as the source color of @cr.

Since: 2.8

Deprecated: 3.4: Use gdk_cairo_set_source_rgba() instead

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_pixbuf">
<description>
Sets the given pixbuf as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @pixbuf is @pixbuf_x, @pixbuf_y.

Since: 2.8

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> a #GdkPixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf_x">
<parameter_description> X coordinate of location to place upper left corner of @pixbuf
</parameter_description>
</parameter>
<parameter name="pixbuf_y">
<parameter_description> Y coordinate of location to place upper left corner of @pixbuf
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_rgba">
<description>
Sets the specified #GdkRGBA as the source color of @cr.

Since: 3.0

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_cairo_set_source_window">
<description>
Sets the given window as the source pattern for @cr.

The pattern has an extend mode of %CAIRO_EXTEND_NONE and is aligned
so that the origin of @window is @x, @y. The window contains all its
subwindows when rendering.

Note that the contents of @window are undefined outside of the
visible part of @window, so use this function with care.

Since: 2.24

</description>
<parameters>
<parameter name="cr">
<parameter_description> a cairo context
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of location to place upper left corner of @window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of location to place upper left corner of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_color_copy">
<description>
Makes a copy of a color structure.

The result must be freed using gdk_color_free().


</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return> a copy of @color
</return>
</function>

<function name="gdk_color_equal">
<description>
Compares two colors.


</description>
<parameters>
<parameter name="colora">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
<parameter name="colorb">
<parameter_description> another #GdkColor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors compare equal
</return>
</function>

<function name="gdk_color_free">
<description>
Frees a color structure created with gdk_color_copy().

</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_color_hash">
<description>
A hash function suitable for using for a hash
table that stores #GdkColors.


</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return> The hash function applied to @color
</return>
</function>

<function name="gdk_color_parse">
<description>
Parses a textual specification of a color and fill in the
&lt;structfield&gt;red&lt;/structfield&gt;, &lt;structfield&gt;green&lt;/structfield&gt;,
and &lt;structfield&gt;blue&lt;/structfield&gt; fields of a #GdkColor
structure.

The string can either one of a large set of standard names
(taken from the X11 &lt;filename&gt;rgb.txt&lt;/filename&gt; file), or
it can be a hex value in the form '&#35;rgb' '&#35;rrggbb'
'&#35;rrrgggbbb' or '&#35;rrrrggggbbbb' where 'r', 'g' and
'b' are hex digits of the red, green, and blue components
of the color, respectively. (White in the four forms is
'&#35;fff', '&#35;ffffff', '&#35;fffffffff' and
'&#35;ffffffffffff').


</description>
<parameters>
<parameter name="spec">
<parameter_description> the string specifying the color
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> the #GdkColor to fill in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing succeeded
</return>
</function>

<function name="gdk_color_to_string">
<description>
Returns a textual specification of @color in the hexadecimal form
&lt;literal&gt;&#35;rrrrggggbbbb&lt;/literal&gt;, where &lt;literal&gt;r&lt;/literal&gt;,
&lt;literal&gt;g&lt;/literal&gt; and &lt;literal&gt;b&lt;/literal&gt; are hex digits
representing the red, green and blue components respectively.

The returned string can be parsed by gdk_color_parse().

Since: 2.12

</description>
<parameters>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated text string

</return>
</function>

<function name="gdk_cursor_get_cursor_type">
<description>
Returns the cursor type for this cursor.

Since: 2.22

</description>
<parameters>
<parameter name="cursor">
<parameter_description>  a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursorType

</return>
</function>

<function name="gdk_cursor_get_display">
<description>
Returns the display on which the #GdkCursor is defined.

Since: 2.2

</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated to @cursor

</return>
</function>

<function name="gdk_cursor_get_image">
<description>
Returns a #GdkPixbuf with the image used to display the cursor.

Note that depending on the capabilities of the windowing system and 
on the cursor, GDK may not be able to obtain the image data. In this 
case, %NULL is returned.

Since: 2.8

</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> a #GdkPixbuf representing @cursor, or %NULL

</return>
</function>

<function name="gdk_cursor_new">
<description>
Creates a new cursor from the set of builtin cursors for the default display.
See gdk_cursor_new_for_display().

To make the cursor invisible, use %GDK_BLANK_CURSOR.


</description>
<parameters>
<parameter name="cursor_type">
<parameter_description> cursor to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor
</return>
</function>

<function name="gdk_cursor_new_for_display">
<description>
Creates a new cursor from the set of builtin cursors.
Some useful ones are:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;right_ptr.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_RIGHT_PTR (right-facing arrow)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;crosshair.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_CROSSHAIR (crosshair)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;xterm.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_XTERM (I-beam)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;watch.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_WATCH (busy)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;fleur.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_FLEUR (for moving objects)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;hand1.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_HAND1 (a right-pointing hand)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;hand2.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_HAND2 (a left-pointing hand)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;left_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_LEFT_SIDE (resize left side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;right_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_RIGHT_SIDE (resize right side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_left_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_TOP_LEFT_CORNER (resize northwest corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_right_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_TOP_RIGHT_CORNER (resize northeast corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_left_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_LEFT_CORNER (resize southwest corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_right_corner.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_RIGHT_CORNER (resize southeast corner)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;top_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_TOP_SIDE (resize top side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;bottom_side.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_BOTTOM_SIDE (resize bottom side)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;sb_h_double_arrow.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_SB_H_DOUBLE_ARROW (move vertical splitter)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
&lt;inlinegraphic format=&quot;PNG&quot; fileref=&quot;sb_v_double_arrow.png&quot;&gt;&lt;/inlinegraphic&gt; #GDK_SB_V_DOUBLE_ARROW (move horizontal splitter)
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
#GDK_BLANK_CURSOR (Blank cursor). Since 2.16
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="cursor_type">
<parameter_description> cursor to create
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor

</return>
</function>

<function name="gdk_cursor_new_from_name">
<description>
Creates a new cursor by looking up @name in the current cursor
theme.

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the cursor
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor, or %NULL if there is no cursor with
the given name

</return>
</function>

<function name="gdk_cursor_new_from_pixbuf">
<description>
Creates a new cursor from a pixbuf.

Not all GDK backends support RGBA cursors. If they are not
supported, a monochrome approximation will be displayed.
The functions gdk_display_supports_cursor_alpha() and
gdk_display_supports_cursor_color() can be used to determine
whether RGBA cursors are supported;
gdk_display_get_default_cursor_size() and
gdk_display_get_maximal_cursor_size() give information about
cursor sizes.

If @x or @y are &lt;literal&gt;-1&lt;/literal&gt;, the pixbuf must have
options named &quot;x_hot&quot; and &quot;y_hot&quot;, resp., containing
integer values between %0 and the width resp. height of
the pixbuf. (Since: 3.0)

On the X backend, support for RGBA cursors requires a
sufficently new version of the X Render extension.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay for which the cursor will be created
</parameter_description>
</parameter>
<parameter name="pixbuf">
<parameter_description> the #GdkPixbuf containing the cursor image
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the horizontal offset of the 'hotspot' of the cursor.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the vertical offset of the 'hotspot' of the cursor.
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkCursor.

</return>
</function>

<function name="gdk_cursor_ref">
<description>
Adds a reference to @cursor.

Deprecated: 3.0: Use g_object_ref() instead

</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return> Same @cursor that was passed in

</return>
</function>

<function name="gdk_cursor_unref">
<description>
Removes a reference from @cursor, deallocating the cursor
if no references remain.

Deprecated: 3.0: Use g_object_unref() instead

</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_free_history">
<description>
Frees an array of #GdkTimeCoord that was returned by gdk_device_get_history().

</description>
<parameters>
<parameter name="events">
<parameter_description> an array of #GdkTimeCoord.
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> the length of the array.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_associated_device">
<description>
Returns the associated device to @device, if @device is of type
%GDK_DEVICE_TYPE_MASTER, it will return the paired pointer or
keyboard.

If @device is of type %GDK_DEVICE_TYPE_SLAVE, it will return
the master device to which @device is attached to.

If @device is of type %GDK_DEVICE_TYPE_FLOATING, %NULL will be
returned, as there is no associated device.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> The associated device, or %NULL

</return>
</function>

<function name="gdk_device_get_axis">
<description>
Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis use.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> pointer to an array of axes
</parameter_description>
</parameter>
<parameter name="use">
<parameter_description> the use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the found value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given axis use was found, otherwise %FALSE
</return>
</function>

<function name="gdk_device_get_axis_use">
<description>
Returns the axis use for @index_.

Since: 2.20

</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the axis.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkAxisUse specifying how the axis is used.

</return>
</function>

<function name="gdk_device_get_axis_value">
<description>
Interprets an array of double as axis values for a given device,
and locates the value in the array for a given axis label, as returned
by gdk_device_list_axes()

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice.
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> pointer to an array of axes
</parameter_description>
</parameter>
<parameter name="axis_label">
<parameter_description> #GdkAtom with the axis label.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the found value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given axis use was found, otherwise %FALSE.

</return>
</function>

<function name="gdk_device_get_device_type">
<description>
Returns the device type for @device.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDeviceType for @device.

</return>
</function>

<function name="gdk_device_get_display">
<description>
Returns the #GdkDisplay to which @device pertains.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay. This memory is owned
by GTK+, and must not be freed or unreffed.

</return>
</function>

<function name="gdk_device_get_has_cursor">
<description>
Determines whether the pointer follows device motion.

Since: 2.20

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pointer follows device motion

</return>
</function>

<function name="gdk_device_get_history">
<description>
Obtains the motion history for a pointer device; given a starting and
ending timestamp, return all events in the motion history for
the device in the given range of time. Some windowing systems
do not support motion history, in which case, %FALSE will
be returned. (This is not distinguishable from the case where
motion history is supported and no events were found.)


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the window with respect to which which the event coordinates will be reported
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> starting timestamp for range of events to return
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> ending timestamp for the range of events to return
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> location to store a newly-allocated array of #GdkTimeCoord, or %NULL
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> location to store the length of @events, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the windowing system supports motion history and
at least one event was found.
</return>
</function>

<function name="gdk_device_get_key">
<description>
If @index_ has a valid keyval, this function will return %TRUE
and fill in @keyval and @modifiers with the keyval settings.

Since: 2.20

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the macro button to get.
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return value for the keyval.
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> return value for modifiers.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keyval is set for @index.

</return>
</function>

<function name="gdk_device_get_mode">
<description>
Determines the mode of the device.

Since: 2.20

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkInputSource

</return>
</function>

<function name="gdk_device_get_n_axes">
<description>
Returns the number of axes the device currently has.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the number of axes.

</return>
</function>

<function name="gdk_device_get_n_keys">
<description>
Returns the number of keys the device currently has.

Since: 2.24

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the number of keys.

</return>
</function>

<function name="gdk_device_get_name">
<description>
Determines the name of the device.

Since: 2.20

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a name

</return>
</function>

<function name="gdk_device_get_position">
<description>
Gets the current location of @device. As a slave device
coordinates are those of its master pointer, This function
may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> pointer device to query status about.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> location to store the #GdkScreen
the @device is on, or %NULL.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of @device, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_source">
<description>
Determines the type of the device.

Since: 2.20

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> a #GdkInputSource

</return>
</function>

<function name="gdk_device_get_state">
<description>
Gets the current state of a pointer device relative to @window. As a slave
device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
<parameter name="axes">
<parameter_description> an array of doubles to store the values of the axes of @device in,
or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store the modifiers, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_get_window_at_position">
<description>
Obtains the window underneath @device, returning the location of the device in @win_x and @win_y. Returns
%NULL if the window tree under @device is not known to GDK (for example, belongs to another application).

As a slave device coordinates are those of its master pointer, This
function may not be called on devices of type %GDK_DEVICE_TYPE_SLAVE,
unless there is an ongoing grab on them, see gdk_device_grab().

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> pointer #GdkDevice to query info to.
</parameter_description>
</parameter>
<parameter name="win_x">
<parameter_description> return location for the X coordinate of the device location,
relative to the window origin, or %NULL.
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for the Y coordinate of the device location,
relative to the window origin, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow under the device position, or %NULL.

</return>
</function>

<function name="gdk_device_grab">
<description>
Grabs the device so that all events coming from this device are passed to
this application until the device is ungrabbed with gdk_device_ungrab(),
or the window becomes unviewable. This overrides any previous grab on the device
by this client.

Device grabs are used for operations which need complete control over the
given device events (either pointer or keyboard). For example in GTK+ this
is used for Drag and Drop operations, popup menus and such.

Note that if the event mask of an X window has selected both button press
and button release events, then a button press event will cause an automatic
pointer grab until the button is released. X does this automatically since
most applications expect to receive button press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be
cleaned up when the grab ends, you should handle the #GdkEventGrabBroken
events that are emitted when the grab ends unvoluntarily.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice. To get the device you can use gtk_get_current_event_device()
or gdk_event_get_device() if the grab is in reaction to an event. Also, you can use
gdk_device_manager_get_client_pointer() but only in code that isn't triggered by a
#GdkEvent and there aren't other means to get a meaningful #GdkDevice to operate on.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> the #GdkWindow which will own the grab (the grab window)
</parameter_description>
</parameter>
<parameter name="grab_ownership">
<parameter_description> specifies the grab ownership.
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> if %FALSE then all device events are reported with respect to
@window and are only reported if selected by @event_mask. If
%TRUE then pointer events for this application are reported
as normal, but pointer events outside this application are
reported with respect to @window and only if selected by
@event_mask. In either mode, unreported events are discarded.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> specifies the event mask, which is used in accordance with
@owner_events.
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> the cursor to display while the grab is active if the device is
a pointer. If this is %NULL then the normal cursors are used for
@window and its descendants, and the cursor for @window is used
elsewhere.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp of the event which led to this pointer grab. This
usually comes from the #GdkEvent struct, though %GDK_CURRENT_TIME
can be used if the time isn't known.
</parameter_description>
</parameter>
</parameters>
<return> %GDK_GRAB_SUCCESS if the grab was successful.

</return>
</function>

<function name="gdk_device_grab_info_libgtk_only">
<description>
Determines information about the current keyboard grab.
This is not public API and must not be used by applications.


</description>
<parameters>
<parameter name="display">
<parameter_description> the display for which to get the grab information
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> device to get the grab information from
</parameter_description>
</parameter>
<parameter name="grab_window">
<parameter_description> location to store current grab window
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> location to store boolean indicating whether
the @owner_events flag to gdk_keyboard_grab() or
gdk_pointer_grab() was %TRUE.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if this application currently has the
keyboard grabbed.
</return>
</function>

<function name="gdk_device_list_axes">
<description>
Returns a #GList of #GdkAtom&lt;!-- --&gt;s, containing the labels for
the axes that @device currently has.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return>
A #GList of #GdkAtom&lt;!-- --&gt;s, free with g_list_free().

</return>
</function>

<function name="gdk_device_list_slave_devices">
<description>
If the device if of type %GDK_DEVICE_TYPE_MASTER, it will return
the list of slave devices attached to it, otherwise it will return
%NULL


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the list of
slave devices, or %NULL. The list must be freed with
g_list_free(), the contents of the list are owned by GTK+
and should not be freed.
</return>
</function>

<function name="gdk_device_manager_get_client_pointer">
<description>
Returns the client pointer, that is, the master pointer that acts as the core pointer
for this application. In X11, window managers may change this depending on the interaction
pattern under the presence of several pointers.

You should use this function sheldomly, only in code that isn't triggered by a #GdkEvent
and there aren't other means to get a meaningful #GdkDevice to operate on.

Since: 3.0

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #GdkDeviceManager
</parameter_description>
</parameter>
</parameters>
<return> The client pointer. This memory is
owned by GDK and must not be freed or unreferenced.

</return>
</function>

<function name="gdk_device_manager_get_display">
<description>
Gets the #GdkDisplay associated to @device_manager.

Since: 3.0

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #GdkDeviceManager
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay to which @device_manager is
associated to, or #NULL. This memory is owned by GDK and
must not be freed or unreferenced.

</return>
</function>

<function name="gdk_device_manager_list_devices">
<description>
Returns the list of devices of type @type currently attached to
@device_manager.

Since: 3.0

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #GdkDeviceManager
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> device type to get.
</parameter_description>
</parameter>
</parameters>
<return> a list of 
#GdkDevice&lt;!-- --&gt;s. The returned list must be
freed with g_list_free (). The list elements are owned by
GTK+ and must not be freed or unreffed.

</return>
</function>

<function name="gdk_device_set_axis_use">
<description>
Specifies how an axis of a device is used.

</description>
<parameters>
<parameter name="device">
<parameter_description> a pointer #GdkDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the axis
</parameter_description>
</parameter>
<parameter name="use">
<parameter_description> specifies how the axis is used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_set_key">
<description>
Specifies the X key event to generate when a macro button of a device
is pressed.

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> the index of the macro button to set
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> the keyval to generate
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> the modifiers to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_set_mode">
<description>
Sets a the mode of an input device. The mode controls if the
device is active and whether the device's range is mapped to the
entire screen or to a single window.


</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the input mode.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mode was successfully changed.
</return>
</function>

<function name="gdk_device_ungrab">
<description>
Release any grab on @device.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g. %GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_device_warp">
<description>
Warps @device in @display to the point @x,@y on
the screen @screen, unless the device is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.

Since: 3.0

</description>
<parameters>
<parameter name="device">
<parameter_description> the device to warp.
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> the screen to warp @device to.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the X coordinate of the destination.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the Y coordinate of the destination.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_disable_multidevice">
<description>
Disables multidevice support in GDK. This call must happen prior
to gdk_display_open(), gtk_init(), gtk_init_with_args() or
gtk_init_check() in order to take effect.

Most common GTK+ applications won't ever need to call this. Only
applications that do mixed GDK/Xlib calls could want to disable
multidevice support if such Xlib code deals with input devices in
any way and doesn't observe the presence of XInput 2.

Since: 3.0

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_display_beep">
<description>
Emits a short beep on @display

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_close">
<description>
Closes the connection to the windowing system for the given display,
and cleans up associated resources.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_device_is_grabbed">
<description>
Returns %TRUE if there is an ongoing grab on @device for @display.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there is a grab in effect for @device.
</return>
</function>

<function name="gdk_display_flush">
<description>
Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application
is drawing without returning control to the main loop, you may need
to call this function explicitely. A common case where this function
needs to be called is when an application is executing drawing commands
from a thread other than the thread where the main loop is running.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_app_launch_context">
<description>
Returns a #GdkAppLaunchContext suitable for launching
applications on the given display.

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a new #GdkAppLaunchContext for @display.
Free with g_object_unref() when done

</return>
</function>

<function name="gdk_display_get_default">
<description>
Gets the default #GdkDisplay. This is a convenience
function for
&lt;literal&gt;gdk_display_manager_get_default_display (gdk_display_manager_get ())&lt;/literal&gt;.

Since: 2.2

</description>
<parameters>
</parameters>
<return> a #GdkDisplay, or %NULL if there is no default
display.

</return>
</function>

<function name="gdk_display_get_default_cursor_size">
<description>
Returns the default size to use for cursors on @display.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the default cursor size.

</return>
</function>

<function name="gdk_display_get_default_group">
<description>
Returns the default group leader window for all toplevel windows
on @display. This window is implicitly created by GDK.
See gdk_window_set_group().

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> The default group leader window
for @display

</return>
</function>

<function name="gdk_display_get_default_screen">
<description>
Get the default #GdkScreen for @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the default #GdkScreen object for @display

</return>
</function>

<function name="gdk_display_get_device_manager">
<description>
Returns the #GdkDeviceManager associated to @display.

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkDeviceManager, or %NULL. This memory is
owned by GDK and must not be freed or unreferenced.

</return>
</function>

<function name="gdk_display_get_event">
<description>
Gets the next #GdkEvent to be processed for @display, fetching events from the
windowing system if necessary.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the next #GdkEvent to be processed, or %NULL if no events
are pending. The returned #GdkEvent should be freed with gdk_event_free().

</return>
</function>

<function name="gdk_display_get_maximal_cursor_size">
<description>
Gets the maximal size to use for cursors on @display.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the return location for the maximal cursor width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the return location for the maximal cursor height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_n_screens">
<description>
Gets the number of screen managed by the @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> number of screens.

</return>
</function>

<function name="gdk_display_get_name">
<description>
Gets the name of the display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> a string representing the display name. This string is owned
by GDK and should not be modified or freed.

</return>
</function>

<function name="gdk_display_get_pointer">
<description>
Gets the current location of the pointer and the current modifier
mask for a given display.

Since: 2.2

Deprecated: 3.0: Use gdk_device_get_position() instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> location to store the screen that the
cursor is on, or %NULL.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> location to store root window X coordinate of pointer, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> location to store root window Y coordinate of pointer, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> location to store current modifier mask, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_get_screen">
<description>
Returns a screen object for one of the screens of the display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen_num">
<parameter_description> the screen number
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen object

</return>
</function>

<function name="gdk_display_get_window_at_pointer">
<description>
Obtains the window underneath the mouse pointer, returning the location
of the pointer in that window in @win_x, @win_y for @screen. Returns %NULL
if the window under the mouse pointer is not known to GDK (for example, 
belongs to another application).

Since: 2.2

Deprecated: 3.0: Use gdk_device_get_window_at_position() instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="win_x">
<parameter_description> return location for x coordinate of the pointer location relative
to the window origin, or %NULL
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for y coordinate of the pointer location relative
 &amp;    to the window origin, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the window under the mouse pointer, or %NULL

</return>
</function>

<function name="gdk_display_has_pending">
<description>
Returns whether the display has events that are waiting
to be processed.

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there are events ready to be processed.

</return>
</function>

<function name="gdk_display_is_closed">
<description>
Finds out if the display has been closed.

Since: 2.22

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the display is closed.

</return>
</function>

<function name="gdk_display_keyboard_ungrab">
<description>
Release any keyboard grab

Since: 2.2

Deprecated: 3.0: Use gdk_device_ungrab(), together with gdk_device_grab()
instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g #GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_list_devices">
<description>
Returns the list of available input devices attached to @display.
The list is statically allocated and should not be freed.

Since: 2.2

Deprecated: 3.0: Use gdk_device_manager_list_devices() instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return>
a list of #GdkDevice

</return>
</function>

<function name="gdk_display_manager_get">
<description>
Gets the singleton #GdkDisplayManager object.

When called for the first time, this function consults the
&lt;envar&gt;GDK_BACKEND&lt;/envar&gt; environment variable to find out which
of the supported GDK backends to use (in case GDK has been compiled
with multiple backends).

Since: 2.2

</description>
<parameters>
</parameters>
<return> The global #GdkDisplayManager singleton;
gdk_parse_args(), gdk_init(), or gdk_init_check() must have
been called first.

</return>
</function>

<function name="gdk_display_manager_get_default_display">
<description>
Gets the default #GdkDisplay.

Since: 2.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL
if there is no default display.

</return>
</function>

<function name="gdk_display_manager_list_displays">
<description>
List all currently open displays.

Since: 2.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
</parameters>
<return> a newly
allocated #GSList of #GdkDisplay objects. Free with g_slist_free()
when you are done with it.

</return>
</function>

<function name="gdk_display_manager_open_display">
<description>
Opens a display.

Since: 3.0

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the display to open
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL
if the display could not be opened

</return>
</function>

<function name="gdk_display_manager_set_default_display">
<description>
Sets @display as the default display.

Since: 2.2

</description>
<parameters>
<parameter name="manager">
<parameter_description> a #GdkDisplayManager
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_notify_startup_complete">
<description>
Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> a startup-notification identifier, for which
notification process should be completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_open">
<description>
Opens a display.

Since: 2.2

</description>
<parameters>
<parameter name="display_name">
<parameter_description> the name of the display to open
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDisplay, or %NULL
if the display could not be opened

</return>
</function>

<function name="gdk_display_open_default_libgtk_only">
<description>
Opens the default display specified by command line arguments or
environment variables, sets it as the default display, and returns
it.  gdk_parse_args must have been called first. If the default
display has previously been set, simply returns that. An internal
function that should not be used by applications.


</description>
<parameters>
</parameters>
<return> the default display, if it could be
opened, otherwise %NULL.
</return>
</function>

<function name="gdk_display_peek_event">
<description>
Gets a copy of the first #GdkEvent in the @display's event queue, without
removing the event from the queue.  (Note that this function will
not get more events from the windowing system.  It only checks the events
that have already been moved to the GDK event queue.)

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return> a copy of the first #GdkEvent on the event queue, or %NULL 
if no events are in the queue. The returned #GdkEvent should be freed with
gdk_event_free().

</return>
</function>

<function name="gdk_display_pointer_is_grabbed">
<description>
Test if the pointer is grabbed.

Since: 2.2

Deprecated: 3.0: Use gdk_display_device_is_grabbed() instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if an active X pointer grab is in effect

</return>
</function>

<function name="gdk_display_pointer_ungrab">
<description>
Release any pointer grab.

Since: 2.2

Deprecated: 3.0: Use gdk_device_ungrab(), together with gdk_device_grab()
instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestap (e.g. %GDK_CURRENT_TIME).
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_put_event">
<description>
Appends a copy of the given event onto the front of the event
queue for @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_request_selection_notification">
<description>
Request #GdkEventOwnerChange events for ownership changes
of the selection named by the given atom.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> the #GdkAtom naming the selection for which
ownership change notification is requested
</parameter_description>
</parameter>
</parameters>
<return> whether #GdkEventOwnerChange events will
be sent.

</return>
</function>

<function name="gdk_display_set_double_click_distance">
<description>
Sets the double click distance (two clicks within this distance
count as a double click and result in a #GDK_2BUTTON_PRESS event).
See also gdk_display_set_double_click_time().
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a global 
user-configured setting.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> distance in pixels
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_set_double_click_time">
<description>
Sets the double click time (two clicks within this time interval
count as a double click and result in a #GDK_2BUTTON_PRESS event).
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a global 
user-configured setting.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="msec">
<parameter_description> double click time in milliseconds (thousandths of a second) 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_store_clipboard">
<description>
Issues a request to the clipboard manager to store the
clipboard data. On X11, this is a special program that works
according to the freedesktop clipboard specification, available at
&lt;ulink url=&quot;http://www.freedesktop.org/Standards/clipboard-manager-spec&quot;&gt;
http://www.freedesktop.org/Standards/clipboard-manager-spec&lt;/ulink&gt;.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description>          a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="clipboard_window">
<parameter_description> a #GdkWindow belonging to the clipboard owner
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description>            a timestamp
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> an array of targets
that should be saved, or %NULL
if all available targets should be saved.
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description>        length of the @targets array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_supports_clipboard_persistence">
<description>
Returns whether the speicifed display supports clipboard
persistance; i.e. if it's possible to store the clipboard data after an
application has quit. On X11 this checks if a clipboard daemon is
running.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the display supports clipboard persistance.

</return>
</function>

<function name="gdk_display_supports_composite">
<description>
Returns %TRUE if gdk_window_set_composited() can be used
to redirect drawing on the window using compositing.

Currently this only works on X11 with XComposite and
XDamage extensions available.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if windows may be composited.

</return>
</function>

<function name="gdk_display_supports_cursor_alpha">
<description>
Returns %TRUE if cursors can use an 8bit alpha channel
on @display. Otherwise, cursors are restricted to bilevel
alpha (i.e. a mask).

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> whether cursors can have alpha channels.

</return>
</function>

<function name="gdk_display_supports_cursor_color">
<description>
Returns %TRUE if multicolored cursors are supported
on @display. Otherwise, cursors have only a forground
and a background color.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> whether cursors can have multiple colors.

</return>
</function>

<function name="gdk_display_supports_input_shapes">
<description>
Returns %TRUE if gdk_window_input_shape_combine_mask() can
be used to modify the input shape of windows on @display.

Since: 2.10

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if windows with modified input shape are supported

</return>
</function>

<function name="gdk_display_supports_selection_notification">
<description>
Returns whether #GdkEventOwnerChange events will be
sent when the owner of a selection changes.

Since: 2.6

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> whether #GdkEventOwnerChange events will
be sent.

</return>
</function>

<function name="gdk_display_supports_shapes">
<description>
Returns %TRUE if gdk_window_shape_combine_mask() can
be used to create shaped windows on @display.

Since: 2.10

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if shaped windows are supported

</return>
</function>

<function name="gdk_display_sync">
<description>
Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the
display is synchronized with the current state of the program. Calling
gdk_display_sync() before gdk_error_trap_pop() makes sure that any errors
generated from earlier requests are handled before the error trap is
removed.

This is most useful for X11. On windowing systems where requests are
handled synchronously, this function will do nothing.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_display_warp_pointer">
<description>
Warps the pointer of @display to the point @x,@y on
the screen @screen, unless the pointer is confined
to a window by a grab, in which case it will be moved
as far as allowed by the grab. Warping the pointer
creates events as if the user had moved the mouse
instantaneously to the destination.

Note that the pointer should normally be under the
control of the user. This function was added to cover
some rare use cases like keyboard navigation support
for the color picker in the #GtkColorSelectionDialog.

Since: 2.8

Deprecated: 3.0: Use gdk_device_warp() instead.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> the screen of @display to warp the pointer to
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the destination
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the destination
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_abort">
<description>
Aborts a drag without dropping.

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_begin">
<description>
Starts a drag and creates a new drag context for it.
This function assumes that the drag is controlled by the
client pointer device, use gdk_drag_begin_for_device() to
begin a drag with a different device.

This function is called by the drag source.


</description>
<parameters>
<parameter name="window">
<parameter_description> the source window for this drag.
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the offered targets,
as list of #GdkAtoms
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GdkDragContext
</return>
</function>

<function name="gdk_drag_begin_for_device">
<description>
Starts a drag and creates a new drag context for it.

This function is called by the drag source.


</description>
<parameters>
<parameter name="window">
<parameter_description> the source window for this drag
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the device that controls this drag
</parameter_description>
</parameter>
<parameter name="targets">
<parameter_description> the offered targets,
as list of #GdkAtoms
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GdkDragContext
</return>
</function>

<function name="gdk_drag_context_get_actions">
<description>
Determines the bitmask of actions proposed by the source if
gdk_drag_context_get_suggested_action() returns GDK_ACTION_ASK.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDragAction flags

</return>
</function>

<function name="gdk_drag_context_get_dest_window">
<description>
Returns the destination windw for the DND operation.

Since: 3.0

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow

</return>
</function>

<function name="gdk_drag_context_get_device">
<description>
Returns the #GdkDevice associated to the drag context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> The #GdkDevice associated to @context.
</return>
</function>

<function name="gdk_drag_context_get_protocol">
<description>
Returns the drag protocol thats used by this context.

Since: 3.0

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> the drag protocol

</return>
</function>

<function name="gdk_drag_context_get_selected_action">
<description>
Determines the action chosen by the drag destination.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDragAction value

</return>
</function>

<function name="gdk_drag_context_get_source_window">
<description>
Returns the #GdkWindow where the DND operation started.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow

</return>
</function>

<function name="gdk_drag_context_get_suggested_action">
<description>
Determines the suggested drag action of the context.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDragAction value

</return>
</function>

<function name="gdk_drag_context_list_targets">
<description>
Retrieves the list of targets of the context.

Since: 2.22

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> a #GList of targets

</return>
</function>

<function name="gdk_drag_context_set_device">
<description>
Associates a #GdkDevice to @context, so all Drag and Drop events
for @context are emitted as if they came from this device.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop">
<description>
Drops on the current destination.

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_drop_succeeded">
<description>
Returns whether the dropped data has been successfully
transferred. This function is intended to be used while
handling a %GDK_DROP_FINISHED event, its return value is
meaningless at other times.

Since: 2.6

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drop was successful.

</return>
</function>

<function name="gdk_drag_find_window_for_screen">
<description>
Finds the destination window and DND protocol to use at the
given pointer position.

This function is called by the drag source to obtain the
@dest_window and @protocol parameters for gdk_drag_motion().

Since: 2.2

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="drag_window">
<parameter_description> a window which may be at the pointer position, but
should be ignored, since it is put up by the drag source as an icon
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> the screen where the destination window is sought
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> location to store the destination window in
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> location to store the DND protocol in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_get_selection">
<description>
Returns the selection atom for the current source window.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext.
</parameter_description>
</parameter>
</parameters>
<return> the selection atom, or %GDK_NONE
</return>
</function>

<function name="gdk_drag_motion">
<description>
Updates the drag context when the pointer moves or the
set of actions changes.

This function is called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="dest_window">
<parameter_description> the new destination window, obtained by
gdk_drag_find_window()
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the DND protocol in use, obtained by gdk_drag_find_window()
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> the x position of the pointer in root coordinates
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> the y position of the pointer in root coordinates
</parameter_description>
</parameter>
<parameter name="suggested_action">
<parameter_description> the suggested action
</parameter_description>
</parameter>
<parameter name="possible_actions">
<parameter_description> the possible actions
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drag_status">
<description>
Selects one of the actions offered by the drag source.

This function is called by the drag destination in response to
gdk_drag_motion() called by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="action">
<parameter_description> the selected action which will be taken when a drop happens,
or 0 to indicate that a drop will not be accepted
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_finish">
<description>
Ends the drag operation after a drop.

This function is called by the drag destination.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GtkDragContext
</parameter_description>
</parameter>
<parameter name="success">
<parameter_description> %TRUE if the data was successfully received
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_drop_reply">
<description>
Accepts or rejects a drop.

This function is called by the drag destination in response
to a drop initiated by the drag source.

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GdkDragContext
</parameter_description>
</parameter>
<parameter name="accepted">
<parameter_description> %TRUE if the drop is accepted
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp for this operation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_error_trap_pop">
<description>
Removes an error trap pushed with gdk_error_trap_push().
May block until an error has been definitively received
or not received from the X server. gdk_error_trap_pop_ignored()
is preferred if you don't need to know whether an error
occurred, because it never has to block. If you don't
need the return value of gdk_error_trap_pop(), use
gdk_error_trap_pop_ignored().

Prior to GDK 3.0, this function would not automatically
sync for you, so you had to gdk_flush() if your last
call to Xlib was not a blocking round trip.


</description>
<parameters>
</parameters>
<return> X error code or 0 on success
</return>
</function>

<function name="gdk_error_trap_pop_ignored">
<description>
Removes an error trap pushed with gdk_error_trap_push(), but
without bothering to wait and see whether an error occurred.  If an
error arrives later asynchronously that was triggered while the
trap was pushed, that error will be ignored.

Since: 3.0

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_error_trap_push">
<description>
This function allows X errors to be trapped instead of the normal
behavior of exiting the application. It should only be used if it
is not possible to avoid the X error in any other way. Errors are
ignored on all #GdkDisplay currently known to the
#GdkDisplayManager. If you don't care which error happens and just
want to ignore everything, pop with gdk_error_trap_pop_ignored().
If you need the error code, use gdk_error_trap_pop() which may have
to block and wait for the error to arrive from the X server.

This API exists on all platforms but only does anything on X.

You can use gdk_x11_display_error_trap_push() to ignore errors
on only a single display.

&lt;example&gt;
&lt;title&gt;Trapping an X error&lt;/title&gt;
&lt;programlisting&gt;
gdk_error_trap_push (&lt;!-- --&gt;);

// ... Call the X function which may cause an error here ...


if (gdk_error_trap_pop (&lt;!-- --&gt;))
{
// ... Handle the error here ...
}
&lt;/programlisting&gt;
&lt;/example&gt;

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_event_copy">
<description>
Copies a #GdkEvent, copying or incrementing the reference count of the
resources associated with it (e.g. #GdkWindow's and strings).


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a copy of @event. The returned #GdkEvent should be freed with
gdk_event_free().
</return>
</function>

<function name="gdk_event_free">
<description>
Frees a #GdkEvent, freeing or decrementing any resources associated with it.
Note that this function should only be called with events returned from
functions such as gdk_event_peek(), gdk_event_get(), gdk_event_copy()
and gdk_event_new().

</description>
<parameters>
<parameter name="event">
<parameter_description>  a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_get">
<description>
Checks all open displays for a #GdkEvent to process,to be processed
on, fetching events from the windowing system if necessary.
See gdk_display_get_event().


</description>
<parameters>
</parameters>
<return> the next #GdkEvent to be processed, or %NULL if no events
are pending. The returned #GdkEvent should be freed with gdk_event_free().
</return>
</function>

<function name="gdk_event_get_axis">
<description>
Extract the axis value for a particular axis use from
an event structure.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="axis_use">
<parameter_description> the axis use to look for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value found
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the specified axis was found, otherwise %FALSE
</return>
</function>

<function name="gdk_event_get_button">
<description>
Extract the button number from an event.

Since: 3.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> location to store mouse button number
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a button number

</return>
</function>

<function name="gdk_event_get_click_count">
<description>
Extracts the click count from an event.

Since: 3.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="click_count">
<parameter_description> location to store click count
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a click count

</return>
</function>

<function name="gdk_event_get_coords">
<description>
Extract the event window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_win">
<parameter_description> location to put event window x coordinate
</parameter_description>
</parameter>
<parameter name="y_win">
<parameter_description> location to put event window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered event window coordinates
</return>
</function>

<function name="gdk_event_get_device">
<description>
If the event contains a &quot;device&quot; field, this function will return
it, else it will return %NULL.

Since: 3.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDevice, or %NULL.

</return>
</function>

<function name="gdk_event_get_event_sequence">
<description>
If @event if of type %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE,
%GDK_TOUCH_END or %GDK_TOUCH_CANCEL, returns the #GdkEventSequence
to which the event belongs. Otherwise, return %NULL.

Since: 3.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the event sequence that the event belongs to

</return>
</function>

<function name="gdk_event_get_keycode">
<description>
Extracts the hardware keycode from an event.

Since: 3.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="keycode">
<parameter_description> location to store the keycode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a hardware keycode

</return>
</function>

<function name="gdk_event_get_keyval">
<description>
Extracts the keyval from an event.

Since: 3.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> location to store the keyval
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a key symbol

</return>
</function>

<function name="gdk_event_get_root_coords">
<description>
Extract the root window relative x/y coordinates from an event.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="x_root">
<parameter_description> location to put root window x coordinate
</parameter_description>
</parameter>
<parameter name="y_root">
<parameter_description> location to put root window y coordinate
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered root window coordinates
</return>
</function>

<function name="gdk_event_get_screen">
<description>
Returns the screen for the event. The screen is
typically the screen for &lt;literal&gt;event-&gt;any.window&lt;/literal&gt;, but
for events such as mouse events, it is the screen
where the pointer was when the event occurs -
that is, the screen which has the root window 
to which &lt;literal&gt;event-&gt;motion.x_root&lt;/literal&gt; and
&lt;literal&gt;event-&gt;motion.y_root&lt;/literal&gt; are relative.

Since: 2.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> the screen for the event

</return>
</function>

<function name="gdk_event_get_scroll_deltas">
<description>
Retrieves the scroll deltas from a #GdkEvent

Since: 3.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="delta_x">
<parameter_description> return location for X delta
</parameter_description>
</parameter>
<parameter name="delta_y">
<parameter_description> return location for Y delta
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event contains smooth scroll information

</return>
</function>

<function name="gdk_event_get_scroll_direction">
<description>
Extracts the scroll direction from an event.

Since: 3.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> location to store the scroll direction
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event delivered a scroll direction

</return>
</function>

<function name="gdk_event_get_source_device">
<description>
This function returns the hardware (slave) #GdkDevice that has
triggered the event, falling back to the virtual (master) device
(as in gdk_event_get_device()) if the event wasn't caused by
interaction with a hardware device. This may happen for example
in synthesized crossing events after a #GdkWindow updates its
geometry or a grab is acquired/released.

If the event does not contain a device field, this function will
return %NULL.

Since: 3.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> a #GdkDevice, or %NULL.

</return>
</function>

<function name="gdk_event_get_state">
<description>
If the event contains a &quot;state&quot; field, puts that field in @state. Otherwise
stores an empty state (0). Returns %TRUE if there was a state field
in the event. @event may be %NULL, in which case it's treated
as if the event had no state field.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent or NULL
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> return location for state
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a state field in the event 
</return>
</function>

<function name="gdk_event_get_time">
<description>
Returns the time stamp from @event, if there is one; otherwise
returns #GDK_CURRENT_TIME. If @event is %NULL, returns #GDK_CURRENT_TIME.


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return> time stamp field from @event
</return>
</function>

<function name="gdk_event_handler_set">
<description>
Sets the function to call to handle all events from GDK.

Note that GTK+ uses this to install its own event handler, so it is
usually not useful for GTK+ applications. (Although an application
can call this function then call gtk_main_do_event() to pass
events to GTK+.)

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to call to handle events from GDK.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to pass to the function. 
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> the function to call when the handler function is removed, i.e. when
gdk_event_handler_set() is called with another event handler.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_new">
<description>
Creates a new event of the given type. All fields are set to 0.

Since: 2.2

</description>
<parameters>
<parameter name="type">
<parameter_description> a #GdkEventType 
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GdkEvent. The returned #GdkEvent 
should be freed with gdk_event_free().

</return>
</function>

<function name="gdk_event_peek">
<description>
If there is an event waiting in the event queue of some open
display, returns a copy of it. See gdk_display_peek_event().


</description>
<parameters>
</parameters>
<return> a copy of the first #GdkEvent on some event queue, or %NULL if no
events are in any queues. The returned #GdkEvent should be freed with
gdk_event_free().
</return>
</function>

<function name="gdk_event_put">
<description>
Appends a copy of the given event onto the front of the event
queue for event-&gt;any.window's display, or the default event
queue if event-&gt;any.window is %NULL. See gdk_display_put_event().

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_request_motions">
<description>
Request more motion notifies if @event is a motion notify hint event.

This function should be used instead of gdk_window_get_pointer() to
request further motion notifies, because it also works for extension
events where motion notifies are provided for devices other than the
core pointer. Coordinate extraction, processing and requesting more
motion events from a %GDK_MOTION_NOTIFY event usually works like this:

|[
{
/ * motion_event handler * /
x = motion_event-&gt;x;
y = motion_event-&gt;y;
/ * handle (x,y) motion * /
gdk_event_request_motions (motion_event); / * handles is_hint events * /
}
]|

Since: 2.12

</description>
<parameters>
<parameter name="event">
<parameter_description> a valid #GdkEvent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_device">
<description>
Sets the device for @event to @device. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().

Since: 3.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_screen">
<description>
Sets the screen for @event to @screen. The event must
have been allocated by GTK+, for instance, by
gdk_event_copy().

Since: 2.2

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_set_source_device">
<description>
Sets the slave device for @event to @device.

The event must have been allocated by GTK+,
for instance by gdk_event_copy().

Since: 3.0

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_event_triggers_context_menu">
<description>
This function returns whether a #GdkEventButton should trigger a
context menu, according to platform conventions. The right mouse
button always triggers context menus. Additionally, if
gdk_keymap_get_modifier_mask() returns a non-0 mask for
%GDK_MODIFIER_INTENT_CONTEXT_MENU, then the left mouse button will
also trigger a context menu if this modifier is pressed.

This function should always be used instead of simply checking for
event-&gt;button == %GDK_BUTTON_SECONDARY.

Since: 3.4

</description>
<parameters>
<parameter name="event">
<parameter_description> a #GdkEvent, currently only button events are meaningful values
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event should trigger a context menu.

</return>
</function>

<function name="gdk_events_get_angle">
<description>
If both events contain X/Y information, this function will return %TRUE
and return in @angle the relative angle from @event1 to @event2. The rotation
direction for positive angles is from the positive X axis towards the positive
Y axis.

Since: 3.0

</description>
<parameters>
<parameter name="event1">
<parameter_description> first #GdkEvent
</parameter_description>
</parameter>
<parameter name="event2">
<parameter_description> second #GdkEvent
</parameter_description>
</parameter>
<parameter name="angle">
<parameter_description> return location for the relative angle between both events
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the angle could be calculated.

</return>
</function>

<function name="gdk_events_get_center">
<description>
If both events contain X/Y information, the center of both coordinates
will be returned in @x and @y.

Since: 3.0

</description>
<parameters>
<parameter name="event1">
<parameter_description> first #GdkEvent
</parameter_description>
</parameter>
<parameter name="event2">
<parameter_description> second #GdkEvent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate of the center
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate of the center
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the center could be calculated.

</return>
</function>

<function name="gdk_events_get_distance">
<description>
If both events have X/Y information, the distance between both coordinates
(as in a straight line going from @event1 to @event2) will be returned.

Since: 3.0

</description>
<parameters>
<parameter name="event1">
<parameter_description> first #GdkEvent
</parameter_description>
</parameter>
<parameter name="event2">
<parameter_description> second #GdkEvent
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> return location for the distance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the distance could be calculated.

</return>
</function>

<function name="gdk_events_pending">
<description>
Checks if any events are ready to be processed for any display.


</description>
<parameters>
</parameters>
<return> %TRUE if any events are pending.
</return>
</function>

<function name="gdk_flush">
<description>
Flushes the output buffers of all display connections and waits
until all requests have been processed.
This is rarely needed by applications.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_get_default_root_window">
<description>
Obtains the root window (parent all other windows are inside)
for the default display and screen.


</description>
<parameters>
</parameters>
<return> the default root window
</return>
</function>

<function name="gdk_get_display_arg_name">
<description>
Gets the display name specified in the command line arguments passed
to gdk_init() or gdk_parse_args(), if any.

Since: 2.2

</description>
<parameters>
</parameters>
<return> the display name, if specified explicitely, otherwise %NULL
this string is owned by GTK+ and must not be modified or freed.

</return>
</function>

<function name="gdk_get_program_class">
<description>
Gets the program class. Unless the program class has explicitly
been set with gdk_set_program_class() or with the &lt;option&gt;--class&lt;/option&gt;
commandline option, the default value is the program name (determined
with g_get_prgname()) with the first character converted to uppercase.


</description>
<parameters>
</parameters>
<return> the program class.
</return>
</function>

<function name="gdk_get_show_events">
<description>
Gets whether event debugging output is enabled.


</description>
<parameters>
</parameters>
<return> %TRUE if event debugging output is enabled.
</return>
</function>

<function name="gdk_init">
<description>
Initializes the GDK library and connects to the windowing system.
If initialization fails, a warning message is output and the application
terminates with a call to &lt;literal&gt;exit(1)&lt;/literal&gt;.

Any arguments used by GDK are removed from the array and @argc and @argv
are updated accordingly.

GTK+ initializes GDK in gtk_init() and so this function is not usually
needed by GTK+ applications.

</description>
<parameters>
<parameter name="argc">
<parameter_description> the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_init_check">
<description>
Initializes the GDK library and connects to the windowing system,
returning %TRUE on success.

Any arguments used by GDK are removed from the array and @argc and @argv
are updated accordingly.

GTK+ initializes GDK in gtk_init() and so this function is not usually
needed by GTK+ applications.


</description>
<parameters>
<parameter name="argc">
<parameter_description> the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if initialization succeeded.
</return>
</function>

<function name="gdk_keyboard_grab">
<description>
Grabs the keyboard so that all events are passed to this
application until the keyboard is ungrabbed with gdk_keyboard_ungrab().
This overrides any previous keyboard grab by this client.

If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.

Deprecated: 3.0: Use gdk_device_grab() instead.

</description>
<parameters>
<parameter name="window">
<parameter_description> the #GdkWindow which will own the grab (the grab window).
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> if %FALSE then all keyboard events are reported with respect to
@window. If %TRUE then keyboard events for this application are
reported as normal, but keyboard events outside this application
are reported with respect to @window. Both key press and key
release events are always reported, independant of the event mask
set by the application.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no timestamp is
available.
</parameter_description>
</parameter>
</parameters>
<return> %GDK_GRAB_SUCCESS if the grab was successful.

</return>
</function>

<function name="gdk_keyboard_ungrab">
<description>
Ungrabs the keyboard on the default display, if it is grabbed by this 
application.

Deprecated: 3.0: Use gdk_device_ungrab(), together with gdk_device_grab()
instead.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no
timestamp is available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_add_virtual_modifiers">
<description>
Adds virtual modifiers (i.e. Super, Hyper and Meta) which correspond
to the real modifiers (i.e Mod2, Mod3, ...) in @modifiers.
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

GDK already does this before delivering key events, but for
compatibility reasons, it only sets the first virtual modifier
it finds, whereas this function sets all matching virtual modifiers.

This function is useful when matching key events against
accelerators.

Since: 2.20

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> pointer to the modifier mask to change
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keymap_get_caps_lock_state">
<description>
Returns whether the Caps Lock modifer is locked.

Since: 2.16

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if Caps Lock is on

</return>
</function>

<function name="gdk_keymap_get_default">
<description>
Returns the #GdkKeymap attached to the default display.


</description>
<parameters>
</parameters>
<return> the #GdkKeymap attached to the default display.
</return>
</function>

<function name="gdk_keymap_get_direction">
<description>
Returns the direction of effective layout of the keymap.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %PANGO_DIRECTION_LTR or %PANGO_DIRECTION_RTL
if it can determine the direction. %PANGO_DIRECTION_NEUTRAL
otherwise.
</return>
</function>

<function name="gdk_keymap_get_entries_for_keycode">
<description>
Returns the keyvals bound to @hardware_keycode.
The Nth #GdkKeymapKey in @keys is bound to the Nth
keyval in @keyvals. Free the returned arrays with g_free().
When a keycode is pressed by the user, the keyval from
this list of entries is selected by considering the effective
keyboard group and level. See gdk_keymap_translate_keyboard_state().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return
location for array of #GdkKeymapKey, or %NULL
</parameter_description>
</parameter>
<parameter name="keyvals">
<parameter_description> return
location for array of keyvals, or %NULL
</parameter_description>
</parameter>
<parameter name="n_entries">
<parameter_description> length of @keys and @keyvals
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there were any entries
</return>
</function>

<function name="gdk_keymap_get_entries_for_keyval">
<description>
Obtains a list of keycode/group/level combinations that will
generate @keyval. Groups and levels are two kinds of keyboard mode;
in general, the level determines whether the top or bottom symbol
on a key is used, and the group determines whether the left or
right symbol is used. On US keyboards, the shift key changes the
keyboard level, and there are no groups. A group switch key might
convert a keyboard between Hebrew to English modes, for example.
#GdkEventKey contains a %group field that indicates the active
keyboard group. The level is computed from the modifier mask.
The returned array should be freed
with g_free().


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> a keyval, such as %GDK_a, %GDK_Up, %GDK_Return, etc.
</parameter_description>
</parameter>
<parameter name="keys">
<parameter_description> return location
for an array of #GdkKeymapKey
</parameter_description>
</parameter>
<parameter name="n_keys">
<parameter_description> return location for number of elements in returned array
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keys were found and returned
</return>
</function>

<function name="gdk_keymap_get_for_display">
<description>
Returns the #GdkKeymap attached to @display.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkKeymap attached to @display.

</return>
</function>

<function name="gdk_keymap_get_modifier_mask">
<description>
Returns the modifier mask the @keymap's windowing system backend
uses for a particular purpose.

Note that this function always returns real hardware modifiers, not
virtual ones (e.g. it will return #GDK_MOD1_MASK rather than
#GDK_META_MASK if the backend maps MOD1 to META), so there are use
cases where the return value of this function has to be transformed
by gdk_keymap_add_virtual_modifiers() in order to contain the
expected result.

Since: 3.4

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="intent">
<parameter_description> the use case for the modifier mask
</parameter_description>
</parameter>
</parameters>
<return> the modifier mask used for @intent.

</return>
</function>

<function name="gdk_keymap_get_modifier_state">
<description>
Returns the current modifier state.

Since: 3.4

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> the current modifier state.

</return>
</function>

<function name="gdk_keymap_get_num_lock_state">
<description>
Returns whether the Num Lock modifer is locked.

Since: 3.0

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if Num Lock is on

</return>
</function>

<function name="gdk_keymap_have_bidi_layouts">
<description>
Determines if keyboard layouts for both right-to-left and left-to-right
languages are in use.

Since: 2.12

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there are layouts in both directions, %FALSE otherwise

</return>
</function>

<function name="gdk_keymap_lookup_key">
<description>
Looks up the keyval mapped to a keycode/group/level triplet.
If no keyval is bound to @key, returns 0. For normal user input,
you want to use gdk_keymap_translate_keyboard_state() instead of
this function, since the effective group/level may not be
the same as the current keyboard state.


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a #GdkKeymapKey with keycode, group, and level initialized
</parameter_description>
</parameter>
</parameters>
<return> a keyval, or 0 if none was mapped to the given @key
</return>
</function>

<function name="gdk_keymap_map_virtual_modifiers">
<description>
Maps the virtual modifiers (i.e. Super, Hyper and Meta) which
are set in @state to their non-virtual counterparts (i.e. Mod2,
Mod3,...) and set the corresponding bits in @state.

This function is useful when matching key events against
accelerators.

Since: 2.20

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> pointer to the modifier state to map
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no virtual modifiers were mapped to the
same non-virtual modifier. Note that %FALSE is also returned
if a virtual modifier is mapped to a non-virtual modifier that
was already set in @state.

</return>
</function>

<function name="gdk_keymap_translate_keyboard_state">
<description>
Translates the contents of a #GdkEventKey into a keyval, effective
group, and level. Modifiers that affected the translation and
are thus unavailable for application use are returned in
@consumed_modifiers.
See &lt;xref linkend=&quot;key-group-explanation&quot;/&gt; for an explanation of
groups and levels. The @effective_group is the group that was
actually used for the translation; some keys such as Enter are not
affected by the active keyboard group. The @level is derived from
@state. For convenience, #GdkEventKey already contains the translated
keyval, so this function isn't as useful as you might think.

&lt;note&gt;&lt;para&gt;
@consumed_modifiers gives modifiers that should be masked out
from @state when comparing this key press to a hot key. For
instance, on a US keyboard, the &lt;literal&gt;plus&lt;/literal&gt;
symbol is shifted, so when comparing a key press to a
&lt;literal&gt;&lt;Control&gt;plus&lt;/literal&gt; accelerator &lt;Shift&gt; should
be masked out.
&lt;/para&gt;
&lt;informalexample&gt;&lt;programlisting&gt;
 / * We want to ignore irrelevant modifiers like ScrollLock * / 
&#35;define ALL_ACCELS_MASK (GDK_CONTROL_MASK | GDK_SHIFT_MASK | GDK_MOD1_MASK)
gdk_keymap_translate_keyboard_state (keymap, event-&gt;hardware_keycode,
event-&gt;state, event-&gt;group,
&amp;keyval, NULL, NULL, &amp;consumed);
if (keyval == GDK_PLUS &amp;&amp;
(event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == GDK_CONTROL_MASK)
 / * Control was pressed * / 
&lt;/programlisting&gt;&lt;/informalexample&gt;
&lt;para&gt;
An older interpretation @consumed_modifiers was that it contained
all modifiers that might affect the translation of the key;
this allowed accelerators to be stored with irrelevant consumed
modifiers, by doing:&lt;/para&gt;
&lt;informalexample&gt;&lt;programlisting&gt;
 / * XXX Don't do this XXX * / 
if (keyval == accel_keyval &amp;&amp;
(event-&gt;state &amp; ~consumed &amp; ALL_ACCELS_MASK) == (accel_mods &amp; ~consumed))
 / * Accelerator was pressed * / 
&lt;/programlisting&gt;&lt;/informalexample&gt;
&lt;para&gt;
However, this did not work if multi-modifier combinations were
used in the keymap, since, for instance, &lt;literal&gt;&lt;Control&gt;&lt;/literal&gt;
would be masked out even if only &lt;literal&gt;&lt;Control&gt;&lt;Alt&gt;&lt;/literal&gt;
was used in the keymap. To support this usage as well as well as
possible, all &lt;emphasis&gt;single modifier&lt;/emphasis&gt; combinations
that could affect the key for any combination of modifiers will
be returned in @consumed_modifiers; multi-modifier combinations
are returned only when actually found in @state. When you store
accelerators, you should always store them with consumed modifiers
removed. Store &lt;literal&gt;&lt;Control&gt;plus&lt;/literal&gt;,
not &lt;literal&gt;&lt;Control&gt;&lt;Shift&gt;plus&lt;/literal&gt;,
&lt;/para&gt;&lt;/note&gt;


</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkKeymap
</parameter_description>
</parameter>
<parameter name="hardware_keycode">
<parameter_description> a keycode
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a modifier state
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> active keyboard group
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> return location for keyval, or %NULL
</parameter_description>
</parameter>
<parameter name="effective_group">
<parameter_description> return location for effective
group, or %NULL
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> return location for level, or %NULL
</parameter_description>
</parameter>
<parameter name="consumed_modifiers">
<parameter_description> return location for modifiers
that were used to determine the group or level, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a keyval bound to the keycode/state/group
</return>
</function>

<function name="gdk_keyval_convert_case">
<description>
Obtains the upper- and lower-case versions of the keyval @symbol.
Examples of keyvals are #GDK_KEY_a, #GDK_KEY_Enter, #GDK_KEY_F1, etc.

</description>
<parameters>
<parameter name="symbol">
<parameter_description> a keyval
</parameter_description>
</parameter>
<parameter name="lower">
<parameter_description> return location for lowercase version of @symbol
</parameter_description>
</parameter>
<parameter name="upper">
<parameter_description> return location for uppercase version of @symbol
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_keyval_from_name">
<description>
Converts a key name to a key value.

The names are the same as those in the
&lt;filename&gt;&lt;gdk/gdkkeysyms.h&gt;&lt;/filename&gt; header file
but without the leading &quot;GDK_KEY_&quot;.


</description>
<parameters>
<parameter name="keyval_name">
<parameter_description> a key name
</parameter_description>
</parameter>
</parameters>
<return> the corresponding key value, or %GDK_KEY_VoidSymbol
if the key name is not a valid key
</return>
</function>

<function name="gdk_keyval_is_lower">
<description>
Returns %TRUE if the given key value is in lower case.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @keyval is in lower case, or if @keyval is not
subject to case conversion.
</return>
</function>

<function name="gdk_keyval_is_upper">
<description>
Returns %TRUE if the given key value is in upper case.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @keyval is in upper case, or if @keyval is not subject to
case conversion.
</return>
</function>

<function name="gdk_keyval_name">
<description>
Converts a key value into a symbolic name.

The names are the same as those in the
&lt;filename&gt;&lt;gdk/gdkkeysyms.h&gt;&lt;/filename&gt; header file
but without the leading &quot;GDK_KEY_&quot;.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value
</parameter_description>
</parameter>
</parameters>
<return> a string containing the name of the key,
or %NULL if @keyval is not a valid key. The string should not be
modified.
</return>
</function>

<function name="gdk_keyval_to_lower">
<description>
Converts a key value to lower case, if applicable.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> the lower case form of @keyval, or @keyval itself if it is already
in lower case or it is not subject to case conversion.
</return>
</function>

<function name="gdk_keyval_to_unicode">
<description>
Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)
character.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a GDK key symbol 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding unicode character, or 0 if there
is no corresponding character.
</return>
</function>

<function name="gdk_keyval_to_upper">
<description>
Converts a key value to upper case, if applicable.


</description>
<parameters>
<parameter name="keyval">
<parameter_description> a key value.
</parameter_description>
</parameter>
</parameters>
<return> the upper case form of @keyval, or @keyval itself if it is already
in upper case or it is not subject to case conversion.
</return>
</function>

<function name="gdk_list_visuals">
<description>
Lists the available visuals for the default screen.
(See gdk_screen_list_visuals())
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you're finished with it.


</description>
<parameters>
</parameters>
<return>
a list of visuals; the list must be freed, but not its contents
</return>
</function>

<function name="gdk_notify_startup_complete">
<description>
Indicates to the GUI environment that the application has finished
loading. If the applications opens windows, this function is
normally called after opening the application's initial set of
windows.

GTK+ will call this function automatically after opening the first
#GtkWindow unless gtk_window_set_auto_startup_notification() is called
to disable that feature.

Since: 2.2

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_notify_startup_complete_with_id">
<description>
Indicates to the GUI environment that the application has
finished loading, using a given identifier.

GTK+ will call this function automatically for #GtkWindow
with custom startup-notification identifier unless
gtk_window_set_auto_startup_notification() is called to
disable that feature.

Since: 2.12

</description>
<parameters>
<parameter name="startup_id">
<parameter_description> a startup-notification identifier, for which
notification process should be completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_offscreen_window_get_embedder">
<description>
Gets the window that @window is embedded in.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the embedding #GdkWindow, or %NULL
if @window is not an mbedded offscreen window

</return>
</function>

<function name="gdk_offscreen_window_get_surface">
<description>
Gets the offscreen surface that an offscreen window renders into.
If you need to keep this around over window resizes, you need to
add a reference to it.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The offscreen surface, or %NULL if not offscreen
</return>
</function>

<function name="gdk_offscreen_window_set_embedder">
<description>
Sets @window to be embedded in @embedder.

To fully embed an offscreen window, in addition to calling this
function, it is also necessary to handle the #GdkWindow::pick-embedded-child
signal on the @embedder and the #GdkWindow::to-embedder and
#GdkWindow::from-embedder signals on @window.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="embedder">
<parameter_description> the #GdkWindow that @window gets embedded in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pango_context_get">
<description>
Creates a #PangoContext for the default GDK screen.

The context must be freed when you're finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options (see
#cairo_font_options_t) for the default screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen's font rendering settings.


</description>
<parameters>
</parameters>
<return> a new #PangoContext for the default display
</return>
</function>

<function name="gdk_pango_context_get_for_screen">
<description>
Creates a #PangoContext for @screen.

The context must be freed when you're finished with it.

When using GTK+, normally you should use gtk_widget_get_pango_context()
instead of this function, to get the appropriate context for
the widget you intend to render text onto.

The newly created context will have the default font options
(see #cairo_font_options_t) for the screen; if these options
change it will not be updated. Using gtk_widget_get_pango_context()
is more convenient if you want to keep a context around and track
changes to the screen's font rendering settings.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen for which the context is to be created.
</parameter_description>
</parameter>
</parameters>
<return> a new #PangoContext for @screen

</return>
</function>

<function name="gdk_pango_layout_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given ranges
of text would be drawn. @x_origin and @y_origin are the top left point
to center the layout. @index_ranges should contain
ranges of bytes in the layout's text.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn layout may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.


</description>
<parameters>
<parameter name="layout">
<parameter_description> a #PangoLayout 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> Y pixel where you intend to draw the layout with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_pango_layout_line_get_clip_region">
<description>
Obtains a clip region which contains the areas where the given
ranges of text would be drawn. @x_origin and @y_origin are the top left
position of the layout. @index_ranges
should contain ranges of bytes in the layout's text. The clip
region will include space to the left or right of the line (to the
layout bounding box) if you have indexes above or below the indexes
contained inside the line. This is to draw the selection all the way
to the side of the layout. However, the clip region is in line coordinates,
not layout coordinates.

Note that the regions returned correspond to logical extents of the text
ranges, not ink extents. So the drawn line may in fact touch areas out of
the clip region.  The clip region is mainly useful for highlightling parts
of text, such as when text is selected.


</description>
<parameters>
<parameter name="line">
<parameter_description> a #PangoLayoutLine 
</parameter_description>
</parameter>
<parameter name="x_origin">
<parameter_description> X pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="y_origin">
<parameter_description> baseline pixel where you intend to draw the layout line with this clip
</parameter_description>
</parameter>
<parameter name="index_ranges">
<parameter_description> array of byte indexes into the layout,
where even members of array are start indexes and odd elements
are end indexes
</parameter_description>
</parameter>
<parameter name="n_ranges">
<parameter_description> number of ranges in @index_ranges, i.e. half the size of @index_ranges
</parameter_description>
</parameter>
</parameters>
<return> a clip region containing the given ranges
</return>
</function>

<function name="gdk_parse_args">
<description>
Parse command line arguments, and store for future
use by calls to gdk_display_open().

Any arguments used by GDK are removed from the array and @argc and @argv are
updated accordingly.

You shouldn't call this function explicitely if you are using
gtk_init(), gtk_init_check(), gdk_init(), or gdk_init_check().

Since: 2.2

</description>
<parameters>
<parameter name="argc">
<parameter_description> the number of command line arguments.
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> the array of command line arguments.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_pixbuf_get_from_surface">
<description>
Transfers image data from a #cairo_surface_t and converts it to an RGB(A)
representation inside a #GdkPixbuf. This allows you to efficiently read
individual pixels from cairo surfaces. For #GdkWindows, use
gdk_pixbuf_get_from_window() instead.

This function will create an RGB pixbuf with 8 bits per channel.
The pixbuf will contain an alpha channel if the @surface contains one.


</description>
<parameters>
<parameter name="surface">
<parameter_description> surface to copy from
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within @surface
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within @surface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference
count of 1, or %NULL on error
</return>
</function>

<function name="gdk_pixbuf_get_from_window">
<description>
Transfers image data from a #GdkWindow and converts it to an RGB(A)
representation inside a #GdkPixbuf. In other words, copies
image data from a server-side drawable to a client-side RGB(A) buffer.
This allows you to efficiently read individual pixels on the client side.

This function will create an RGB pixbuf with 8 bits per channel with
the same size specified by the @width and @height arguments. The pixbuf
will contain an alpha channel if the @window contains one.

If the window is off the screen, then there is no image data in the
obscured/offscreen regions to be placed in the pixbuf. The contents of
portions of the pixbuf corresponding to the offscreen region are undefined.

If the window you're obtaining data from is partially obscured by
other windows, then the contents of the pixbuf areas corresponding
to the obscured regions are undefined.

If the window is not mapped (typically because it's iconified/minimized
or not on the current workspace), then %NULL will be returned.

If memory can't be allocated for the return value, %NULL will be returned
instead.

(In short, there are several ways this function can fail, and if it fails
it returns %NULL; so check the return value.)


</description>
<parameters>
<parameter name="window">
<parameter_description> Source window
</parameter_description>
</parameter>
<parameter name="src_x">
<parameter_description> Source X coordinate within @window
</parameter_description>
</parameter>
<parameter name="src_y">
<parameter_description> Source Y coordinate within @window
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Width in pixels of region to get
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Height in pixels of region to get
</parameter_description>
</parameter>
</parameters>
<return> A newly-created pixbuf with a reference
count of 1, or %NULL on error
</return>
</function>

<function name="gdk_pointer_grab">
<description>
Grabs the pointer (usually a mouse) so that all events are passed to this
application until the pointer is ungrabbed with gdk_pointer_ungrab(), or
the grab window becomes unviewable.
This overrides any previous pointer grab by this client.

Pointer grabs are used for operations which need complete control over mouse
events, even if the mouse leaves the application.
For example in GTK+ it is used for Drag and Drop, for dragging the handle in
the #GtkHPaned and #GtkVPaned widgets.

Note that if the event mask of an X window has selected both button press and
button release events, then a button press event will cause an automatic
pointer grab until the button is released.
X does this automatically since most applications expect to receive button
press and release events in pairs.
It is equivalent to a pointer grab on the window with @owner_events set to
%TRUE.

If you set up anything at the time you take the grab that needs to be cleaned
up when the grab ends, you should handle the #GdkEventGrabBroken events that
are emitted when the grab ends unvoluntarily.

Deprecated: 3.0: Use gdk_device_grab() instead.

</description>
<parameters>
<parameter name="window">
<parameter_description> the #GdkWindow which will own the grab (the grab window).
</parameter_description>
</parameter>
<parameter name="owner_events">
<parameter_description> if %FALSE then all pointer events are reported with respect to
@window and are only reported if selected by @event_mask. If %TRUE then pointer
events for this application are reported as normal, but pointer events outside
this application are reported with respect to @window and only if selected by
@event_mask. In either mode, unreported events are discarded.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> specifies the event mask, which is used in accordance with
@owner_events. Note that only pointer events (i.e. button and motion events)
may be selected.
</parameter_description>
</parameter>
<parameter name="confine_to">
<parameter_description> If non-%NULL, the pointer will be confined to this
window during the grab. If the pointer is outside @confine_to, it will
automatically be moved to the closest edge of @confine_to and enter
and leave events will be generated as necessary.
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> the cursor to display while the grab is active. If this is %NULL then
the normal cursors are used for @window and its descendants, and the cursor
for @window is used for all other windows.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> the timestamp of the event which led to this pointer grab. This usually
comes from a #GdkEventButton struct, though %GDK_CURRENT_TIME can be used if
the time isn't known.
</parameter_description>
</parameter>
</parameters>
<return> %GDK_GRAB_SUCCESS if the grab was successful.

</return>
</function>

<function name="gdk_pointer_is_grabbed">
<description>
Returns %TRUE if the pointer on the default display is currently 
grabbed by this application.

Note that this does not take the inmplicit pointer grab on button
presses into account.

Deprecated: 3.0: Use gdk_display_device_is_grabbed() instead.

</description>
<parameters>
</parameters>
<return> %TRUE if the pointer is currently grabbed by this application.

</return>
</function>

<function name="gdk_pointer_ungrab">
<description>
Ungrabs the pointer on the default display, if it is grabbed by this 
application.

Deprecated: 3.0: Use gdk_device_ungrab(), together with gdk_device_grab()
instead.

</description>
<parameters>
<parameter name="time_">
<parameter_description> a timestamp from a #GdkEvent, or %GDK_CURRENT_TIME if no 
timestamp is available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_property_change">
<description>
Changes the contents of a property on a window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the property to change
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new type for the property. If @mode is
%GDK_PROP_MODE_PREPEND or %GDK_PROP_MODE_APPEND, then this
must match the existing type or an error will occur.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the new format for the property. If @mode is
%GDK_PROP_MODE_PREPEND or %GDK_PROP_MODE_APPEND, then this
must match the existing format or an error will occur.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a value describing how the new data is to be combined
with the current data.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data (a &lt;literal&gt;guchar *&lt;/literal&gt;
&lt;literal&gt;gushort *&lt;/literal&gt;, or &lt;literal&gt;gulong *&lt;/literal&gt;,
depending on @format), cast to a &lt;literal&gt;guchar *&lt;/literal&gt;.
</parameter_description>
</parameter>
<parameter name="nelements">
<parameter_description> the number of elements of size determined by the format,
contained in @data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_property_delete">
<description>
Deletes a property from a window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the property to delete
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_property_get">
<description>
Retrieves a portion of the contents of a property. If the
property does not exist, then the function returns %FALSE,
and %GDK_NONE will be stored in @actual_property_type.

&lt;note&gt;
&lt;para&gt;
The XGetWindowProperty() function that gdk_property_get()
uses has a very confusing and complicated set of semantics.
Unfortunately, gdk_property_get() makes the situation
worse instead of better (the semantics should be considered
undefined), and also prints warnings to stderr in cases where it
should return a useful error to the program. You are advised to use
XGetWindowProperty() directly until a replacement function for
gdk_property_get()
is provided.
&lt;/para&gt;
&lt;/note&gt;


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> the property to retrieve
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the desired property type, or %GDK_NONE, if any type of data
is acceptable. If this does not match the actual
type, then @actual_format and @actual_length will
be filled in, a warning will be printed to stderr
and no data will be returned.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset into the property at which to begin
retrieving data, in 4 byte units.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of the data to retrieve in bytes.  Data is
considered to be retrieved in 4 byte chunks, so @length
will be rounded up to the next highest 4 byte boundary
(so be careful not to pass a value that might overflow
when rounded up).
</parameter_description>
</parameter>
<parameter name="pdelete">
<parameter_description> if %TRUE, delete the property after retrieving the
data.
</parameter_description>
</parameter>
<parameter name="actual_property_type">
<parameter_description> location to store the
actual type of the property.
</parameter_description>
</parameter>
<parameter name="actual_format">
<parameter_description> location to store the actual return format of the
data; either 8, 16 or 32 bits.
</parameter_description>
</parameter>
<parameter name="actual_length">
<parameter_description> location to store the length of the retrieved data, in
bytes.  Data returned in the 32 bit format is stored
in a long variable, so the actual number of 32 bit
elements should be be calculated via
@actual_length / sizeof(glong) to ensure portability to
64 bit systems.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location
to store a pointer to the data. The retrieved data should be
freed with g_free() when you are finished using it.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if data was successfully received and stored
in @data, otherwise %FALSE.
</return>
</function>

<function name="gdk_query_depths">
<description>
This function returns the available bit depths for the default
screen. It's equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the depth field in each
visual, removing duplicates.

The array returned by this function should not be freed.

</description>
<parameters>
<parameter name="depths">
<parameter_description> return
location for available depths
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for number of available depths
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_query_visual_types">
<description>
This function returns the available visual types for the default
screen. It's equivalent to listing the visuals
(gdk_list_visuals()) and then looking at the type field in each
visual, removing duplicates.

The array returned by this function should not be freed.

</description>
<parameters>
<parameter name="visual_types">
<parameter_description> return
location for the available visual types
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> return location for the number of available visual types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rectangle_intersect">
<description>
Calculates the intersection of two rectangles. It is allowed for
@dest to be the same as either @src1 or @src2. If the rectangles 
do not intersect, @dest's width and height is set to 0 and its x 
and y values are undefined. If you are only interested in whether
the rectangles intersect, but not in the intersecting area itself,
pass %NULL for @dest.


</description>
<parameters>
<parameter name="src1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the
intersection of @src1 and @src2, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the rectangles intersect.
</return>
</function>

<function name="gdk_rectangle_union">
<description>
Calculates the union of two rectangles.
The union of rectangles @src1 and @src2 is the smallest rectangle which
includes both @src1 and @src2 within it.
It is allowed for @dest to be the same as either @src1 or @src2.

</description>
<parameters>
<parameter name="src1">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="src2">
<parameter_description> a #GdkRectangle
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> return location for the union of @src1 and @src2
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgba_copy">
<description>
Makes a copy of a #GdkRGBA structure.

The result must be freed through gdk_rgba_free().

Since: 3.0

</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated #GdkRGBA, with the same contents as @rgba

</return>
</function>

<function name="gdk_rgba_equal">
<description>
Compares two RGBA colors.

Since: 3.0

</description>
<parameters>
<parameter name="p1">
<parameter_description> a #GdkRGBA pointer
</parameter_description>
</parameter>
<parameter name="p2">
<parameter_description> another #GdkRGBA pointer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two colors compare equal

</return>
</function>

<function name="gdk_rgba_free">
<description>
Frees a #GdkRGBA struct created with gdk_rgba_copy()

Since: 3.0

</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_rgba_hash">
<description>
A hash function suitable for using for a hash
table that stores #GdkRGBAs.

Since: 3.0

</description>
<parameters>
<parameter name="p">
<parameter_description> a #GdkRGBA pointer
</parameter_description>
</parameter>
</parameters>
<return> The hash value for @p

</return>
</function>

<function name="gdk_rgba_parse">
<description>
Parses a textual representation of a color, filling in
the &lt;structfield&gt;red&lt;/structfield&gt;, &lt;structfield&gt;green&lt;/structfield&gt;,
&lt;structfield&gt;blue&lt;/structfield&gt; and &lt;structfield&gt;alpha&lt;/structfield&gt;
fields of the @rgba struct.

The string can be either one of:
&lt;itemizedlist&gt;
&lt;listitem&gt;
A standard name (Taken from the X11 rgb.txt file).
&lt;/listitem&gt;
&lt;listitem&gt;
A hex value in the form '&#35;rgb' '&#35;rrggbb' '&#35;rrrgggbbb'
or '&#35;rrrrggggbbbb'
&lt;/listitem&gt;
&lt;listitem&gt;
A RGB color in the form 'rgb(r,g,b)' (In this case the color will
have full opacity)
&lt;/listitem&gt;
&lt;listitem&gt;
A RGBA color in the form 'rgba(r,g,b,a)'
&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Where 'r', 'g', 'b' and 'a' are respectively the red, green, blue and
alpha color values. In the last two cases, r g and b are either integers
in the range 0 to 255 or precentage values in the range 0% to 100%, and
a is a floating point value in the range 0 to 1.

Since: 3.0

</description>
<parameters>
<parameter name="rgba">
<parameter_description> the #GdkRGBA struct to fill in
</parameter_description>
</parameter>
<parameter name="spec">
<parameter_description> the string specifying the color
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing succeeded

</return>
</function>

<function name="gdk_rgba_to_string">
<description>
Returns a textual specification of @rgba in the form
&lt;literal&gt;rgb (r, g, b)&lt;/literal&gt; or
&lt;literal&gt;rgba (r, g, b, a)&lt;/literal&gt;,
where 'r', 'g', 'b' and 'a' represent the red, green,
blue and alpha values respectively. r, g, and b are
represented as integers in the range 0 to 255, and a
is represented as floating point value in the range 0 to 1.

These string forms are string forms those supported by
the CSS3 colors module, and can be parsed by gdk_rgba_parse().

Note that this string representation may loose some
precision, since r, g and b are represented as 8-bit
integers. If this is a concern, you should use a
different representation.

Since: 3.0

</description>
<parameters>
<parameter name="rgba">
<parameter_description> a #GdkRGBA
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated text string

</return>
</function>

<function name="gdk_screen_get_active_window">
<description>
Returns the screen's currently active window.

On X11, this is done by inspecting the _NET_ACTIVE_WINDOW property
on the root window, as described in the &lt;ulink
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended Window
Manager Hints&lt;/ulink&gt;. If there is no currently currently active
window, or the window manager does not support the
_NET_ACTIVE_WINDOW hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned window should be unrefed using g_object_unref() when
no longer needed.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the currently active window, or %NULL.

</return>
</function>

<function name="gdk_screen_get_default">
<description>
Gets the default screen for the default display. (See
gdk_display_get_default ()).

Since: 2.2

</description>
<parameters>
</parameters>
<return> a #GdkScreen, or %NULL if there is no default display.

</return>
</function>

<function name="gdk_screen_get_display">
<description>
Gets the display to which the @screen belongs.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the display to which @screen belongs

</return>
</function>

<function name="gdk_screen_get_font_options">
<description>
Gets any options previously set with gdk_screen_set_font_options().

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the current font options, or %NULL if no default
font options have been set.

</return>
</function>

<function name="gdk_screen_get_height">
<description>
Gets the height of @screen in pixels

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the height of @screen in pixels.

</return>
</function>

<function name="gdk_screen_get_height_mm">
<description>
Returns the height of @screen in millimeters.
Note that on some X servers this value will not be correct.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the heigth of @screen in millimeters.

</return>
</function>

<function name="gdk_screen_get_monitor_at_point">
<description>
Returns the monitor number in which the point (@x,@y) is located.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate in the virtual screen.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate in the virtual screen.
</parameter_description>
</parameter>
</parameters>
<return> the monitor number in which the point (@x,@y) lies, or
a monitor close to (@x,@y) if the point is not in any monitor.

</return>
</function>

<function name="gdk_screen_get_monitor_at_window">
<description>
Returns the number of the monitor in which the largest area of the
bounding rectangle of @window resides.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the monitor number in which most of @window is located,
or if @window does not intersect any monitors, a monitor,
close to @window.

</return>
</function>

<function name="gdk_screen_get_monitor_geometry">
<description>
Retrieves the #GdkRectangle representing the size and position of
the individual monitor within the entire screen area.

Monitor numbers start at 0. To obtain the number of monitors of
@screen, use gdk_screen_get_n_monitors().

Note that the size of the entire screen area can be retrieved via
gdk_screen_get_width() and gdk_screen_get_height().

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> the monitor number
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GdkRectangle to be filled with
the monitor geometry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_monitor_height_mm">
<description>
Gets the height in millimeters of the specified monitor.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> the height of the monitor, or -1 if not available

</return>
</function>

<function name="gdk_screen_get_monitor_plug_name">
<description>
Returns the output name of the specified monitor.
Usually something like VGA, DVI, or TV, not the actual
product name of the display device.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string containing the name of the monitor,
or %NULL if the name cannot be determined

</return>
</function>

<function name="gdk_screen_get_monitor_width_mm">
<description>
Gets the width in millimeters of the specified monitor, if available.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> the width of the monitor, or -1 if not available

</return>
</function>

<function name="gdk_screen_get_monitor_workarea">
<description>
Retrieves the #GdkRectangle representing the size and position of
the &quot;work area&quot; on a monitor within the entire screen area.

The work area should be considered when positioning menus and
similar popups, to avoid placing them below panels, docks or other
desktop components.

Monitor numbers start at 0. To obtain the number of monitors of
@screen, use gdk_screen_get_n_monitors().

Since: 3.4

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> the monitor number
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GdkRectangle to be filled with
the monitor workarea
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_get_n_monitors">
<description>
Returns the number of monitors which @screen consists of.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> number of monitors which @screen consists of

</return>
</function>

<function name="gdk_screen_get_number">
<description>
Gets the index of @screen among the screens in the display
to which it belongs. (See gdk_screen_get_display())

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the index

</return>
</function>

<function name="gdk_screen_get_primary_monitor">
<description>
Gets the primary monitor for @screen.  The primary monitor
is considered the monitor where the 'main desktop' lives.
While normal application windows typically allow the window
manager to place the windows, specialized desktop applications
such as panels should place themselves on the primary monitor.

If no primary monitor is configured by the user, the return value
will be 0, defaulting to the first monitor.

Since: 2.20

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> An integer index for the primary monitor, or 0 if none is configured.

</return>
</function>

<function name="gdk_screen_get_resolution">
<description>
Gets the resolution for font handling on the screen; see
gdk_screen_set_resolution() for full details.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the current resolution, or -1 if no resolution
has been set.

</return>
</function>

<function name="gdk_screen_get_rgba_visual">
<description>
Gets a visual to use for creating windows with an alpha channel.
The windowing system on which GTK+ is running
may not support this capability, in which case %NULL will
be returned. Even if a non-%NULL value is returned, its
possible that the window's alpha channel won't be honored
when displaying the window on the screen: in particular, for
X an appropriate windowing manager and compositing manager
must be running to provide appropriate display.

This functionality is not implemented in the Windows backend.

For setting an overall opacity for a top-level window, see
gdk_window_set_opacity().

Since: 2.8

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> a visual to use for windows with an
alpha channel or %NULL if the capability is not available.

</return>
</function>

<function name="gdk_screen_get_root_window">
<description>
Gets the root window of @screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the root window

</return>
</function>

<function name="gdk_screen_get_setting">
<description>
Retrieves a desktop-wide setting such as double-click time
for the #GdkScreen @screen.

FIXME needs a list of valid settings here, or a link to
more information.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the #GdkScreen where the setting is located
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the setting
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise.

</return>
</function>

<function name="gdk_screen_get_system_visual">
<description>
Get the system's default visual for @screen.
This is the visual for the root window of the display.
The return value should not be freed.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return> the system visual

</return>
</function>

<function name="gdk_screen_get_toplevel_windows">
<description>
Obtains a list of all toplevel windows known to GDK on the screen @screen.
A toplevel window is a child of the root window (see
gdk_get_default_root_window()).

The returned list should be freed with g_list_free(), but
its elements need not be freed.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> The #GdkScreen where the toplevels are located.
</parameter_description>
</parameter>
</parameters>
<return>
list of toplevel windows, free with g_list_free()

</return>
</function>

<function name="gdk_screen_get_width">
<description>
Gets the width of @screen in pixels

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the width of @screen in pixels.

</return>
</function>

<function name="gdk_screen_get_width_mm">
<description>
Gets the width of @screen in millimeters.
Note that on some X servers this value will not be correct.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the width of @screen in millimeters.

</return>
</function>

<function name="gdk_screen_get_window_stack">
<description>
Returns a #GList of #GdkWindow&lt;!-- --&gt;s representing the current
window stack.

On X11, this is done by inspecting the _NET_CLIENT_LIST_STACKING
property on the root window, as described in the &lt;ulink
url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended Window
Manager Hints&lt;/ulink&gt;. If the window manager does not support the
_NET_CLIENT_LIST_STACKING hint, this function returns %NULL.

On other platforms, this function may return %NULL, depending on whether
it is implementable on that platform.

The returned list is newly allocated and owns references to the
windows it contains, so it should be freed using g_list_free() and
its windows unrefed using g_object_unref() when no longer needed.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return>
a list of #GdkWindow&lt;!-- --&gt;s for the current window stack,
or %NULL.

</return>
</function>

<function name="gdk_screen_height">
<description>
Returns the height of the default screen in pixels.


</description>
<parameters>
</parameters>
<return> the height of the default screen in pixels.
</return>
</function>

<function name="gdk_screen_height_mm">
<description>
Returns the height of the default screen in millimeters.
Note that on many X servers this value will not be correct.


</description>
<parameters>
</parameters>
<return> the height of the default screen in millimeters,
though it is not always correct.
</return>
</function>

<function name="gdk_screen_is_composited">
<description>
Returns whether windows with an RGBA visual can reasonably
be expected to have their alpha channel drawn correctly on
the screen.

On X11 this function returns whether a compositing manager is
compositing @screen.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> Whether windows with RGBA visuals can reasonably be
expected to have their alpha channels drawn correctly on the screen.

</return>
</function>

<function name="gdk_screen_list_visuals">
<description>
Lists the available visuals for the specified @screen.
A visual describes a hardware image data format.
For example, a visual might support 24-bit color, or 8-bit color,
and might expect pixels to be in a certain format.

Call g_list_free() on the return value when you're finished with it.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
</parameters>
<return>
a list of visuals; the list must be freed, but not its contents

</return>
</function>

<function name="gdk_screen_make_display_name">
<description>
Determines the name to pass to gdk_display_open() to get
a #GdkDisplay with this screen as the default screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string, free with g_free()

</return>
</function>

<function name="gdk_screen_set_font_options">
<description>
Sets the default font options for the screen. These
options will be set on any #PangoContext's newly created
with gdk_pango_context_get_for_screen(). Changing the
default set of font options does not affect contexts that
have already been created.

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> a #cairo_font_options_t, or %NULL to unset any
previously set default font options.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_set_resolution">
<description>
Sets the resolution for font handling on the screen. This is a
scale factor between points specified in a #PangoFontDescription
and cairo units. The default value is 96, meaning that a 10 point
font will be 13 units high. (10 * 96. / 72. = 13.3).

Since: 2.10

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="dpi">
<parameter_description> the resolution in &quot;dots per inch&quot;. (Physical inches aren't actually
involved; the terminology is conventional.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_screen_width">
<description>
Returns the width of the default screen in pixels.


</description>
<parameters>
</parameters>
<return> the width of the default screen in pixels.
</return>
</function>

<function name="gdk_screen_width_mm">
<description>
Returns the width of the default screen in millimeters.
Note that on many X servers this value will not be correct.


</description>
<parameters>
</parameters>
<return> the width of the default screen in millimeters,
though it is not always correct.
</return>
</function>

<function name="gdk_selection_owner_get">
<description>
Determines the owner of the given selection.


</description>
<parameters>
<parameter name="selection">
<parameter_description> an atom indentifying a selection.
</parameter_description>
</parameter>
</parameters>
<return> if there is a selection owner for
this window, and it is a window known to the current
process, the #GdkWindow that owns the selection, otherwise
%NULL. Note that the return value may be owned
by a different process if a foreign window
was previously created for that window, but
a new foreign window will never be created by
this call.
</return>
</function>

<function name="gdk_selection_owner_get_for_display">
<description>
Determine the owner of the given selection.

Note that the return value may be owned by a different
process if a foreign window was previously created for that
window, but a new foreign window will never be created by this call.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom indentifying a selection
</parameter_description>
</parameter>
</parameters>
<return> if there is a selection owner for this window,
and it is a window known to the current process, the #GdkWindow that
owns the selection, otherwise %NULL.

</return>
</function>

<function name="gdk_selection_owner_set">
<description>
Sets the owner of the given selection.


</description>
<parameters>
<parameter name="owner">
<parameter_description> a #GdkWindow or %NULL to indicate that the
the owner for the given should be unset.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom identifying a selection.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp to use when setting the selection.
If this is older than the timestamp given last
time the owner was set for the given selection, the
request will be ignored.
</parameter_description>
</parameter>
<parameter name="send_event">
<parameter_description> if %TRUE, and the new owner is different
from the current owner, the current owner
will be sent a SelectionClear event.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection owner was successfully
changed to @owner, otherwise %FALSE.
</return>
</function>

<function name="gdk_selection_owner_set_for_display">
<description>
Sets the #GdkWindow @owner as the current owner of the selection @selection.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> a #GdkWindow or %NULL to indicate that the owner for
the given should be unset
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> an atom identifying a selection
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp to use when setting the selection
If this is older than the timestamp given last time the owner was
set for the given selection, the request will be ignored
</parameter_description>
</parameter>
<parameter name="send_event">
<parameter_description> if %TRUE, and the new owner is different from the current
owner, the current owner will be sent a SelectionClear event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the selection owner was successfully changed to owner,
otherwise %FALSE.

</return>
</function>

<function name="gdk_selection_property_get">
<description>
Retrieves selection data that was stored by the selection
data in response to a call to gdk_selection_convert(). This function
will not be used by applications, who should use the #GtkClipboard
API instead.


</description>
<parameters>
<parameter name="requestor">
<parameter_description> the window on which the data is stored
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location to store a pointer to the retrieved data.
       If the retrieval failed, %NULL we be stored here, otherwise, it
       will be non-%NULL and the returned data should be freed with g_free()
       when you are finished using it. The length of the
       allocated memory is one more than the length
       of the returned data, and the final byte will always
       be zero, to ensure nul-termination of strings
</parameter_description>
</parameter>
<parameter name="prop_type">
<parameter_description> location to store the type of the property
</parameter_description>
</parameter>
<parameter name="prop_format">
<parameter_description> location to store the format of the property
</parameter_description>
</parameter>
</parameters>
<return> the length of the retrieved data.
</return>
</function>

<function name="gdk_selection_send_notify">
<description>
Sends a response to SelectionRequest event.

</description>
<parameters>
<parameter name="requestor">
<parameter_description> window to which to deliver response.
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> selection that was requested.
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> target that was selected.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> property in which the selection owner stored the
data, or %GDK_NONE to indicate that the request
was rejected.
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_selection_send_notify_for_display">
<description>
Send a response to SelectionRequest event.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where @requestor is realized
</parameter_description>
</parameter>
<parameter name="requestor">
<parameter_description> window to which to deliver response
</parameter_description>
</parameter>
<parameter name="selection">
<parameter_description> selection that was requested
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> target that was selected
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> property in which the selection owner stored the data,
or %GDK_NONE to indicate that the request was rejected
</parameter_description>
</parameter>
<parameter name="time_">
<parameter_description> timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_double_click_time">
<description>
Set the double click time for the default display. See
gdk_display_set_double_click_time(). 
See also gdk_display_set_double_click_distance().
Applications should &lt;emphasis&gt;not&lt;/emphasis&gt; set this, it is a 
global user-configured setting.

</description>
<parameters>
<parameter name="msec">
<parameter_description> double click time in milliseconds (thousandths of a second)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_program_class">
<description>
Sets the program class. The X11 backend uses the program class to set
the class name part of the &lt;literal&gt;WM_CLASS&lt;/literal&gt; property on
toplevel windows; see the ICCCM.

</description>
<parameters>
<parameter name="program_class">
<parameter_description> a string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_set_show_events">
<description>
Sets whether a trace of received events is output.
Note that GTK+ must be compiled with debugging (that is,
configured using the &lt;option&gt;--enable-debug&lt;/option&gt; option)
to use this option.

</description>
<parameters>
<parameter name="show_events">
<parameter_description>  %TRUE to output event debugging information.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_setting_get">
<description>
Obtains a desktop-wide setting, such as the double-click time,
for the default screen. See gdk_screen_get_setting().


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the setting.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location to store the value of the setting.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the setting existed and a value was stored
in @value, %FALSE otherwise.
</return>
</function>

<function name="gdk_test_render_sync">
<description>
Retrieves a pixel from @window to force the windowing
system to carry out any pending rendering commands.

This function is intended to be used to synchronize with rendering
pipelines, to benchmark windowing system rendering operations.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a mapped #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_test_simulate_button">
<description>
This function is intended to be used in GTK+ test programs.
It will warp the mouse pointer to the given (@x,@y) coordinates
within @window and simulate a button press or release event.
Because the mouse pointer needs to be warped to the target
location, use of this function outside of test programs that
run in their own virtual windowing system (e.g. Xvfb) is not
recommended.

Also, gdk_test_simulate_button() is a fairly low level function,
for most testing purposes, gtk_test_widget_click() is the right
function to call which will generate a button press event followed
by its accompanying button release event.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow to simulate a button event for
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      x coordinate within @window for the button event
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>      y coordinate within @window for the button event
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> Number of the pointer button for the event, usually 1, 2 or 3
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> Keyboard modifiers the event is setup with
</parameter_description>
</parameter>
<parameter name="button_pressrelease">
<parameter_description> either %GDK_BUTTON_PRESS or %GDK_BUTTON_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> whether all actions necessary for a button event simulation
were carried out successfully

</return>
</function>

<function name="gdk_test_simulate_key">
<description>
This function is intended to be used in GTK+ test programs.
If (@x,@y) are &gt; (-1,-1), it will warp the mouse pointer to
the given (@x,@y) coordinates within @window and simulate a
key press or release event.

When the mouse pointer is warped to the target location, use
of this function outside of test programs that run in their
own virtual windowing system (e.g. Xvfb) is not recommended.
If (@x,@y) are passed as (-1,-1), the mouse pointer will not
be warped and @window origin will be used as mouse pointer
location for the event.

Also, gdk_test_simulate_key() is a fairly low level function,
for most testing purposes, gtk_test_widget_send_key() is the
right function to call which will generate a key press event
followed by its accompanying key release event.

Since: 2.14

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow to simulate a key event for
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description>      x coordinate within @window for the key event
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>      y coordinate within @window for the key event
</parameter_description>
</parameter>
<parameter name="keyval">
<parameter_description> A GDK keyboard value
</parameter_description>
</parameter>
<parameter name="modifiers">
<parameter_description> Keyboard modifiers the event is setup with
</parameter_description>
</parameter>
<parameter name="key_pressrelease">
<parameter_description> either %GDK_KEY_PRESS or %GDK_KEY_RELEASE
</parameter_description>
</parameter>
</parameters>
<return> whether all actions necessary for a key event simulation
were carried out successfully

</return>
</function>

<function name="gdk_text_property_to_utf8_list_for_display">
<description>
Converts a text property in the given encoding to
a list of UTF-8 strings.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description>  a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding of the text
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>   the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the text to convert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description>   the length of @text, in bytes
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> location to store the list
of strings or %NULL. The list should be freed with
g_strfreev().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings in the resulting list

</return>
</function>

<function name="gdk_threads_add_idle">
<description>
A wrapper for the common usage of gdk_threads_add_idle_full() 
assigning the default priority, #G_PRIORITY_DEFAULT_IDLE.

See gdk_threads_add_idle_full().

Since: 2.12

</description>
<parameters>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_idle_full">
<description>
Adds a function to be called whenever there are no higher priority
events pending.  If the function returns %FALSE it is automatically
removed from the list of event sources and will not be called again.

This variant of g_idle_add_full() calls @function with the GDK lock
held. It can be thought of a MT-safe version for GTK+ widgets for the
following use case, where you have to worry about idle_callback()
running in thread A and accessing @self after it has been finalized
in thread B:

|[
static gboolean
idle_callback (gpointer data)
{
/ * gdk_threads_enter(); would be needed for g_idle_add() * /

SomeWidget *self = data;
/ * do stuff with self * /

self-&gt;idle_id = 0;

/ * gdk_threads_leave(); would be needed for g_idle_add() * /
return FALSE;
}

static void
some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;idle_id = gdk_threads_add_idle (idle_callback, self)
/ * using g_idle_add() here would require thread protection in the callback * /
}

static void
some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);
if (self-&gt;idle_id)
g_source_remove (self-&gt;idle_id);
G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|

Since: 2.12

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the idle source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description>   function to call when the idle is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout">
<description>
A wrapper for the common usage of gdk_threads_add_timeout_full() 
assigning the default priority, #G_PRIORITY_DEFAULT.

See gdk_threads_add_timeout_full().

Since: 2.12

</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
(1/1000ths of a second)
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout_full">
<description>
Sets a function to be called at regular intervals holding the GDK lock,
with the given priority.  The function is called repeatedly until it 
returns %FALSE, at which point the timeout is automatically destroyed 
and the function will not be called again.  The @notify function is
called when the timeout is destroyed.  The first call to the
function will be at the end of the first @interval.

Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).

This variant of g_timeout_add_full() can be thought of a MT-safe version 
for GTK+ widgets for the following use case:

|[
static gboolean timeout_callback (gpointer data)
{
SomeWidget *self = data;

/ * do stuff with self * /

self-&gt;timeout_id = 0;

return G_SOURCE_REMOVE;
}

static void some_widget_do_stuff_later (SomeWidget *self)
{
self-&gt;timeout_id = g_timeout_add (timeout_callback, self)
}

static void some_widget_finalize (GObject *object)
{
SomeWidget *self = SOME_WIDGET (object);

if (self-&gt;timeout_id)
g_source_remove (self-&gt;timeout_id);

G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|

Since: 2.12

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in milliseconds
(1/1000ths of a second)
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description>   function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout_seconds">
<description>
A wrapper for the common usage of gdk_threads_add_timeout_seconds_full() 
assigning the default priority, #G_PRIORITY_DEFAULT.

For details, see gdk_threads_add_timeout_full().

Since: 2.14

</description>
<parameters>
<parameter name="interval">
<parameter_description> the time between calls to the function, in seconds
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_add_timeout_seconds_full">
<description>
A variant of gdk_threads_add_timeout_full() with second-granularity.
See g_timeout_add_seconds_full() for a discussion of why it is
a good idea to use this function if you don't need finer granularity.

Since: 2.14

</description>
<parameters>
<parameter name="priority">
<parameter_description> the priority of the timeout source. Typically this will be in the
range between #G_PRIORITY_DEFAULT_IDLE and #G_PRIORITY_HIGH_IDLE.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the time between calls to the function, in seconds
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description>     data to pass to @function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the timeout is removed, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) of the event source.

</return>
</function>

<function name="gdk_threads_enter">
<description>
This function marks the beginning of a critical section in which
GDK and GTK+ functions can be called safely and without causing race
conditions. Only one thread at a time can be in such a critial
section.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_threads_init">
<description>
Initializes GDK so that it can be used from multiple threads
in conjunction with gdk_threads_enter() and gdk_threads_leave().

This call must be made before any use of the main loop from
GTK+; to be safe, call it before gtk_init().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_threads_leave">
<description>
Leaves a critical region begun with gdk_threads_enter().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_threads_set_lock_functions">
<description>
Allows the application to replace the standard method that
GDK uses to protect its data structures. Normally, GDK
creates a single #GMutex that is locked by gdk_threads_enter(),
and released by gdk_threads_leave(); using this function an
application provides, instead, a function @enter_fn that is
called by gdk_threads_enter() and a function @leave_fn that is
called by gdk_threads_leave().

The functions must provide at least same locking functionality
as the default implementation, but can also do extra application
specific processing.

As an example, consider an application that has its own recursive
lock that when held, holds the GTK+ lock as well. When GTK+ unlocks
the GTK+ lock when entering a recursive main loop, the application
must temporarily release its lock as well.

Most threaded GTK+ apps won't need to use this method.

This method must be called before gdk_threads_init(), and cannot
be called multiple times.

Since: 2.4

</description>
<parameters>
<parameter name="enter_fn">
<parameter_description>   function called to guard GDK
</parameter_description>
</parameter>
<parameter name="leave_fn">
<parameter_description> function called to release the guard
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_unicode_to_keyval">
<description>
Convert from a ISO10646 character to a key symbol.


</description>
<parameters>
<parameter name="wc">
<parameter_description> a ISO10646 encoded character
</parameter_description>
</parameter>
</parameters>
<return> the corresponding GDK key symbol, if one exists.
or, if there is no corresponding symbol, 
wc | 0x01000000
</return>
</function>

<function name="gdk_utf8_to_string_target">
<description>
Converts an UTF-8 string into the best possible representation
as a STRING. The representation of characters not in STRING
is not specified; it may be as pseudo-escape sequences
\x{ABCD}, or it may be in some other form of approximation.


</description>
<parameters>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
</parameters>
<return> the newly-allocated string, or %NULL if the
conversion failed. (It should not fail for
any properly formed UTF-8 string unless system
limits like memory or file descriptors are exceeded.)
</return>
</function>

<function name="gdk_visual_get_best">
<description>
Get the visual with the most available colors for the default
GDK screen. The return value should not be freed.


</description>
<parameters>
</parameters>
<return> best visual
</return>
</function>

<function name="gdk_visual_get_best_depth">
<description>
Get the best available depth for the default GDK screen.  &quot;Best&quot;
means &quot;largest,&quot; i.e. 32 preferred over 24 preferred over 8 bits
per pixel.


</description>
<parameters>
</parameters>
<return> best available depth
</return>
</function>

<function name="gdk_visual_get_best_type">
<description>
Return the best available visual type for the default GDK screen.


</description>
<parameters>
</parameters>
<return> best visual type
</return>
</function>

<function name="gdk_visual_get_best_with_both">
<description>
Combines gdk_visual_get_best_with_depth() and
gdk_visual_get_best_with_type().


</description>
<parameters>
<parameter name="depth">
<parameter_description> a bit depth
</parameter_description>
</parameter>
<parameter name="visual_type">
<parameter_description> a visual type
</parameter_description>
</parameter>
</parameters>
<return> best visual with both @depth and
@visual_type, or %NULL if none
</return>
</function>

<function name="gdk_visual_get_best_with_depth">
<description>
Get the best visual with depth @depth for the default GDK screen.
Color visuals and visuals with mutable colormaps are preferred
over grayscale or fixed-colormap visuals. The return value should
not be freed. %NULL may be returned if no visual supports @depth.


</description>
<parameters>
<parameter name="depth">
<parameter_description> a bit depth
</parameter_description>
</parameter>
</parameters>
<return> best visual for the given depth
</return>
</function>

<function name="gdk_visual_get_best_with_type">
<description>
Get the best visual of the given @visual_type for the default GDK screen.
Visuals with higher color depths are considered better. The return value
should not be freed. %NULL may be returned if no visual has type
@visual_type.


</description>
<parameters>
<parameter name="visual_type">
<parameter_description> a visual type
</parameter_description>
</parameter>
</parameters>
<return> best visual of the given type
</return>
</function>

<function name="gdk_visual_get_bits_per_rgb">
<description>
Returns the number of significant bits per red, green and blue value.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
</parameters>
<return> The number of significant bits per color value for @visual.

</return>
</function>

<function name="gdk_visual_get_blue_pixel_details">
<description>
Obtains values that are needed to calculate blue pixel values in TrueColor
and DirectColor. The &quot;mask&quot; is the significant bits within the pixel.
The &quot;shift&quot; is the number of bits left we must shift a primary for it
to be in position (according to the &quot;mask&quot;). Finally, &quot;precision&quot; refers
to how much precision the pixel value contains for a particular primary.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> A pointer to a #guint32 to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="shift">
<parameter_description> A pointer to a #gint to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="precision">
<parameter_description> A pointer to a #gint to be filled in, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_byte_order">
<description>
Returns the byte order of this visual.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkByteOrder stating the byte order of @visual.

</return>
</function>

<function name="gdk_visual_get_colormap_size">
<description>
Returns the size of a colormap for this visual.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> The size of a colormap that is suitable for @visual.

</return>
</function>

<function name="gdk_visual_get_depth">
<description>
Returns the bit depth of this visual.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> The bit depth of this visual.

</return>
</function>

<function name="gdk_visual_get_green_pixel_details">
<description>
Obtains values that are needed to calculate green pixel values in TrueColor
and DirectColor. The &quot;mask&quot; is the significant bits within the pixel.
The &quot;shift&quot; is the number of bits left we must shift a primary for it
to be in position (according to the &quot;mask&quot;). Finally, &quot;precision&quot; refers
to how much precision the pixel value contains for a particular primary.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> A pointer to a #guint32 to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="shift">
<parameter_description> A pointer to a #gint to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="precision">
<parameter_description> A pointer to a #gint to be filled in, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_red_pixel_details">
<description>
Obtains values that are needed to calculate red pixel values in TrueColor
and DirectColor. The &quot;mask&quot; is the significant bits within the pixel.
The &quot;shift&quot; is the number of bits left we must shift a primary for it
to be in position (according to the &quot;mask&quot;). Finally, &quot;precision&quot; refers
to how much precision the pixel value contains for a particular primary.

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> A pointer to a #guint32 to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="shift">
<parameter_description> A pointer to a #gint to be filled in, or %NULL
</parameter_description>
</parameter>
<parameter name="precision">
<parameter_description> A pointer to a #gint to be filled in, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_visual_get_screen">
<description>
Gets the screen to which this visual belongs

Since: 2.2

</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual
</parameter_description>
</parameter>
</parameters>
<return> the screen to which this visual belongs.

</return>
</function>

<function name="gdk_visual_get_system">
<description>
Get the system's default visual for the default GDK screen.
This is the visual for the root window of the display.
The return value should not be freed.


</description>
<parameters>
</parameters>
<return> system visual
</return>
</function>

<function name="gdk_visual_get_visual_type">
<description>
Returns the type of visual this is (PseudoColor, TrueColor, etc).

Since: 2.22

</description>
<parameters>
<parameter name="visual">
<parameter_description> A #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> A #GdkVisualType stating the type of @visual.

</return>
</function>

<function name="gdk_wayland_display_broadcast_startup_message">
<description>
Sends a startup notification message of type @message_type to
@display. 

This is a convenience function for use by code that implements the
freedesktop startup notification specification. Applications should
not normally need to call it directly. See the &lt;ulink
url=&quot;http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt&quot;&gt;Startup
Notification Protocol specification&lt;/ulink&gt; for
definitions of the message types and keys that can be used.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="message_type">
<parameter_description> startup notification message type (&quot;new&quot;, &quot;change&quot;,
or &quot;remove&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of key/value pairs (as strings), terminated by a
%NULL key. (A %NULL value for a key will cause that key to be
skipped in the output.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_wayland_window_update_size">
<description>
Updates the state of the drawable (in particular the drawable's
cairo surface) when its size has changed.

</description>
<parameters>
<parameter name="drawable">
<parameter_description> a #GdkDrawableImplWayland.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_add_filter">
<description>
Adds an event filter to @window, allowing you to intercept events
before they reach GDK. This is a low-level operation and makes it
easy to break GDK and/or GTK+, so you have to know what you're
doing. Pass %NULL for @window to get all events for all windows,
instead of events for a specific window.

If you are interested in X GenericEvents, bear in mind that
XGetEventData() has been already called on the event, and
XFreeEventData() must not be called within @function.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> filter callback
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass to filter callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_at_pointer">
<description>
Obtains the window underneath the mouse pointer, returning the
location of that window in @win_x, @win_y. Returns %NULL if the
window under the mouse pointer is not known to GDK (if the window
belongs to another application and a #GdkWindow hasn't been created
for it with gdk_window_foreign_new())

NOTE: For multihead-aware widgets or applications use
gdk_display_get_window_at_pointer() instead.

Deprecated: 3.0: Use gdk_device_get_window_at_position() instead.

</description>
<parameters>
<parameter name="win_x">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
<parameter name="win_y">
<parameter_description> return location for origin of the window under the pointer
</parameter_description>
</parameter>
</parameters>
<return> window under the mouse pointer

</return>
</function>

<function name="gdk_window_beep">
<description>
Emits a short beep associated to @window in the appropriate
display, if supported. Otherwise, emits a short beep on
the display just as gdk_display_beep().

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_move_drag">
<description>
Begins a window move operation (for a toplevel window).

This function assumes that the drag is controlled by the
client pointer device, use gdk_window_begin_move_drag_for_device()
to begin a drag with a different device.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_move_drag_for_device">
<description>
Begins a window move operation (for a toplevel window).
You might use this function to implement a &quot;window move grip,&quot; for
example. The function works best with window managers that support
the &lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended
Window Manager Hints&lt;/ulink&gt;, but has a fallback implementation for
other window managers.

Since: 3.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the device used for the operation
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_paint_rect">
<description>
A convenience wrapper around gdk_window_begin_paint_region() which
creates a rectangular region for you. See
gdk_window_begin_paint_region() for details.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rectangle">
<parameter_description> rectangle you intend to draw to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_paint_region">
<description>
Indicates that you are beginning the process of redrawing @region.
A backing store (offscreen buffer) large enough to contain @region
will be created. The backing store will be initialized with the
background color or background surface for @window. Then, all
drawing operations performed on @window will be diverted to the
backing store.  When you call gdk_window_end_paint(), the backing
store will be copied to @window, making it visible onscreen. Only
the part of @window contained in @region will be modified; that is,
drawing operations are clipped to @region.

The net result of all this is to remove flicker, because the user
sees the finished product appear all at once when you call
gdk_window_end_paint(). If you draw to @window directly without
calling gdk_window_begin_paint_region(), the user may see flicker
as individual drawing operations are performed in sequence.  The
clipping and background-initializing features of
gdk_window_begin_paint_region() are conveniences for the
programmer, so you can avoid doing that work yourself.

When using GTK+, the widget system automatically places calls to
gdk_window_begin_paint_region() and gdk_window_end_paint() around
emissions of the expose_event signal. That is, if you're writing an
expose event handler, you can assume that the exposed area in
#GdkEventExpose has already been cleared to the window background,
is already set as the clip region, and already has a backing store.
Therefore in most cases, application code need not call
gdk_window_begin_paint_region(). (You can disable the automatic
calls around expose events on a widget-by-widget basis by calling
gtk_widget_set_double_buffered().)

If you call this function multiple times before calling the
matching gdk_window_end_paint(), the backing stores are pushed onto
a stack. gdk_window_end_paint() copies the topmost backing store
onscreen, subtracts the topmost region from all other regions in
the stack, and pops the stack. All drawing operations affect only
the topmost backing store in the stack. One matching call to
gdk_window_end_paint() is required for each call to
gdk_window_begin_paint_region().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> region you intend to draw to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_resize_drag">
<description>
Begins a window resize operation (for a toplevel window).

This function assumes that the drag is controlled by the
client pointer device, use gdk_window_begin_resize_drag_for_device()
to begin a drag with a different device.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge or corner from which the drag is started
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag (use gdk_event_get_time())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_begin_resize_drag_for_device">
<description>
Begins a window resize operation (for a toplevel window).
You might use this function to implement a &quot;window resize grip,&quot; for
example; in fact #GtkStatusbar uses it. The function works best
with window managers that support the &lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended Window Manager Hints&lt;/ulink&gt;, but has a
fallback implementation for other window managers.

Since: 3.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="edge">
<parameter_description> the edge or corner from which the drag is started
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> the device used for the operation
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the button being used to drag
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> root window X coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> root window Y coordinate of mouse click that began the drag
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of mouse click that began the drag (use gdk_event_get_time())
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_configure_finished">
<description>
Signal to the window system that the application has finished
handling Configure events it has received. Window Managers can
use this to better synchronize the frame repaint with the
application. GTK+ applications will automatically call this
function when appropriate.

This function can only be called if gdk_window_enable_synchronized_configure()
was called previously.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_constrain_size">
<description>
Constrains a desired width and height according to a
set of geometry hints (such as minimum and maximum size).

</description>
<parameters>
<parameter name="geometry">
<parameter_description> a #GdkGeometry structure
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a mask indicating what portions of @geometry are set
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> desired width of window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> desired height of the window
</parameter_description>
</parameter>
<parameter name="new_width">
<parameter_description> location to store resulting width
</parameter_description>
</parameter>
<parameter name="new_height">
<parameter_description> location to store resulting height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_coords_from_parent">
<description>
Transforms window coordinates from a parent window to a child
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to subtracting
the return values of gdk_window_get_position() from the parent coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::from-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks down a window hierarchy.

See also: gdk_window_coords_to_parent()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a child window
</parameter_description>
</parameter>
<parameter name="parent_x">
<parameter_description> X coordinate in parent's coordinate system
</parameter_description>
</parameter>
<parameter name="parent_y">
<parameter_description> Y coordinate in parent's coordinate system
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate in child's coordinate system
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate in child's coordinate system
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_coords_to_parent">
<description>
Transforms window coordinates from a child window to its parent
window, where the parent window is the normal parent as returned by
gdk_window_get_parent() for normal windows, and the window's
embedder as returned by gdk_offscreen_window_get_embedder() for
offscreen windows.

For normal windows, calling this function is equivalent to adding
the return values of gdk_window_get_position() to the child coordinates.
For offscreen windows however (which can be arbitrarily transformed),
this function calls the GdkWindow::to-embedder: signal to translate
the coordinates.

You should always use this function when writing generic code that
walks up a window hierarchy.

See also: gdk_window_coords_from_parent()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a child window
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate in child's coordinate system
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate in child's coordinate system
</parameter_description>
</parameter>
<parameter name="parent_x">
<parameter_description> return location for X coordinate
in parent's coordinate system, or %NULL
</parameter_description>
</parameter>
<parameter name="parent_y">
<parameter_description> return location for Y coordinate
in parent's coordinate system, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_create_similar_surface">
<description>
Create a new surface that is as compatible as possible with the
given @window. For example the new surface will have the same
fallback resolution and font options as @window. Generally, the new
surface will also use the same backend as @window, unless that is
not possible for some reason. The type of the returned surface may
be examined with cairo_surface_get_type().

Initially the surface contents are all 0 (transparent if contents
have transparency, black otherwise.)

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> window to make new surface similar to
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> the content for the new surface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of the new surface
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of the new surface
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly allocated surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a &quot;nil&quot; surface if @other is already in an error state
or any other error occurs.

</return>
</function>

<function name="gdk_window_deiconify">
<description>
Attempt to deiconify (unminimize) @window. On X11 the window manager may
choose to ignore the request to deiconify. When using GTK+,
use gtk_window_deiconify() instead of the #GdkWindow variant. Or better yet,
you probably want to use gtk_window_present(), which raises the window, focuses it,
unminimizes it, and puts it on the current desktop.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_destroy">
<description>
Destroys the window system resources associated with @window and decrements @window's
reference count. The window system resources for all children of @window are also
destroyed, but the children's reference counts are not decremented.

Note that a window will not be destroyed automatically when its reference count
reaches zero. You must call this function yourself before that happens.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_enable_synchronized_configure">
<description>
Indicates that the application will cooperate with the window
system in synchronizing the window repaint with the window
manager during resizing operations. After an application calls
this function, it must call gdk_window_configure_finished() every
time it has finished all processing associated with a set of
Configure events. Toplevel GTK+ windows automatically use this
protocol.

On X, calling this function makes @window participate in the
_NET_WM_SYNC_REQUEST window manager protocol.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_end_paint">
<description>
Indicates that the backing store created by the most recent call to
gdk_window_begin_paint_region() should be copied onscreen and
deleted, leaving the next-most-recent backing store or no backing
store at all as the active paint region. See
gdk_window_begin_paint_region() for full details. It is an error to
call this function without a matching
gdk_window_begin_paint_region() first.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_ensure_native">
<description>
Tries to ensure that there is a window-system native window for this
GdkWindow. This may fail in some situations, returning %FALSE.

Offscreen window and children of them can never have native windows.

Some backends may not support native child windows.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window has a native window, %FALSE otherwise

</return>
</function>

<function name="gdk_window_flush">
<description>
Flush all outstanding cached operations on a window, leaving the
window in a state which reflects all that has been drawn before.

Gdk uses multiple kinds of caching to get better performance and
nicer drawing. For instance, during exposes all paints to a window
using double buffered rendering are keep on a surface until the last
window has been exposed. It also delays window moves/scrolls until
as long as possible until next update to avoid tearing when moving
windows.

Normally this should be completely invisible to applications, as
we automatically flush the windows when required, but this might
be needed if you for instance mix direct native drawing with
gdk drawing. For Gtk widgets that don't use double buffering this
will be called automatically before sending the expose event.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_focus">
<description>
Sets keyboard focus to @window. In most cases, gtk_window_present()
should be used on a #GtkWindow, rather than calling this function.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> timestamp of the event triggering the window focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_freeze_toplevel_updates_libgtk_only">
<description>
Temporarily freezes a window and all its descendants such that it won't
receive expose events.  The window will begin receiving expose events
again when gdk_window_thaw_toplevel_updates_libgtk_only() is called. If
gdk_window_freeze_toplevel_updates_libgtk_only()
has been called more than once,
gdk_window_thaw_toplevel_updates_libgtk_only() must be called
an equal number of times to begin processing exposes.

This function is not part of the GDK public API and is only
for use by GTK+.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_freeze_updates">
<description>
Temporarily freezes a window such that it won't receive expose
events.  The window will begin receiving expose events again when
gdk_window_thaw_updates() is called. If gdk_window_freeze_updates()
has been called more than once, gdk_window_thaw_updates() must be called
an equal number of times to begin processing exposes.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_fullscreen">
<description>
Moves the window into fullscreen mode. This means the
window covers the entire screen and is above any panels
or task bars.

If the window was already fullscreen, then this function does nothing.

On X11, asks the window manager to put @window in a fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of &quot;fullscreen&quot;; so you can't rely on the
fullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_geometry_changed">
<description>
This function informs GDK that the geometry of an embedded
offscreen window has changed. This is necessary for GDK to keep
track of which offscreen window the pointer is in.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> an embedded offscreen #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_accept_focus">
<description>
Determines whether or not the desktop environment shuld be hinted that
the window does not want to receive input focus.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the window should receive input focus.

</return>
</function>

<function name="gdk_window_get_background_pattern">
<description>
Gets the pattern used to clear the background on @window. If @window
does not have its own background and reuses the parent's, %NULL is
returned and you'll have to query it yourself.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a window
</parameter_description>
</parameter>
</parameters>
<return> The pattern to use for the background or
%NULL to use the parent's background.

</return>
</function>

<function name="gdk_window_get_children">
<description>
Gets the list of children of @window known to GDK.
This function only returns children created via GDK,
so for example it's useless when used with the root window;
it only returns windows an application created itself.

The returned list must be freed, but the elements in the
list need not be.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return>
list of child windows inside @window
</return>
</function>

<function name="gdk_window_get_clip_region">
<description>
Computes the region of a window that potentially can be written
to by drawing primitives. This region may not take into account
other factors such as if the window is obscured by other windows,
but no area outside of this region will be affected by drawing
primitives.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a #cairo_region_t. This must be freed with cairo_region_destroy()
when you are done.
</return>
</function>

<function name="gdk_window_get_composited">
<description>
Determines whether @window is composited.

See gdk_window_set_composited().

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is composited.

</return>
</function>

<function name="gdk_window_get_cursor">
<description>
Retrieves a #GdkCursor pointer for the cursor currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursor, or %NULL. The returned
object is owned by the #GdkWindow and should not be unreferenced
directly. Use gdk_window_set_cursor() to unset the cursor of the
window

</return>
</function>

<function name="gdk_window_get_decorations">
<description>
Returns the decorations set on the GdkWindow with
gdk_window_set_decorations().


</description>
<parameters>
<parameter name="window">
<parameter_description> The toplevel #GdkWindow to get the decorations from
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> The window decorations will be written here
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window has decorations set, %FALSE otherwise.
</return>
</function>

<function name="gdk_window_get_device_cursor">
<description>
Retrieves a #GdkCursor pointer for the @device currently set on the
specified #GdkWindow, or %NULL.  If the return value is %NULL then
there is no custom cursor set on the specified window, and it is
using the cursor for its parent window.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a master, pointer #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return> a #GdkCursor, or %NULL. The returned
object is owned by the #GdkWindow and should not be unreferenced
directly. Use gdk_window_set_cursor() to unset the cursor of the
window

</return>
</function>

<function name="gdk_window_get_device_events">
<description>
Returns the event mask for @window corresponding to an specific device.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a #GdkDevice.
</parameter_description>
</parameter>
</parameters>
<return> device event mask for @window

</return>
</function>

<function name="gdk_window_get_device_position">
<description>
Obtains the current device position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> pointer #GdkDevice to query to.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for the X coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for the Y coordinate of @device, or %NULL.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for the modifier mask, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The window underneath @device (as with
gdk_device_get_window_at_position()), or %NULL if the window is not known to GDK.

</return>
</function>

<function name="gdk_window_get_display">
<description>
Gets the #GdkDisplay associated with a #GdkWindow.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay associated with @window

</return>
</function>

<function name="gdk_window_get_drag_protocol">
<description>
Finds out the DND protocol supported by a window.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> the destination window
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> location of the window
where the drop should happen. This may be @window or a proxy window,
or %NULL if @window does not support Drag and Drop.
</parameter_description>
</parameter>
</parameters>
<return> the supported DND protocol.

</return>
</function>

<function name="gdk_window_get_effective_parent">
<description>
Obtains the parent of @window, as known to GDK. Works like
gdk_window_get_parent() for normal windows, but returns the
window's embedder for offscreen windows.

See also: gdk_offscreen_window_get_embedder()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> effective parent of @window

</return>
</function>

<function name="gdk_window_get_effective_toplevel">
<description>
Gets the toplevel window that's an ancestor of @window.

Works like gdk_window_get_toplevel(), but treats an offscreen window's
embedder as its parent, using gdk_window_get_effective_parent().

See also: gdk_offscreen_window_get_embedder()

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the effective toplevel window containing @window

</return>
</function>

<function name="gdk_window_get_events">
<description>
Gets the event mask for @window for all master input devices. See
gdk_window_set_events().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> event mask for @window
</return>
</function>

<function name="gdk_window_get_focus_on_map">
<description>
Determines whether or not the desktop environment should be hinted that the
window does not want to receive input focus when it is mapped.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the window wants to receive input focus when
it is mapped.

</return>
</function>

<function name="gdk_window_get_frame_extents">
<description>
Obtains the bounding box of the window, including window manager
titlebar/borders if any. The frame position is given in root window
coordinates. To get the position of the window itself (rather than
the frame) in root window coordinates, use gdk_window_get_origin().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to fill with bounding box of the window frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_geometry">
<description>
Any of the return location arguments to this function may be %NULL,
if you aren't interested in getting the value of that field.

The X and Y coordinates returned are relative to the parent window
of @window, which for toplevels usually means relative to the
window decorations (titlebar, etc.) rather than relative to the
root window (screen-size background window).

On the X11 platform, the geometry is obtained from the X server,
so reflects the latest position of @window; this may be out-of-sync
with the position of @window delivered in the most-recently-processed
#GdkEventConfigure. gdk_window_get_position() in contrast gets the
position from the most recent configure event.

&lt;note&gt;
If @window is not a toplevel, it is &lt;emphasis&gt;much&lt;/emphasis&gt; better
to call gdk_window_get_position(), gdk_window_get_width() and
gdk_window_get_height() instead, because it avoids the roundtrip to
the X server and because these functions support the full 32-bit
coordinate space, whereas gdk_window_get_geometry() is restricted to
the 16-bit coordinates of X11.
&lt;/note&gt;

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of window (relative to its parent)
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate of window (relative to its parent)
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> return location for width of window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> return location for height of window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_group">
<description>
Returns the group leader window for @window. See gdk_window_set_group().

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the group leader window for @window

</return>
</function>

<function name="gdk_window_get_height">
<description>
Returns the height of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The height of @window

</return>
</function>

<function name="gdk_window_get_modal_hint">
<description>
Determines whether or not the window manager is hinted that @window
has modal behaviour.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> whether or not the window has the modal hint set.

</return>
</function>

<function name="gdk_window_get_origin">
<description>
Obtains the position of a window in root window coordinates.
(Compare with gdk_window_get_position() and
gdk_window_get_geometry() which return the position of a window
relative to its parent window.)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return> not meaningful, ignore
</return>
</function>

<function name="gdk_window_get_parent">
<description>
Obtains the parent of @window, as known to GDK. Does not query the
X server; thus this returns the parent as passed to gdk_window_new(),
not the actual parent. This should never matter unless you're using
Xlib calls mixed with GDK calls on the X11 platform. It may also
matter for toplevel windows, because the window manager may choose
to reparent them.

Note that you should use gdk_window_get_effective_parent() when
writing generic code that walks up a window hierarchy, because
gdk_window_get_parent() will most likely not do what you expect if
there are offscreen windows in the hierarchy.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> parent of @window
</return>
</function>

<function name="gdk_window_get_pointer">
<description>
Obtains the current pointer position and modifier state.
The position is given in coordinates relative to the upper left
corner of @window.

Deprecated: 3.0: Use gdk_window_get_device_position() instead.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X coordinate of pointer or %NULL to not
return the X coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description>  return location for Y coordinate of pointer or %NULL to not
return the Y coordinate
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> return location for modifier mask or %NULL to not return the
modifier mask
</parameter_description>
</parameter>
</parameters>
<return> the window containing the pointer (as with
gdk_window_at_pointer()), or %NULL if the window containing the
pointer isn't known to GDK

</return>
</function>

<function name="gdk_window_get_position">
<description>
Obtains the position of the window as reported in the
most-recently-processed #GdkEventConfigure. Contrast with
gdk_window_get_geometry() which queries the X server for the
current window position, regardless of which events have been
received or processed.

The position coordinates are relative to the window's parent window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate of window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate of window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_root_coords">
<description>
Obtains the position of a window position in root
window coordinates. This is similar to
gdk_window_get_origin() but allows you go pass
in any position in the window, not just the origin.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate in window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate in window
</parameter_description>
</parameter>
<parameter name="root_x">
<parameter_description> return location for X coordinate
</parameter_description>
</parameter>
<parameter name="root_y">
<parameter_description> return location for Y coordinate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_root_origin">
<description>
Obtains the top-left corner of the window manager frame in root
window coordinates.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> return location for X position of window frame
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> return location for Y position of window frame
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_screen">
<description>
Gets the #GdkScreen associated with a #GdkWindow.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the #GdkScreen associated with @window

</return>
</function>

<function name="gdk_window_get_source_events">
<description>
Returns the event mask for @window corresponding to the device class specified
by @source.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GdkInputSource to define the source class.
</parameter_description>
</parameter>
</parameters>
<return> source event mask for @window
</return>
</function>

<function name="gdk_window_get_state">
<description>
Gets the bitwise OR of the currently active window state flags,
from the #GdkWindowState enumeration.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> window state bitfield
</return>
</function>

<function name="gdk_window_get_support_multidevice">
<description>
Returns %TRUE if the window is aware of the existence of multiple
devices.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window handles multidevice features.

</return>
</function>

<function name="gdk_window_get_toplevel">
<description>
Gets the toplevel window that's an ancestor of @window.

Any window type but %GDK_WINDOW_CHILD is considered a
toplevel window, as is a %GDK_WINDOW_CHILD window that
has a root window as parent.

Note that you should use gdk_window_get_effective_toplevel() when
you want to get to a window's toplevel as seen on screen, because
gdk_window_get_toplevel() will most likely not do what you expect
if there are offscreen windows in the hierarchy.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the toplevel window containing @window
</return>
</function>

<function name="gdk_window_get_type_hint">
<description>
This function returns the type hint set for a window.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The type hint set for @window

</return>
</function>

<function name="gdk_window_get_update_area">
<description>
Transfers ownership of the update area from @window to the caller
of the function. That is, after calling this function, @window will
no longer have an invalid/dirty region; the update area is removed
from @window and handed to you. If a window has no update area,
gdk_window_get_update_area() returns %NULL. You are responsible for
calling cairo_region_destroy() on the returned region if it's non-%NULL.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> the update area for @window
</return>
</function>

<function name="gdk_window_get_user_data">
<description>
Retrieves the user data for @window, which is normally the widget
that @window belongs to. See gdk_window_set_user_data().


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> return location for user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_get_visible_region">
<description>
Computes the region of the @window that is potentially visible.
This does not necessarily take into account if the window is
obscured by other windows, but no area outside of this region
is visible.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a #cairo_region_t. This must be freed with cairo_region_destroy()
when you are done.
</return>
</function>

<function name="gdk_window_get_visual">
<description>
Gets the #GdkVisual describing the pixel format of @window.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> a #GdkVisual

</return>
</function>

<function name="gdk_window_get_width">
<description>
Returns the width of the given @window.

On the X11 platform the returned size is the size reported in the
most-recently-processed configure event, rather than the current
size on the X server.

Since: 2.24

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> The width of @window

</return>
</function>

<function name="gdk_window_get_window_type">
<description>
Gets the type of the window. See #GdkWindowType.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> type of window
</return>
</function>

<function name="gdk_window_has_native">
<description>
Checks whether the window has a native window or not. Note that
you can use gdk_window_ensure_native() if a native window is needed.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the %window has a native window, %FALSE otherwise.

</return>
</function>

<function name="gdk_window_hide">
<description>
For toplevel windows, withdraws them, so they will no longer be
known to the window manager; for all windows, unmaps them, so
they won't be displayed. Normally done automatically as
part of gtk_widget_hide().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_iconify">
<description>
Asks to iconify (minimize) @window. The window manager may choose
to ignore the request, but normally will honor it. Using
gtk_window_iconify() is preferred, if you have a #GtkWindow widget.

This function only makes sense when @window is a toplevel window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_input_shape_combine_region">
<description>
Like gdk_window_shape_combine_region(), but the shape applies
only to event handling. Mouse events which happen while
the pointer position corresponds to an unset bit in the
mask will be passed on the window below @window.

An input shape is typically used with RGBA windows.
The alpha channel of the window defines which pixels are
invisible and allows for nicely antialiased borders,
and the input shape controls where the window is
&quot;clickable&quot;.

On the X11 platform, this requires version 1.1 of the
shape extension.

On the Win32 platform, this functionality is not present and the
function does nothing.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="shape_region">
<parameter_description> region of window to be non-transparent
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of @shape_region in @window coordinates
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of @shape_region in @window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_maybe_recurse">
<description>
Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &quot;dirty region.&quot; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @child_func parameter controls whether the region of
each child window that intersects @region will also be invalidated.
Only children for which @child_func returns TRUE will have the area
invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #cairo_region_t
</parameter_description>
</parameter>
<parameter name="child_func">
<parameter_description> function to use to decide if to
recurse to a child, %NULL means never recurse.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to @child_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_rect">
<description>
A convenience wrapper around gdk_window_invalidate_region() which
invalidates a rectangular region. See
gdk_window_invalidate_region() for details.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> rectangle to invalidate or %NULL to invalidate the whole
window
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> whether to also invalidate child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_invalidate_region">
<description>
Adds @region to the update area for @window. The update area is the
region that needs to be redrawn, or &quot;dirty region.&quot; The call
gdk_window_process_updates() sends one or more expose events to the
window, which together cover the entire update area. An
application would normally redraw the contents of @window in
response to those expose events.

GDK will call gdk_window_process_all_updates() on your behalf
whenever your program returns to the main loop and becomes idle, so
normally there's no need to do that manually, you just need to
invalidate regions that you know should be redrawn.

The @invalidate_children parameter controls whether the region of
each child window that intersects @region will also be invalidated.
If %FALSE, then the update area for child windows will remain
unaffected. See gdk_window_invalidate_maybe_recurse if you need
fine grained control over which children are invalidated.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> a #cairo_region_t
</parameter_description>
</parameter>
<parameter name="invalidate_children">
<parameter_description> %TRUE to also invalidate child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_is_destroyed">
<description>
Check to see if a window is destroyed..

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is destroyed

</return>
</function>

<function name="gdk_window_is_input_only">
<description>
Determines whether or not the window is an input only window.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @window is input only

</return>
</function>

<function name="gdk_window_is_shaped">
<description>
Determines whether or not the window is shaped.

Since: 2.22

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @window is shaped

</return>
</function>

<function name="gdk_window_is_viewable">
<description>
Check if the window and all ancestors of the window are
mapped. (This is not necessarily &quot;viewable&quot; in the X sense, since
we only check as far as we have GDK window parents, not to the root
window.)


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is viewable
</return>
</function>

<function name="gdk_window_is_visible">
<description>
Checks whether the window has been mapped (with gdk_window_show() or
gdk_window_show_unraised()).


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window is mapped
</return>
</function>

<function name="gdk_window_lower">
<description>
Lowers @window to the bottom of the Z-order (stacking order), so that
other windows with the same parent window appear above @window.
This is true whether or not the other windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_lower() only
requests the restack, does not guarantee it.

Note that gdk_window_show() raises the window again, so don't call this
function before gdk_window_show(). (Try gdk_window_show_unraised().)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_maximize">
<description>
Maximizes the window. If the window was already maximized, then
this function does nothing.

On X11, asks the window manager to maximize @window, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
&quot;maximized&quot;; so you can't rely on the maximization actually
happening. But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

On Windows, reliably maximizes the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_merge_child_input_shapes">
<description>
Merges the input shape masks for any child windows into the
input shape mask for @window. i.e. the union of all input masks
for @window and its children will become the new input mask
for @window. See gdk_window_input_shape_combine_region().

This function is distinct from gdk_window_set_child_input_shapes()
because it includes @window's input shape mask in the set of
shapes to be merged.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_merge_child_shapes">
<description>
Merges the shape masks for any child windows into the
shape mask for @window. i.e. the union of all masks
for @window and its children will become the new mask
for @window. See gdk_window_shape_combine_region().

This function is distinct from gdk_window_set_child_shapes()
because it includes @window's shape mask in the set of shapes to
be merged.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move">
<description>
Repositions a window relative to its parent window.
For toplevel windows, window managers may ignore or modify the move;
you should probably use gtk_window_move() on a #GtkWindow widget
anyway, instead of using GDK functions. For child windows,
the move will reliably succeed.

If you're also planning to resize the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X coordinate relative to window's parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y coordinate relative to window's parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move_region">
<description>
Move the part of @window indicated by @region by @dy pixels in the Y
direction and @dx pixels in the X direction. The portions of @region
that not covered by the new position of @region are invalidated.

Child windows are not moved.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="region">
<parameter_description> The #cairo_region_t to move
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Amount to move in the X direction
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Amount to move in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_move_resize">
<description>
Equivalent to calling gdk_window_move() and gdk_window_resize(),
except that both operations are performed at once, avoiding strange
visual effects. (i.e. the user may be able to see the window first
move, then resize, if you don't use gdk_window_move_resize().)

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> new X position relative to window's parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> new Y position relative to window's parent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_new">
<description>
Creates a new #GdkWindow using the attributes from
@attributes. See #GdkWindowAttr and #GdkWindowAttributesType for
more details.  Note: to use this on displays other than the default
display, @parent must be specified.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GdkWindow, or %NULL to create the window as a child of
the default root window for the default display.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> attributes of the new window
</parameter_description>
</parameter>
<parameter name="attributes_mask">
<parameter_description> mask indicating which
fields in @attributes are valid
</parameter_description>
</parameter>
</parameters>
<return> the new #GdkWindow
</return>
</function>

<function name="gdk_window_peek_children">
<description>
Like gdk_window_get_children(), but does not copy the list of
children, so the list does not need to be freed.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return>
a reference to the list of child windows in @window
</return>
</function>

<function name="gdk_window_process_all_updates">
<description>
Calls gdk_window_process_updates() for all windows (see #GdkWindow)
in the application.


</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_window_process_updates">
<description>
Sends one or more expose events to @window. The areas in each
expose event will cover the entire update area for the window (see
gdk_window_invalidate_region() for details). Normally GDK calls
gdk_window_process_all_updates() on your behalf, so there's no
need to call this function unless you want to force expose events
to be delivered immediately and synchronously (vs. the usual
case, where GDK delivers them in an idle handler). Occasionally
this is useful to produce nicer scrolling behavior, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="update_children">
<parameter_description> whether to also process updates for child windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_raise">
<description>
Raises @window to the top of the Z-order (stacking order), so that
other windows with the same parent window appear below @window.
This is true whether or not the windows are visible.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_raise() only
requests the restack, does not guarantee it.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_register_dnd">
<description>
Registers a window as a potential drop destination.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_remove_filter">
<description>
Remove a filter previously added with gdk_window_add_filter().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> previously-added filter function
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data for previously-added filter function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_reparent">
<description>
Reparents @window into the given @new_parent. The window being
reparented will be unmapped as a side effect.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="new_parent">
<parameter_description> new parent to move @window into
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> X location inside the new parent
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Y location inside the new parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_resize">
<description>
Resizes @window; for toplevel windows, asks the window manager to resize
the window. The window manager may not allow the resize. When using GTK+,
use gtk_window_resize() instead of this low-level GDK function.

Windows may not be resized below 1x1.

If you're also planning to move the window, use gdk_window_move_resize()
to both move and resize simultaneously, for a nicer visual effect.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new width of the window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new height of the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_restack">
<description>
Changes the position of  @window in the Z-order (stacking order), so that
it is above @sibling (if @above is %TRUE) or below @sibling (if @above is
%FALSE).

If @sibling is %NULL, then this either raises (if @above is %TRUE) or
lowers the window.

If @window is a toplevel, the window manager may choose to deny the
request to move the window in the Z-order, gdk_window_restack() only
requests the restack, does not guarantee it.

Since: 2.18

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> a #GdkWindow that is a sibling of @window, or %NULL
</parameter_description>
</parameter>
<parameter name="above">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_scroll">
<description>
Scroll the contents of @window, both pixels and children, by the
given amount. @window itself does not move. Portions of the window
that the scroll operation brings in from offscreen areas are
invalidated. The invalidated region may be bigger than what would
strictly be necessary.

For X11, a minimum area will be invalidated if the window has no
subwindows, or if the edges of the window's parent do not extend
beyond the edges of the window. In other cases, a multi-step process
is used to scroll the window which may produce temporary visual
artifacts and unnecessary invalidations.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="dx">
<parameter_description> Amount to scroll in the X direction
</parameter_description>
</parameter>
<parameter name="dy">
<parameter_description> Amount to scroll in the Y direction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_accept_focus">
<description>
Setting @accept_focus to %FALSE hints the desktop environment that the
window doesn't want to receive input focus.

On X, it is the responsibility of the window manager to interpret this
hint. ICCCM-compliant window manager usually respect it.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="accept_focus">
<parameter_description> %TRUE if the window should receive input focus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_background">
<description>
Sets the background color of @window. (However, when using GTK+,
set the background of a widget with gtk_widget_modify_bg() - if
you're an application - or gtk_style_set_background() - if you're
implementing a custom widget.)

See also gdk_window_set_background_pattern().

Deprecated: 3.4: Use gdk_window_set_background_rgba() instead.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="color">
<parameter_description> a #GdkColor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_background_pattern">
<description>
Sets the background of @window.

A background of %NULL means that the window will inherit its
background form its parent window.

The windowing system will normally fill a window with its background
when the window is obscured then exposed.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> a pattern to use, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_background_rgba">
<description>
Sets the background color of @window.

See also gdk_window_set_background_pattern().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="rgba">
<parameter_description> a #GdkRGBA color
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_child_input_shapes">
<description>
Sets the input shape mask of @window to the union of input shape masks
for all children of @window, ignoring the input shape mask of @window
itself. Contrast with gdk_window_merge_child_input_shapes() which includes
the input shape mask of @window in the masks to be merged.

Since: 2.10

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_child_shapes">
<description>
Sets the shape mask of @window to the union of shape masks
for all children of @window, ignoring the shape mask of @window
itself. Contrast with gdk_window_merge_child_shapes() which includes
the shape mask of @window in the masks to be merged.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_composited">
<description>
Sets a #GdkWindow as composited, or unsets it. Composited
windows do not automatically have their contents drawn to
the screen. Drawing is redirected to an offscreen buffer
and an expose event is emitted on the parent of the composited
window. It is the responsibility of the parent's expose handler
to manually merge the off-screen content onto the screen in
whatever way it sees fit. See &lt;xref linkend=&quot;composited-window-example&quot;/&gt;
for an example.

It only makes sense for child windows to be composited; see
gdk_window_set_opacity() if you need translucent toplevel
windows.

An additional effect of this call is that the area of this
window is no longer clipped from regions marked for
invalidation on its parent. Draws done on the parent
window are also no longer clipped by the child.

This call is only supported on some systems (currently,
only X11 with new enough Xcomposite and Xdamage extensions).
You must call gdk_display_supports_composite() to check if
setting a window as composited is supported before
attempting to do so.

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="composited">
<parameter_description> %TRUE to set the window as composited
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_cursor">
<description>
Sets the default mouse pointer for a #GdkWindow. Use gdk_cursor_new_for_display()
or gdk_cursor_new_from_pixbuf() to create the cursor. To make the cursor
invisible, use %GDK_BLANK_CURSOR. Passing %NULL for the @cursor argument
to gdk_window_set_cursor() means that @window will use the cursor of its
parent window. Most windows should use this default.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> a cursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_debug_updates">
<description>
With update debugging enabled, calls to
gdk_window_invalidate_region() clear the invalidated region of the
screen to a noticeable color, and GDK pauses for a short time
before sending exposes to windows during
gdk_window_process_updates().  The net effect is that you can see
the invalid region for each window and watch redraws as they
occur. This allows you to diagnose inefficiencies in your application.

In essence, because the GDK rendering model prevents all flicker,
if you are redrawing the same region 400 times you may never
notice, aside from noticing a speed problem. Enabling update
debugging causes GTK to flicker slowly and noticeably, so you can
see exactly what's being redrawn when, in what order.

The --gtk-debug=updates command line option passed to GTK+ programs
enables this debug option at application startup time. That's
usually more useful than calling gdk_window_set_debug_updates()
yourself, though you might want to use this function to enable
updates sometime after application startup time.


</description>
<parameters>
<parameter name="setting">
<parameter_description> %TRUE to turn on update debugging
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_decorations">
<description>
&quot;Decorations&quot; are the features the window manager adds to a toplevel #GdkWindow.
This function sets the traditional Motif window manager hints that tell the
window manager which decorations you would like your window to have.
Usually you should use gtk_window_set_decorated() on a #GtkWindow instead of
using the GDK function directly.

The @decorations argument is the logical OR of the fields in
the #GdkWMDecoration enumeration. If #GDK_DECOR_ALL is included in the
mask, the other bits indicate which decorations should be turned off.
If #GDK_DECOR_ALL is not included, then the other bits indicate
which decorations should be turned on.

Most window managers honor a decorations hint of 0 to disable all decorations,
but very few honor all possible combinations of bits.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="decorations">
<parameter_description> decoration hint mask
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_device_cursor">
<description>
Sets a specific #GdkCursor for a given device when it gets inside @window.
Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to create
the cursor. To make the cursor invisible, use %GDK_BLANK_CURSOR. Passing
%NULL for the @cursor argument to gdk_window_set_cursor() means that
@window will use the cursor of its parent window. Most windows should
use this default.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #Gdkwindow
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> a master, pointer #GdkDevice
</parameter_description>
</parameter>
<parameter name="cursor">
<parameter_description> a #GdkCursor
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_device_events">
<description>
Sets the event mask for a given device (Normally a floating device, not
attached to any visible pointer) to @window. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="device">
<parameter_description> #GdkDevice to enable events for.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_events">
<description>
The event mask for a window determines which events will be reported
for that window from all master input devices. For example, an event mask
including #GDK_BUTTON_PRESS_MASK means the window should report button
press events. The event mask is the bitwise OR of values from the
#GdkEventMask enumeration.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_focus_on_map">
<description>
Setting @focus_on_map to %FALSE hints the desktop environment that the
window doesn't want to receive input focus when it is mapped.
focus_on_map should be turned off for windows that aren't triggered
interactively (such as popups from network activity).

On X, it is the responsibility of the window manager to interpret
this hint. Window managers following the freedesktop.org window
manager extension specification should respect it.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="focus_on_map">
<parameter_description> %TRUE if the window should receive input focus when mapped
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_functions">
<description>
Sets hints about the window management functions to make available
via buttons on the window frame.

On the X backend, this function sets the traditional Motif window
manager hint for this purpose. However, few window managers do
anything reliable or interesting with this hint. Many ignore it
entirely.

The @functions argument is the logical OR of values from the
#GdkWMFunction enumeration. If the bitmask includes #GDK_FUNC_ALL,
then the other bits indicate which functions to disable; if
it doesn't include #GDK_FUNC_ALL, it indicates which functions to
enable.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="functions">
<parameter_description> bitmask of operations to allow on @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_geometry_hints">
<description>
Sets the geometry hints for @window. Hints flagged in @geom_mask
are set, hints not flagged in @geom_mask are unset.
To unset all hints, use a @geom_mask of 0 and a @geometry of %NULL.

This function provides hints to the windowing system about
acceptable sizes for a toplevel window. The purpose of
this is to constrain user resizing, but the windowing system
will typically  (but is not required to) also constrain the
current size of the window to the provided values and
constrain programatic resizing via gdk_window_resize() or
gdk_window_move_resize().

Note that on X11, this effect has no effect on windows
of type %GDK_WINDOW_TEMP or windows where override redirect
has been turned on via gdk_window_set_override_redirect()
since these windows are not resizable by the user.

Since you can't count on the windowing system doing the
constraints for programmatic resizes, you should generally
call gdk_window_constrain_size() yourself to determine
appropriate sizes.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="geometry">
<parameter_description> geometry hints
</parameter_description>
</parameter>
<parameter name="geom_mask">
<parameter_description> bitmask indicating fields of @geometry to pay attention to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_group">
<description>
Sets the group leader window for @window. By default,
GDK sets the group leader for all toplevel windows
to a global window implicitly created by GDK. With this function
you can override this default.

The group leader window allows the window manager to distinguish
all windows that belong to a single application. It may for example
allow users to minimize/unminimize all windows belonging to an
application at once. You should only set a non-default group window
if your application pretends to be multiple applications.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="leader">
<parameter_description> group leader window, or %NULL to restore the default group leader window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_icon_list">
<description>
Sets a list of icons for the window. One of these will be used
to represent the window when it has been iconified. The icon is
usually shown in an icon box or some sort of task bar. Which icon
size is shown depends on the window manager. The window manager
can scale the icon  but setting several size icons can give better
image quality since the window manager may only need to scale the
icon by a small amount or not at all.


</description>
<parameters>
<parameter name="window">
<parameter_description> The #GdkWindow toplevel window to set the icon of.
</parameter_description>
</parameter>
<parameter name="pixbufs">
<parameter_description>
A list of pixbufs, of different sizes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_icon_name">
<description>
Windows may have a name used while minimized, distinct from the
name they display in their titlebar. Most of the time this is a bad
idea from a user interface standpoint. But you can set such a name
with this function, if you like.

After calling this with a non-%NULL @name, calls to gdk_window_set_title()
will not update the icon title.

Using %NULL for @name unsets the icon title; further calls to
gdk_window_set_title() will again update the icon title as well.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of window while iconified (minimized)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_keep_above">
<description>
Set if @window must be kept above other windows. If the
window was already above, then this function does nothing.

On X11, asks the window manager to keep @window above, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
&quot;keep above&quot;; so you can't rely on the window being kept above.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @window above other windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_keep_below">
<description>
Set if @window must be kept below other windows. If the
window was already below, then this function does nothing.

On X11, asks the window manager to keep @window below, if the window
manager supports this operation. Not all window managers support
this, and some deliberately ignore it or don't have a concept of
&quot;keep below&quot;; so you can't rely on the window being kept below.
But it will happen with most standard window managers,
and GDK makes a best effort to get it to happen.

Since: 2.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="setting">
<parameter_description> whether to keep @window below other windows
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_modal_hint">
<description>
The application can use this hint to tell the window manager
that a certain window has modal behaviour. The window manager
can use this information to handle modal windows in a special
way.

You should only use this on windows for which you have
previously called gdk_window_set_transient_for()

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="modal">
<parameter_description> %TRUE if the window is modal, %FALSE otherwise.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_opacity">
<description>
Request the windowing system to make @window partially transparent,
with opacity 0 being fully transparent and 1 fully opaque. (Values
of the opacity parameter are clamped to the [0,1] range.) 

On X11, this works only on X screens with a compositing manager 
running.

For setting up per-pixel alpha, see gdk_screen_get_rgba_visual().
For making non-toplevel windows translucent, see 
gdk_window_set_composited().

Since: 2.12

</description>
<parameters>
<parameter name="window">
<parameter_description> a top-level #GdkWindow
</parameter_description>
</parameter>
<parameter name="opacity">
<parameter_description> opacity
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_override_redirect">
<description>
An override redirect window is not under the control of the window manager.
This means it won't have a titlebar, won't be minimizable, etc. - it will
be entirely under the control of the application. The window manager
can't see the override redirect window at all.

Override redirect should only be used for short-lived temporary
windows, such as popup menus. #GtkMenu uses an override redirect
window in its implementation, for example.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="override_redirect">
<parameter_description> %TRUE if window should be override redirect
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_role">
<description>
When using GTK+, typically you should use gtk_window_set_role() instead
of this low-level function.

The window manager and session manager use a window's role to
distinguish it from other kinds of window in the same application.
When an application is restarted after being saved in a previous
session, all windows with the same title and role are treated as
interchangeable.  So if you have two windows with the same title
that should be distinguished for session management purposes, you
should set the role on those windows. It doesn't matter what string
you use for the role, as long as you have a different role for each
non-interchangeable kind of window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> a string indicating its role
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_skip_pager_hint">
<description>
Toggles whether a window should appear in a pager (workspace
switcher, or other desktop utility program that displays a small
thumbnail representation of the windows on the desktop). If a
window's semantic type as specified with gdk_window_set_type_hint()
already fully describes the window, this function should
&lt;emphasis&gt;not&lt;/emphasis&gt; be called in addition, instead you should
allow the window to be treated according to standard policy for
its semantic type.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="skips_pager">
<parameter_description> %TRUE to skip the pager
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_skip_taskbar_hint">
<description>
Toggles whether a window should appear in a task list or window
list. If a window's semantic type as specified with
gdk_window_set_type_hint() already fully describes the window, this
function should &lt;emphasis&gt;not&lt;/emphasis&gt; be called in addition,
instead you should allow the window to be treated according to
standard policy for its semantic type.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="skips_taskbar">
<parameter_description> %TRUE to skip the taskbar
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_source_events">
<description>
Sets the event mask for any floating device (i.e. not attached to any
visible pointer) that has the source defined as @source. This event
mask will be applied both to currently existing, newly added devices
after this call, and devices being attached/detached.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GdkInputSource to define the source class.
</parameter_description>
</parameter>
<parameter name="event_mask">
<parameter_description> event mask for @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_startup_id">
<description>
When using GTK+, typically you should use gtk_window_set_startup_id()
instead of this low-level function.

Since: 2.12


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> a string with startup-notification identifier
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_static_gravities">
<description>
Set the bit gravity of the given window to static, and flag it so
all children get static subwindow gravity. This is used if you are
implementing scary features that involve deep knowledge of the
windowing system. Don't worry about it unless you have to.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="use_static">
<parameter_description> %TRUE to turn on static gravity
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the server supports static gravity
</return>
</function>

<function name="gdk_window_set_support_multidevice">
<description>
This function will enable multidevice features in @window.

Multidevice aware windows will need to handle properly multiple,
per device enter/leave events, device grabs and grab ownerships.

Since: 3.0

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow.
</parameter_description>
</parameter>
<parameter name="support_multidevice">
<parameter_description> %TRUE to enable multidevice support in @window.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_title">
<description>
Sets the title of a toplevel window, to be displayed in the titlebar.
If you haven't explicitly set the icon name for the window
(using gdk_window_set_icon_name()), the icon name will be set to
@title as well. @title must be in UTF-8 encoding (as with all
user-readable strings in GDK/GTK+). @title may not be %NULL.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="title">
<parameter_description> title of @window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_transient_for">
<description>
Indicates to the window manager that @window is a transient dialog
associated with the application window @parent. This allows the
window manager to do things like center @window on @parent and
keep @window above @parent.

See gtk_window_set_transient_for() if you're using #GtkWindow or
#GtkDialog.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> another toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_type_hint">
<description>
The application can use this call to provide a hint to the window
manager about the functionality of a window. The window manager
can use this information when determining the decoration and behaviour
of the window.

The hint must be set before the window is mapped.

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="hint">
<parameter_description> A hint of the function this window will have
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_urgency_hint">
<description>
Toggles whether a window needs the user's
urgent attention.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="urgent">
<parameter_description> %TRUE if the window is urgent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_set_user_data">
<description>
For most purposes this function is deprecated in favor of
g_object_set_data(). However, for historical reasons GTK+ stores
the #GtkWidget that owns a #GdkWindow as user data on the
#GdkWindow. So, custom widget implementations should use
this function for that. If GTK+ receives an event for a #GdkWindow,
and the user data for the window is non-%NULL, GTK+ will assume the
user data is a #GtkWidget, and forward the event to that widget.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_shape_combine_region">
<description>
Makes pixels in @window outside @shape_region be transparent,
so that the window may be nonrectangular.

If @shape_region is %NULL, the shape will be unset, so the whole
window will be opaque again. @offset_x and @offset_y are ignored
if @shape_region is %NULL.

On the X11 platform, this uses an X server extension which is
widely available on most common platforms, but not available on
very old X servers, and occasionally the implementation will be
buggy. On servers without the shape extension, this function
will do nothing.

This function works on both toplevel and child windows.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="shape_region">
<parameter_description> region of window to be non-transparent
</parameter_description>
</parameter>
<parameter name="offset_x">
<parameter_description> X position of @shape_region in @window coordinates
</parameter_description>
</parameter>
<parameter name="offset_y">
<parameter_description> Y position of @shape_region in @window coordinates
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_show">
<description>
Like gdk_window_show_unraised(), but also raises the window to the
top of the window stack (moves the window to the front of the
Z-order).

This function maps a window so it's visible onscreen. Its opposite
is gdk_window_hide().

When implementing a #GtkWidget, you should call this function on the widget's
#GdkWindow as part of the &quot;map&quot; method.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_show_unraised">
<description>
Shows a #GdkWindow onscreen, but does not modify its stacking
order. In contrast, gdk_window_show() will raise the window
to the top of the window stack.

On the X11 platform, in Xlib terms, this function calls
XMapWindow() (it also updates some internal GDK state, which means
that you can't really use XMapWindow() directly on a GDK window).

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_stick">
<description>
&quot;Pins&quot; a window such that it's on all workspaces and does not scroll
with viewports, for window managers that have scrollable viewports.
(When using #GtkWindow, gtk_window_stick() may be more useful.)

On the X11 platform, this function depends on window manager
support, so may have no effect with many window managers. However,
GDK will do the best it can to convince the window manager to stick
the window. For window managers that don't support this operation,
there's nothing you can do to force it to happen.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_thaw_toplevel_updates_libgtk_only">
<description>
Thaws a window frozen with
gdk_window_freeze_toplevel_updates_libgtk_only().

This function is not part of the GDK public API and is only
for use by GTK+.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_thaw_updates">
<description>
Thaws a window frozen with gdk_window_freeze_updates().

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unfullscreen">
<description>
Moves the window out of fullscreen mode. If the window was not
fullscreen, does nothing.

On X11, asks the window manager to move @window out of the fullscreen
state, if the window manager supports this operation. Not all
window managers support this, and some deliberately ignore it or
don't have a concept of &quot;fullscreen&quot;; so you can't rely on the
unfullscreenification actually happening. But it will happen with
most standard window managers, and GDK makes a best effort to get
it to happen.

Since: 2.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unmaximize">
<description>
Unmaximizes the window. If the window wasn't maximized, then this
function does nothing.

On X11, asks the window manager to unmaximize @window, if the
window manager supports this operation. Not all window managers
support this, and some deliberately ignore it or don't have a
concept of &quot;maximized&quot;; so you can't rely on the unmaximization
actually happening. But it will happen with most standard window
managers, and GDK makes a best effort to get it to happen.

On Windows, reliably unmaximizes the window.


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_unstick">
<description>
Reverse operation for gdk_window_stick(); see gdk_window_stick(),
and gtk_window_unstick().


</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_window_withdraw">
<description>
Withdraws a window (unmaps it and asks the window manager to forget about it).
This function is not really useful as gdk_window_hide() automatically
withdraws toplevel windows before hiding them.

</description>
<parameters>
<parameter name="window">
<parameter_description> a toplevel #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_atom_to_xatom">
<description>
Converts from a #GdkAtom to the X atom for the default GDK display
with the same string value.


</description>
<parameters>
<parameter name="atom">
<parameter_description> A #GdkAtom 
</parameter_description>
</parameter>
</parameters>
<return> the X atom corresponding to @atom.
</return>
</function>

<function name="gdk_x11_atom_to_xatom_for_display">
<description>
Converts from a #GdkAtom to the X atom for a #GdkDisplay
with the same string value. The special value %GDK_NONE
is converted to %None.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> A #GdkDisplay
</parameter_description>
</parameter>
<parameter name="atom">
<parameter_description> A #GdkAtom, or %GDK_NONE
</parameter_description>
</parameter>
</parameters>
<return> the X atom corresponding to @atom, or %None

</return>
</function>

<function name="gdk_x11_cursor_get_xcursor">
<description>
Returns the X cursor belonging to a #GdkCursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Cursor&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_cursor_get_xdisplay">
<description>
Returns the display of a #GdkCursor.


</description>
<parameters>
<parameter name="cursor">
<parameter_description> a #GdkCursor.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Display*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_device_get_id">
<description>
Returns the device ID as seen by XInput2.

&lt;note&gt;
If gdk_disable_multidevice() has been called, this function
will respectively return 2/3 for the core pointer and keyboard,
(matching the IDs for the Virtual Core Pointer and Keyboard in
XInput 2), but calling this function on any slave devices (i.e.
those managed via XInput 1.x), will return 0.
&lt;/note&gt;

Since: 3.2

</description>
<parameters>
<parameter name="device">
<parameter_description> a #GdkDevice
</parameter_description>
</parameter>
</parameters>
<return> the XInput2 device ID.

</return>
</function>

<function name="gdk_x11_device_manager_lookup">
<description>
Returns the #GdkDevice that wraps the given device ID.

Since: 3.2

</description>
<parameters>
<parameter name="device_manager">
<parameter_description> a #GdkDeviceManager
</parameter_description>
</parameter>
<parameter name="device_id">
<parameter_description> a device ID, as understood by the XInput2 protocol
</parameter_description>
</parameter>
</parameters>
<return> The #GdkDevice wrapping the device ID,
or %NULL if the given ID doesn't currently represent a device.

</return>
</function>

<function name="gdk_x11_display_broadcast_startup_message">
<description>
Sends a startup notification message of type @message_type to
@display. 

This is a convenience function for use by code that implements the
freedesktop startup notification specification. Applications should
not normally need to call it directly. See the &lt;ulink
url=&quot;http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt&quot;&gt;Startup
Notification Protocol specification&lt;/ulink&gt; for
definitions of the message types and keys that can be used.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="message_type">
<parameter_description> startup notification message type (&quot;new&quot;, &quot;change&quot;,
or &quot;remove&quot;)
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of key/value pairs (as strings), terminated by a
%NULL key. (A %NULL value for a key will cause that key to be
skipped in the output.)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_error_trap_pop">
<description>
Pops the error trap pushed by gdk_x11_display_error_trap_push().
Will XSync() if necessary and will always block until
the error is known to have occurred or not occurred,
so the error code can be returned.

If you don't need to use the return value,
gdk_x11_display_error_trap_pop_ignored() would be more efficient.

See gdk_error_trap_pop() for the all-displays-at-once
equivalent.

Since: 3.0


</description>
<parameters>
<parameter name="display">
<parameter_description> the display
</parameter_description>
</parameter>
</parameters>
<return> X error code or 0 on success
</return>
</function>

<function name="gdk_x11_display_error_trap_pop_ignored">
<description>
Pops the error trap pushed by gdk_x11_display_error_trap_push().
Does not block to see if an error occurred; merely records the
range of requests to ignore errors for, and ignores those errors
if they arrive asynchronously.

See gdk_error_trap_pop_ignored() for the all-displays-at-once
equivalent.

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> the display
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_error_trap_push">
<description>
Begins a range of X requests on @display for which X error events
will be ignored. Unignored errors (when no trap is pushed) will abort
the application. Use gdk_x11_display_error_trap_pop() or
gdk_x11_display_error_trap_pop_ignored()to lift a trap pushed
with this function.

See also gdk_error_trap_push() to push a trap on all displays.

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_get_startup_notification_id">
<description>
Gets the startup notification ID for a display.

Since: 2.12

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the startup notification ID for @display

</return>
</function>

<function name="gdk_x11_display_get_user_time">
<description>
Returns the timestamp of the last user interaction on 
@display. The timestamp is taken from events caused
by user interaction such as key presses or pointer 
movements. See gdk_x11_window_set_user_time().

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> the timestamp of the last user interaction 

</return>
</function>

<function name="gdk_x11_display_get_xdisplay">
<description>
Returns the X display of a #GdkDisplay.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return> an X display

</return>
</function>

<function name="gdk_x11_display_grab">
<description>
Call XGrabServer() on @display. 
To ungrab the display again, use gdk_x11_display_ungrab(). 

gdk_x11_display_grab()/gdk_x11_display_ungrab() calls can be nested.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_set_cursor_theme">
<description>
Sets the cursor theme from which the images for cursor
should be taken.

If the windowing system supports it, existing cursors created
with gdk_cursor_new(), gdk_cursor_new_for_display() and
gdk_cursor_new_for_name() are updated to reflect the theme
change. Custom cursors constructed with
gdk_cursor_new_from_pixbuf() will have to be handled
by the application (GTK+ applications can learn about
cursor theme changes by listening for change notification
for the corresponding #GtkSetting).

Since: 2.8

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="theme">
<parameter_description> the name of the cursor theme to use, or %NULL to unset
a previously set value
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the cursor size to use, or 0 to keep the previous size
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_set_startup_notification_id">
<description>
Sets the startup notification ID for a display.

This is usually taken from the value of the DESKTOP_STARTUP_ID
environment variable, but in some cases (such as the application not
being launched using exec()) it can come from other sources.

If the ID contains the string &quot;_TIME&quot; then the portion following that
string is taken to be the X11 timestamp of the event that triggered
the application to be launched and the GDK current event time is set
accordingly.

The startup ID is also what is used to signal that the startup is
complete (for example, when opening a window or when calling
gdk_notify_startup_complete()).

Since: 3.0

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="startup_id">
<parameter_description> the startup notification ID (must be valid utf8)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_string_to_compound_text">
<description>
Convert a string from the encoding of the current
locale into a form suitable for storing in a window property.

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the encoding is defined
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a nul-terminated string
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store the encoding atom
(to be used as the type for the property)
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> location to store the format of the property
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description> location to store newly
allocated data for the property
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @ctext, in bytes
</parameter_description>
</parameter>
</parameters>
<return> 0 upon success, non-zero upon failure

</return>
</function>

<function name="gdk_x11_display_text_property_to_text_list">
<description>
Convert a text string from the encoding as it is stored
in a property into an array of strings in the encoding of
the current locale. (The elements of the array represent the
nul-separated elements of the original text string.)

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> The #GdkDisplay where the encoding is defined
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> an atom representing the encoding. The most
common values for this are STRING, or COMPOUND_TEXT.
This is value used as the type for the property
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the property
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> The text data
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> The number of items to transform
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> location to store an  array of strings in
the encoding of the current locale. This array should be
freed using gdk_free_text_list().
</parameter_description>
</parameter>
</parameters>
<return> the number of strings stored in list, or 0,
if the conversion failed

</return>
</function>

<function name="gdk_x11_display_ungrab">
<description>
Ungrab @display after it has been grabbed with 
gdk_x11_display_grab(). 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_display_utf8_to_compound_text">
<description>
Converts from UTF-8 to compound text.

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a UTF-8 string
</parameter_description>
</parameter>
<parameter name="encoding">
<parameter_description> location to store resulting encoding
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> location to store format of the result
</parameter_description>
</parameter>
<parameter name="ctext">
<parameter_description> location to store the data of the result
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> location to store the length of the data
stored in @ctext
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the conversion succeeded,
otherwise %FALSE

</return>
</function>

<function name="gdk_x11_free_compound_text">
<description>
Frees the data returned from gdk_x11_display_string_to_compound_text().

Since: 2.24

</description>
<parameters>
<parameter name="ctext">
<parameter_description> The pointer stored in @ctext from a call to
gdk_x11_display_string_to_compound_text().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_free_text_list">
<description>
Frees the array of strings created by
gdk_x11_display_text_property_to_text_list().

Since: 2.24

</description>
<parameters>
<parameter name="list">
<parameter_description> the value stored in the @list parameter by
a call to gdk_x11_display_text_property_to_text_list().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_get_default_root_xwindow">
<description>
Gets the root window of the default screen 
(see gdk_x11_get_default_screen()).  


</description>
<parameters>
</parameters>
<return> an Xlib &lt;type&gt;Window&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_get_default_screen">
<description>
Gets the default GTK+ screen number.


</description>
<parameters>
</parameters>
<return> returns the screen number specified by
the --display command line option or the DISPLAY environment
variable when gdk_init() calls XOpenDisplay().
</return>
</function>

<function name="gdk_x11_get_default_xdisplay">
<description>
Gets the default GTK+ display.


</description>
<parameters>
</parameters>
<return> the Xlib &lt;type&gt;Display*&lt;/type&gt; for
the display specified in the &lt;option&gt;--display&lt;/option&gt; command
line option or the &lt;envar&gt;DISPLAY&lt;/envar&gt; environment variable.
</return>
</function>

<function name="gdk_x11_get_server_time">
<description>
Routine to get the current X server time stamp.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow, used for communication
with the server.  The window must have
GDK_PROPERTY_CHANGE_MASK in its events mask or a hang will
result.
</parameter_description>
</parameter>
</parameters>
<return> the time stamp.
</return>
</function>

<function name="gdk_x11_get_xatom_by_name">
<description>
Returns the X atom for GDK's default display corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.


</description>
<parameters>
<parameter name="atom_name">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a X atom for GDK's default display.
</return>
</function>

<function name="gdk_x11_get_xatom_by_name_for_display">
<description>
Returns the X atom for a #GdkDisplay corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="atom_name">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> a X atom for a #GdkDisplay

</return>
</function>

<function name="gdk_x11_get_xatom_name">
<description>
Returns the name of an X atom for GDK's default display. This
function is meant mainly for debugging, so for convenience, unlike
&lt;function&gt;XAtomName()&lt;/function&gt; and gdk_atom_name(), the result 
doesn't need to be freed. Also, this function will never return %NULL, 
even if @xatom is invalid.


</description>
<parameters>
<parameter name="xatom">
<parameter_description> an X atom for GDK's default display
</parameter_description>
</parameter>
</parameters>
<return> name of the X atom; this string is owned by GTK+,
so it shouldn't be modifed or freed. 
</return>
</function>

<function name="gdk_x11_get_xatom_name_for_display">
<description>
Returns the name of an X atom for its display. This
function is meant mainly for debugging, so for convenience, unlike
XAtomName() and gdk_atom_name(), the result doesn't need to
be freed. 

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where @xatom is defined
</parameter_description>
</parameter>
<parameter name="xatom">
<parameter_description> an X atom 
</parameter_description>
</parameter>
</parameters>
<return> name of the X atom; this string is owned by GDK,
so it shouldn't be modifed or freed. 

</return>
</function>

<function name="gdk_x11_grab_server">
<description>
Call gdk_x11_display_grab() on the default display. 
To ungrab the server again, use gdk_x11_ungrab_server(). 

gdk_x11_grab_server()/gdk_x11_ungrab_server() calls can be nested.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_x11_keymap_get_group_for_state">
<description>
Extracts the group from the state field sent in an X Key event.
This is only needed for code processing raw X events, since #GdkEventKey
directly includes an is_modifier field.

Since: 3.6

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkX11Keymap
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> raw state returned from X
</parameter_description>
</parameter>
</parameters>
<return> the index of the active keyboard group for the event

</return>
</function>

<function name="gdk_x11_keymap_key_is_modifier">
<description>
Determines whether a particular key code represents a key that
is a modifier. That is, it's a key that normally just affects
the keyboard state and the behavior of other keys rather than
producing a direct effect itself. This is only needed for code
processing raw X events, since #GdkEventKey directly includes
an is_modifier field.

Since: 3.6

</description>
<parameters>
<parameter name="keymap">
<parameter_description> a #GdkX11Keymap
</parameter_description>
</parameter>
<parameter name="keycode">
<parameter_description> the hardware keycode from a key event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the hardware keycode is a modifier key

</return>
</function>

<function name="gdk_x11_lookup_xdisplay">
<description>
Find the #GdkDisplay corresponding to @display, if any exists.

Since: 2.2

</description>
<parameters>
<parameter name="xdisplay">
<parameter_description> a pointer to an X Display
</parameter_description>
</parameter>
</parameters>
<return> the #GdkDisplay, if found, otherwise %NULL.

</return>
</function>

<function name="gdk_x11_register_standard_event_type">
<description>
Registers interest in receiving extension events with type codes
between @event_base and &lt;literal&gt;event_base + n_events - 1&lt;/literal&gt;.
The registered events must have the window field in the same place
as core X events (this is not the case for e.g. XKB extension events).

If an event type is registered, events of this type will go through
global and window-specific filters (see gdk_window_add_filter()).
Unregistered events will only go through global filters.
GDK may register the events of some X extensions on its own.

This function should only be needed in unusual circumstances, e.g.
when filtering XInput extension events on the root window.

Since: 2.4

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GdkDisplay
</parameter_description>
</parameter>
<parameter name="event_base">
<parameter_description> first event type code to register
</parameter_description>
</parameter>
<parameter name="n_events">
<parameter_description> number of event type codes to register
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_screen_get_monitor_output">
<description>
Gets the XID of the specified output/monitor.
If the X server does not support version 1.2 of the RANDR
extension, 0 is returned.

Since: 2.14

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
<parameter name="monitor_num">
<parameter_description> number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)
</parameter_description>
</parameter>
</parameters>
<return> the XID of the monitor

</return>
</function>

<function name="gdk_x11_screen_get_screen_number">
<description>
Returns the index of a #GdkScreen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the position of @screen among the screens
of its display

</return>
</function>

<function name="gdk_x11_screen_get_window_manager_name">
<description>
Returns the name of the window manager for @screen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> the name of the window manager screen @screen, or
&quot;unknown&quot; if the window manager is unknown. The string is owned by GDK
and should not be freed.

</return>
</function>

<function name="gdk_x11_screen_get_xscreen">
<description>
Returns the screen of a #GdkScreen.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Screen*&lt;/type&gt;

</return>
</function>

<function name="gdk_x11_screen_lookup_visual">
<description>
Looks up the #GdkVisual for a particular screen and X Visual ID.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> a #GdkScreen.
</parameter_description>
</parameter>
<parameter name="xvisualid">
<parameter_description> an X Visual ID.
</parameter_description>
</parameter>
</parameters>
<return> the #GdkVisual (owned by the screen
object), or %NULL if the visual ID wasn't found.

</return>
</function>

<function name="gdk_x11_screen_supports_net_wm_hint">
<description>
This function is specific to the X11 backend of GDK, and indicates
whether the window manager supports a certain hint from the
Extended Window Manager Hints Specification. You can find this
specification on
&lt;ulink url=&quot;http://www.freedesktop.org&quot;&gt;http://www.freedesktop.org&lt;/ulink&gt;.

When using this function, keep in mind that the window manager
can change over time; so you shouldn't use this function in
a way that impacts persistent application state. A common bug
is that your application can start up before the window manager
does when the user logs in, and before the window manager starts
gdk_x11_screen_supports_net_wm_hint() will return %FALSE for every property.
You can monitor the window_manager_changed signal on #GdkScreen to detect
a window manager change.

Since: 2.2

</description>
<parameters>
<parameter name="screen">
<parameter_description> the relevant #GdkScreen.
</parameter_description>
</parameter>
<parameter name="property">
<parameter_description> a property atom.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the window manager supports @property

</return>
</function>

<function name="gdk_x11_set_sm_client_id">
<description>
Sets the &lt;literal&gt;SM_CLIENT_ID&lt;/literal&gt; property on the application's leader window so that
the window manager can save the application's state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual

Since: 2.24

</description>
<parameters>
<parameter name="sm_client_id">
<parameter_description> the client id assigned by the session manager when the
connection was opened, or %NULL to remove the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_ungrab_server">
<description>
Ungrab the default display after it has been grabbed with 
gdk_x11_grab_server(). 

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gdk_x11_visual_get_xvisual">
<description>
Returns the X visual belonging to a #GdkVisual.


</description>
<parameters>
<parameter name="visual">
<parameter_description> a #GdkVisual.
</parameter_description>
</parameter>
</parameters>
<return> an Xlib &lt;type&gt;Visual*&lt;/type&gt;.
</return>
</function>

<function name="gdk_x11_window_foreign_new_for_display">
<description>
Wraps a native window in a #GdkWindow. The function will try to
look up the window using gdk_x11_window_lookup_for_display() first.
If it does not find it there, it will create a new window.

This may fail if the window has been destroyed. If the window
was already known to GDK, a new reference to the existing
#GdkWindow is returned.

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay where the window handle comes from.
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> an XLib &lt;type&gt;Window&lt;/type&gt;
</parameter_description>
</parameter>
</parameters>
<return> a #GdkWindow wrapper for the native
window, or %NULL if the window has been destroyed. The wrapper
will be newly created, if one doesn't exist already.

</return>
</function>

<function name="gdk_x11_window_get_xid">
<description>
Returns the X resource (window) belonging to a #GdkWindow.


</description>
<parameters>
<parameter name="window">
<parameter_description> a native #GdkWindow.
</parameter_description>
</parameter>
</parameters>
<return> the ID of @drawable's X resource.
</return>
</function>

<function name="gdk_x11_window_lookup_for_display">
<description>
Looks up the #GdkWindow that wraps the given native window handle.

Since: 2.24

</description>
<parameters>
<parameter name="display">
<parameter_description> the #GdkDisplay corresponding to the
window handle
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> an XLib &lt;type&gt;Window&lt;/type&gt;
</parameter_description>
</parameter>
</parameters>
<return> the #GdkWindow wrapper for the native
window, or %NULL if there is none.

</return>
</function>

<function name="gdk_x11_window_move_to_current_desktop">
<description>
Moves the window to the correct workspace when running under a 
window manager that supports multiple workspaces, as described
in the &lt;ulink url=&quot;http://www.freedesktop.org/Standards/wm-spec&quot;&gt;Extended 
Window Manager Hints&lt;/ulink&gt;.  Will not do anything if the
window is already on all workspaces.

Since: 2.8

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_window_set_hide_titlebar_when_maximized">
<description>
Set a hint for the window manager, requesting that the titlebar
should be hidden when the window is maximized.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel windows.

Since: 3.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="hide_titlebar_when_maximized">
<parameter_description> whether to hide the titlebar when
maximized
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_window_set_theme_variant">
<description>
GTK+ applications can request a dark theme variant. In order to
make other applications - namely window managers using GTK+ for
themeing - aware of this choice, GTK+ uses this function to
export the requested theme variant as _GTK_THEME_VARIANT property
on toplevel windows.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel windows.

Since: 3.2

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="variant">
<parameter_description> the theme variant to export
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_window_set_user_time">
<description>
The application can use this call to update the _NET_WM_USER_TIME
property on a toplevel window.  This property stores an Xserver
time which represents the time of the last user input event
received for this window.  This property may be used by the window
manager to alter the focus, stacking, and/or placement behavior of
windows when they are mapped depending on whether the new window
was created by a user action or is a &quot;pop-up&quot; window activated by a
timer or some other event.

Note that this property is automatically updated by GDK, so this
function should only be used by applications which handle input
events bypassing GDK.

Since: 2.6

</description>
<parameters>
<parameter name="window">
<parameter_description> A toplevel #GdkWindow
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> An XServer timestamp to which the property should be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_window_set_utf8_property">
<description>
This function modifies or removes an arbitrary X11 window
property of type UTF8_STRING.  If the given @window is
not a toplevel window, it is ignored.

Since: 3.4

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GdkWindow
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> Property name, will be interned as an X atom
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> Property value, or %NULL to delete
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gdk_x11_xatom_to_atom">
<description>
Convert from an X atom for the default display to the corresponding
#GdkAtom.


</description>
<parameters>
<parameter name="xatom">
<parameter_description> an X atom for the default GDK display
</parameter_description>
</parameter>
</parameters>
<return> the corresponding G#dkAtom.
</return>
</function>

<function name="gdk_x11_xatom_to_atom_for_display">
<description>
Convert from an X atom for a #GdkDisplay to the corresponding
#GdkAtom.

Since: 2.2

</description>
<parameters>
<parameter name="display">
<parameter_description> A #GdkDisplay
</parameter_description>
</parameter>
<parameter name="xatom">
<parameter_description> an X atom 
</parameter_description>
</parameter>
</parameters>
<return> the corresponding #GdkAtom.

</return>
</function>

</root>
