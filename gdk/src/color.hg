/* $Id$ */

/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gdk/gdkcolor.h>

_DEFS(gdkmm,gdk)

namespace Gdk
{

class Colormap;

class Color
{
  _CLASS_BOXEDTYPE(Color, GdkColor, NONE, gdk_color_copy, gdk_color_free)
public:

  _CUSTOM_DEFAULT_CTOR
  Color();
  explicit Color(const Glib::ustring& str);

  void set_grey(gushort g);
  void set_grey_p(double g);

  void set_rgb(gushort red_, gushort green_, gushort blue_);
  void set_rgb_p(double red_, double green_, double blue_);

  void set_hsv(double h, double s, double v);
  void set_hsl(double h, double s, double l);

  int set(const Glib::ustring& str); // TODO: bool return type
  int parse(const Glib::ustring& spec); // TODO: bool return type

  gushort get_red() const;
  gushort get_green() const;
  gushort get_blue() const;

  void set_red(gushort r);
  void set_green(gushort g);
  void set_blue(gushort b);

  void rgb_find_color(const Glib::RefPtr<Gdk::Colormap>& map);

  guint get_pixel() const;

  double get_red_p() const;
  double get_green_p() const;
  double get_blue_p() const;

#m4begin
  _WRAP_EQUAL(gdk_color_equal)
#m4end
};


/* These traits are for arrays of GdkColor structs -- not pointer arrays.
 */
struct ColorTraits
{
  typedef Gdk::Color  CppType;
  typedef GdkColor    CType;
  typedef GdkColor    CTypeNonConst;

  static CType   to_c_type      (const CppType& obj) { return *obj.gobj(); }
  static CType   to_c_type      (const CType&   obj) { return obj; }
  static CppType to_cpp_type    (const CType&   obj) { return CppType(const_cast<CType*>(&obj), true); }
  static void    release_c_type (const CType&)       {}
};

typedef Glib::ArrayHandle<Color,ColorTraits> ArrayHandle_Color;

} // namespace Gdk

