/* $Id$ */

/* dragcontext.h
 *
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gdkmm/color.h>
#include <gdkmm/pixbuf.h>
#include <gdkmm/bitmap.h>
#include <glibmm/object.h>
#include <gdk/gdkdnd.h>
#include <glibmm/listhandle.h>
#include <gtkmm/stockid.h>
_DEFS(gdkmm,gdk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{
  class Widget;
} /* namespace Gtk */

//typedef struct _GdkAtom            *GdkAtom;

namespace Gdk
{

_CC_INCLUDE(gdk/gdkenumtypes.h)
_WRAP_ENUM(DragAction, GdkDragAction)
_WRAP_ENUM(DragProtocol, GdkDragProtocol)


class DragContext : public Glib::Object
{
  _CLASS_GOBJECT(DragContext, GdkDragContext, GDK_DRAG_CONTEXT, Glib::Object,GObject)
  _IGNORE(gdk_drag_context_ref, gdk_drag_context_unref)
protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _WRAP_METHOD(void drag_status(DragAction action, guint32 time), gdk_drag_status)
  //TODO: Add _WRAP_METHOD(void drag_refuse(guint32 time), using gdk_drag_status() with action = 0 and then update the drag_status docs.

  _WRAP_METHOD(void drop_reply(bool ok, guint32 time), gdk_drop_reply)
  _WRAP_METHOD(void drop_finish(bool success, guint32 time), gdk_drop_finish)
  _WRAP_METHOD(GdkAtom get_selection(), gdk_drag_get_selection)

  _WRAP_METHOD(void drag_finish(bool success, bool del, guint32 time), gtk_drag_finish)
  //Gtk::Widget* get_source_widget() - see Gtk::Widget::drag_get_source_widget()

  // void set_icon(Gtk::Widget* widget, int hot_x, int hot_y) - see Gtk::Widget::set_as_icon().
  _WRAP_METHOD(void set_icon(const Glib::RefPtr<Gdk::Colormap>& colormap, const Glib::RefPtr<Gdk::Pixmap>& pixmap, const Glib::RefPtr<Gdk::Bitmap>& mask, int hot_x, int hot_y), gtk_drag_set_icon_pixmap)
  _WRAP_METHOD(void set_icon(const Glib::RefPtr<Gdk::Pixbuf>& pixbuf, int hot_x, int hot_y), gtk_drag_set_icon_pixbuf)

  // First argument was changed from StockID to ustring to avoid 
  // cross-dependence between gdkmm and gtkmm.
  // See http://bugzilla.gnome.org/show_bug.cgi?id=79124 for details
  _WRAP_METHOD(void set_icon(const Glib::ustring& stock_id, int hot_x, int hot_y), gtk_drag_set_icon_stock)
  _WRAP_METHOD(void set_icon(), gtk_drag_set_icon_default)

  _MEMBER_GET(protocol, protocol, DragProtocol, GdkDragProtocol)
  _MEMBER_GET(is_source, is_source, bool, gboolean)
  _MEMBER_GET(actions, actions, DragAction, GdkDragAction)
  _MEMBER_GET(suggested_action, suggested_action, DragAction, GdkDragAction)
  _MEMBER_GET(action, action, DragAction, GdkDragAction)
  _MEMBER_GET(start_time, start_time, guint32, guint32)

  void find_window_for_screen(const Glib::RefPtr<Window>& drag_window, const Glib::RefPtr<Screen>& screen, int x_root, int y_root, Glib::RefPtr<Window>& dest_window, GdkDragProtocol* protocol);
  _IGNORE(gdk_drag_find_window_for_screen)
};

} /* namespace Gdk */

