/* $Id$ */

/* display.h
 *
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gdkmm/screen.h>
#include <gdkmm/device.h>
#include <gdkmm/types.h> //For ModifierType
_DEFS(gdkmm,gdk)
_PINCLUDE(glibmm/private/object_p.h)


namespace Gdk
{

_CC_INCLUDE(gdk/gdkenumtypes.h)

class Drawable;

class Display : public Glib::Object
{
  _CLASS_GOBJECT(Display,GdkDisplay,GDK_DISPLAY,Glib::Object,GObject)
protected:
  _CTOR_DEFAULT

public:
  _WRAP_METHOD(static Glib::RefPtr<Display> open(const Glib::ustring& display_name), gdk_display_open, refreturn);

  _WRAP_METHOD(Glib::ustring get_name() const, gdk_display_get_name)

  _WRAP_METHOD(int get_n_screens() const, gdk_display_get_n_screens)
  _WRAP_METHOD(Glib::RefPtr<Screen> get_screen(int screen_num), gdk_display_get_screen, refreturn)
  _WRAP_METHOD(Glib::RefPtr<Screen> get_default_screen(), gdk_display_get_default_screen, refreturn)
  _WRAP_METHOD(void pointer_ungrab(guint32 time_), gdk_display_pointer_ungrab)
  _WRAP_METHOD(void keyboard_ungrab(guint32 time_), gdk_display_keyboard_ungrab)
  _WRAP_METHOD(bool pointer_is_grabbed() const, gdk_display_pointer_is_grabbed)
  _WRAP_METHOD(void beep(), gdk_display_beep)
  _WRAP_METHOD(void sync(), gdk_display_sync)
  _WRAP_METHOD(void	close(), gdk_display_close)

  _WRAP_METHOD(Glib::ListHandle< Glib::RefPtr<Device> > list_devices(), gdk_display_list_devices)

  _WRAP_METHOD(GdkEvent* get_event(), gdk_display_get_event)
  _WRAP_METHOD(GdkEvent* peek_event(), gdk_display_peek_event)
  _WRAP_METHOD(void put_event(GdkEvent* event), gdk_display_put_event)

  //TODO: Use a slot here, though this is probably never used anyway:
  _WRAP_METHOD(void add_client_message_filter(GdkAtom message_type, GdkFilterFunc func, gpointer data), gdk_display_add_client_message_filter)

  _WRAP_METHOD(void set_double_click_time(guint msec), gdk_display_set_double_click_time)

  _WRAP_METHOD(static Glib::RefPtr<Display> get_default(), gdk_display_get_default, refreturn)

  _WRAP_METHOD(Glib::RefPtr<Device> get_core_pointer(), gdk_display_get_core_pointer, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Device> get_core_pointer() const, gdk_display_get_core_pointer, refreturn)

  /**
   * Gets the current location of the pointer and the current modifier
   * mask for a given display.
   *
   * @param screen location to store the screen that the
   *          cursor is on, or %NULL.
   * @x: location to store root window X coordinate of pointer.
   * @y: location to store root window Y coordinate of pointer.
   * @mask: location to store current modifier mask
   *
   **/
  void get_pointer(Glib::RefPtr<Screen>& screen, int& x, int& y, ModifierType& mask);

  // In fact, any one of these gdk_display_get_pointer() args can be NULL, but we don't need so many overloads.
  /**
   * Gets the current location of the pointer and the current modifier
   * mask for a given display.
   *
   * @x: location to store root window X coordinate of pointer.
   * @y: location to store root window Y coordinate of pointer.
   * @mask: location to store current modifier mask
   *
   **/
  void get_pointer(int& x, int& y, ModifierType& mask); 
  _IGNORE(gdk_display_get_pointer)
  
  _WRAP_METHOD(Glib::RefPtr<Window> get_window_at_pointer(int& win_x, int& win_y), gdk_display_get_window_at_pointer, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Window> get_window_at_pointer(int& win_x, int& win_y) const, gdk_display_get_window_at_pointer, refreturn)

  /** Obtains the window underneath the mouse pointer. Returns a null RefPtr if the window
   * under the mouse pointer is not known to GDK (for example, belongs to
   * another application).
   */
  Glib::RefPtr<Window> get_window_at_pointer();

  /** Obtains the window underneath the mouse pointer. Returns a null RefPtr if the window
   * under the mouse pointer is not known to GDK (for example, belongs to
   * another application).
   */
  Glib::RefPtr<const Window> get_window_at_pointer() const;

  _WRAP_METHOD(GdkDisplayPointerHooks* set_pointer_hooks(const GdkDisplayPointerHooks* new_hooks), gdk_display_set_pointer_hooks)
  //TODO: Add unset_pointer_hooks(), by using a 0 for new_hooks.
  
  _WRAP_METHOD(static Glib::RefPtr<Display> open_default_libgtk_only(), gdk_display_open_default_libgtk_only, refreturn)

_GTKMMPROC_H_AND_CC(#ifndef G_OS_WIN32)
  _WRAP_METHOD(guint32 get_drag_protocol(guint32 xid, GdkDragProtocol& protocol), gdk_drag_get_protocol_for_display)
_GTKMMPROC_H_AND_CC(#endif /* G_OS_WIN32*/)

  _WRAP_METHOD(GdkKeymap* get_keymap(), gdk_keymap_get_for_display)
  _WRAP_METHOD(const GdkKeymap* get_keymap() const, gdk_keymap_get_for_display)

  bool set_selection_owner(const Glib::RefPtr<Window>& owner, GdkAtom selection, guint32 time_, bool send_event);
  Glib::RefPtr<Window> get_selection_owner(GdkAtom selection);
  void selection_send_notify(guint32 requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_);

  _WRAP_METHOD(Glib::RefPtr<Pixmap> lookup_pixmap(GdkNativeWindow anid), gdk_pixmap_lookup_for_display)
  _WRAP_METHOD(Glib::RefPtr<const Pixmap> lookup_pixmap(GdkNativeWindow anid) const, gdk_pixmap_lookup_for_display)

  //TODO: wrap the vfuncs, though they are not very useful because people will not derive from this class? murrayc.
  
  _WRAP_SIGNAL(void closed(bool is_error), closed)
};

} /* namespace Gdk */

